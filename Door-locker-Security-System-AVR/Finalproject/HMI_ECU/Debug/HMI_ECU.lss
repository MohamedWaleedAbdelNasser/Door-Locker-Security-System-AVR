
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000425a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f0  00800060  0000425a  000042ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800250  00800250  000044de  2**0
                  ALLOC
  3 .stab         0000345c  00000000  00000000  000044e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012fc  00000000  00000000  0000793c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b3d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c75b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d934  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000daf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ddea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 32 1e 	jmp	0x3c64	; 0x3c64 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 35       	cpi	r26, 0x50	; 80
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e5       	ldi	r26, 0x50	; 80
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 35       	cpi	r26, 0x56	; 86
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <main>
      8a:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 af 20 	jmp	0x415e	; 0x415e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e3       	ldi	r26, 0x3B	; 59
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 af 20 	jmp	0x415e	; 0x415e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e3       	ldi	r24, 0x3B	; 59
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b7 20 	jmp	0x416e	; 0x416e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e3       	ldi	r22, 0x3B	; 59
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d3 20 	jmp	0x41a6	; 0x41a6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bf 20 	jmp	0x417e	; 0x417e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 db 20 	jmp	0x41b6	; 0x41b6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b7 20 	jmp	0x416e	; 0x416e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 d3 20 	jmp	0x41a6	; 0x41a6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ed 5b       	subi	r30, 0xBD	; 189
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <KEYPAD_getPressedKey+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
     e3a:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
     e3c:	1b 82       	std	Y+3, r1	; 0x03
     e3e:	43 c0       	rjmp	.+134    	; 0xec6 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	98 2f       	mov	r25, r24
     e4c:	9c 5f       	subi	r25, 0xFC	; 252
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	69 2f       	mov	r22, r25
     e52:	41 e0       	ldi	r20, 0x01	; 1
     e54:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	9c 01       	movw	r18, r24
     e60:	2c 5f       	subi	r18, 0xFC	; 252
     e62:	3f 4f       	sbci	r19, 0xFF	; 255
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <KEYPAD_getPressedKey+0x40>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	2a 95       	dec	r18
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <KEYPAD_getPressedKey+0x3c>
     e72:	80 95       	com	r24
     e74:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	69 81       	ldd	r22, Y+1	; 0x01
     e7a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
     e7e:	1a 82       	std	Y+2, r1	; 0x02
     e80:	1c c0       	rjmp	.+56     	; 0xeba <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	6a 81       	ldd	r22, Y+2	; 0x02
     e86:	0e 94 e5 09 	call	0x13ca	; 0x13ca <GPIO_readPin>
     e8a:	88 23       	and	r24, r24
     e8c:	99 f4       	brne	.+38     	; 0xeb4 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	98 2f       	mov	r25, r24
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	89 0f       	add	r24, r25
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	0e 94 68 07 	call	0xed0	; 0xed0 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	8f 5f       	subi	r24, 0xFF	; 255
     eb8:	8a 83       	std	Y+2, r24	; 0x02
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	84 30       	cpi	r24, 0x04	; 4
     ebe:	08 f3       	brcs	.-62     	; 0xe82 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	8f 5f       	subi	r24, 0xFF	; 255
     ec4:	8b 83       	std	Y+3, r24	; 0x03
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	84 30       	cpi	r24, 0x04	; 4
     eca:	08 f4       	brcc	.+2      	; 0xece <KEYPAD_getPressedKey+0xa0>
     ecc:	b9 cf       	rjmp	.-142    	; 0xe40 <KEYPAD_getPressedKey+0x12>
     ece:	b6 cf       	rjmp	.-148    	; 0xe3c <KEYPAD_getPressedKey+0xe>

00000ed0 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <KEYPAD_4x4_adjustKeyNumber+0x6>
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <KEYPAD_4x4_adjustKeyNumber+0x8>
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
     ede:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	3c 83       	std	Y+4, r19	; 0x04
     ee8:	2b 83       	std	Y+3, r18	; 0x03
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	9c 81       	ldd	r25, Y+4	; 0x04
     eee:	88 30       	cpi	r24, 0x08	; 8
     ef0:	91 05       	cpc	r25, r1
     ef2:	09 f4       	brne	.+2      	; 0xef6 <KEYPAD_4x4_adjustKeyNumber+0x26>
     ef4:	70 c0       	rjmp	.+224    	; 0xfd6 <KEYPAD_4x4_adjustKeyNumber+0x106>
     ef6:	2b 81       	ldd	r18, Y+3	; 0x03
     ef8:	3c 81       	ldd	r19, Y+4	; 0x04
     efa:	29 30       	cpi	r18, 0x09	; 9
     efc:	31 05       	cpc	r19, r1
     efe:	5c f5       	brge	.+86     	; 0xf56 <KEYPAD_4x4_adjustKeyNumber+0x86>
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	9c 81       	ldd	r25, Y+4	; 0x04
     f04:	84 30       	cpi	r24, 0x04	; 4
     f06:	91 05       	cpc	r25, r1
     f08:	09 f4       	brne	.+2      	; 0xf0c <KEYPAD_4x4_adjustKeyNumber+0x3c>
     f0a:	59 c0       	rjmp	.+178    	; 0xfbe <KEYPAD_4x4_adjustKeyNumber+0xee>
     f0c:	2b 81       	ldd	r18, Y+3	; 0x03
     f0e:	3c 81       	ldd	r19, Y+4	; 0x04
     f10:	25 30       	cpi	r18, 0x05	; 5
     f12:	31 05       	cpc	r19, r1
     f14:	9c f4       	brge	.+38     	; 0xf3c <KEYPAD_4x4_adjustKeyNumber+0x6c>
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	9c 81       	ldd	r25, Y+4	; 0x04
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	91 05       	cpc	r25, r1
     f1e:	09 f4       	brne	.+2      	; 0xf22 <KEYPAD_4x4_adjustKeyNumber+0x52>
     f20:	48 c0       	rjmp	.+144    	; 0xfb2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
     f22:	2b 81       	ldd	r18, Y+3	; 0x03
     f24:	3c 81       	ldd	r19, Y+4	; 0x04
     f26:	23 30       	cpi	r18, 0x03	; 3
     f28:	31 05       	cpc	r19, r1
     f2a:	0c f0       	brlt	.+2      	; 0xf2e <KEYPAD_4x4_adjustKeyNumber+0x5e>
     f2c:	45 c0       	rjmp	.+138    	; 0xfb8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	91 05       	cpc	r25, r1
     f36:	09 f4       	brne	.+2      	; 0xf3a <KEYPAD_4x4_adjustKeyNumber+0x6a>
     f38:	39 c0       	rjmp	.+114    	; 0xfac <KEYPAD_4x4_adjustKeyNumber+0xdc>
     f3a:	67 c0       	rjmp	.+206    	; 0x100a <KEYPAD_4x4_adjustKeyNumber+0x13a>
     f3c:	2b 81       	ldd	r18, Y+3	; 0x03
     f3e:	3c 81       	ldd	r19, Y+4	; 0x04
     f40:	26 30       	cpi	r18, 0x06	; 6
     f42:	31 05       	cpc	r19, r1
     f44:	09 f4       	brne	.+2      	; 0xf48 <KEYPAD_4x4_adjustKeyNumber+0x78>
     f46:	41 c0       	rjmp	.+130    	; 0xfca <KEYPAD_4x4_adjustKeyNumber+0xfa>
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	9c 81       	ldd	r25, Y+4	; 0x04
     f4c:	87 30       	cpi	r24, 0x07	; 7
     f4e:	91 05       	cpc	r25, r1
     f50:	0c f0       	brlt	.+2      	; 0xf54 <KEYPAD_4x4_adjustKeyNumber+0x84>
     f52:	3e c0       	rjmp	.+124    	; 0xfd0 <KEYPAD_4x4_adjustKeyNumber+0x100>
     f54:	37 c0       	rjmp	.+110    	; 0xfc4 <KEYPAD_4x4_adjustKeyNumber+0xf4>
     f56:	2b 81       	ldd	r18, Y+3	; 0x03
     f58:	3c 81       	ldd	r19, Y+4	; 0x04
     f5a:	2c 30       	cpi	r18, 0x0C	; 12
     f5c:	31 05       	cpc	r19, r1
     f5e:	09 f4       	brne	.+2      	; 0xf62 <KEYPAD_4x4_adjustKeyNumber+0x92>
     f60:	46 c0       	rjmp	.+140    	; 0xfee <KEYPAD_4x4_adjustKeyNumber+0x11e>
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	8d 30       	cpi	r24, 0x0D	; 13
     f68:	91 05       	cpc	r25, r1
     f6a:	5c f4       	brge	.+22     	; 0xf82 <KEYPAD_4x4_adjustKeyNumber+0xb2>
     f6c:	2b 81       	ldd	r18, Y+3	; 0x03
     f6e:	3c 81       	ldd	r19, Y+4	; 0x04
     f70:	2a 30       	cpi	r18, 0x0A	; 10
     f72:	31 05       	cpc	r19, r1
     f74:	b1 f1       	breq	.+108    	; 0xfe2 <KEYPAD_4x4_adjustKeyNumber+0x112>
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	9c 81       	ldd	r25, Y+4	; 0x04
     f7a:	8b 30       	cpi	r24, 0x0B	; 11
     f7c:	91 05       	cpc	r25, r1
     f7e:	a4 f5       	brge	.+104    	; 0xfe8 <KEYPAD_4x4_adjustKeyNumber+0x118>
     f80:	2d c0       	rjmp	.+90     	; 0xfdc <KEYPAD_4x4_adjustKeyNumber+0x10c>
     f82:	2b 81       	ldd	r18, Y+3	; 0x03
     f84:	3c 81       	ldd	r19, Y+4	; 0x04
     f86:	2e 30       	cpi	r18, 0x0E	; 14
     f88:	31 05       	cpc	r19, r1
     f8a:	b9 f1       	breq	.+110    	; 0xffa <KEYPAD_4x4_adjustKeyNumber+0x12a>
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	8e 30       	cpi	r24, 0x0E	; 14
     f92:	91 05       	cpc	r25, r1
     f94:	7c f1       	brlt	.+94     	; 0xff4 <KEYPAD_4x4_adjustKeyNumber+0x124>
     f96:	2b 81       	ldd	r18, Y+3	; 0x03
     f98:	3c 81       	ldd	r19, Y+4	; 0x04
     f9a:	2f 30       	cpi	r18, 0x0F	; 15
     f9c:	31 05       	cpc	r19, r1
     f9e:	79 f1       	breq	.+94     	; 0xffe <KEYPAD_4x4_adjustKeyNumber+0x12e>
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	80 31       	cpi	r24, 0x10	; 16
     fa6:	91 05       	cpc	r25, r1
     fa8:	69 f1       	breq	.+90     	; 0x1004 <KEYPAD_4x4_adjustKeyNumber+0x134>
     faa:	2f c0       	rjmp	.+94     	; 0x100a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
     fac:	87 e0       	ldi	r24, 0x07	; 7
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	2e c0       	rjmp	.+92     	; 0x100e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
     fb2:	88 e0       	ldi	r24, 0x08	; 8
     fb4:	89 83       	std	Y+1, r24	; 0x01
     fb6:	2b c0       	rjmp	.+86     	; 0x100e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
     fb8:	89 e0       	ldi	r24, 0x09	; 9
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	28 c0       	rjmp	.+80     	; 0x100e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
     fbe:	85 e2       	ldi	r24, 0x25	; 37
     fc0:	89 83       	std	Y+1, r24	; 0x01
     fc2:	25 c0       	rjmp	.+74     	; 0x100e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
     fc4:	84 e0       	ldi	r24, 0x04	; 4
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	22 c0       	rjmp	.+68     	; 0x100e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
     fca:	85 e0       	ldi	r24, 0x05	; 5
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	1f c0       	rjmp	.+62     	; 0x100e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
     fd0:	86 e0       	ldi	r24, 0x06	; 6
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	1c c0       	rjmp	.+56     	; 0x100e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
     fd6:	8a e2       	ldi	r24, 0x2A	; 42
     fd8:	89 83       	std	Y+1, r24	; 0x01
     fda:	19 c0       	rjmp	.+50     	; 0x100e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	16 c0       	rjmp	.+44     	; 0x100e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	89 83       	std	Y+1, r24	; 0x01
     fe6:	13 c0       	rjmp	.+38     	; 0x100e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
     fe8:	83 e0       	ldi	r24, 0x03	; 3
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	10 c0       	rjmp	.+32     	; 0x100e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
     fee:	8d e2       	ldi	r24, 0x2D	; 45
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	0d c0       	rjmp	.+26     	; 0x100e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
     ff4:	8d e0       	ldi	r24, 0x0D	; 13
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	0a c0       	rjmp	.+20     	; 0x100e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
     ffa:	19 82       	std	Y+1, r1	; 0x01
     ffc:	08 c0       	rjmp	.+16     	; 0x100e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
     ffe:	8d e3       	ldi	r24, 0x3D	; 61
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	05 c0       	rjmp	.+10     	; 0x100e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1004:	8b e2       	ldi	r24, 0x2B	; 43
    1006:	89 83       	std	Y+1, r24	; 0x01
    1008:	02 c0       	rjmp	.+4      	; 0x100e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    100e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	00 d0       	rcall	.+0      	; 0x1024 <GPIO_setupPinDirection+0x6>
    1024:	00 d0       	rcall	.+0      	; 0x1026 <GPIO_setupPinDirection+0x8>
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	6a 83       	std	Y+2, r22	; 0x02
    1030:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	88 30       	cpi	r24, 0x08	; 8
    1036:	08 f0       	brcs	.+2      	; 0x103a <GPIO_setupPinDirection+0x1c>
    1038:	d5 c0       	rjmp	.+426    	; 0x11e4 <GPIO_setupPinDirection+0x1c6>
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	84 30       	cpi	r24, 0x04	; 4
    103e:	08 f0       	brcs	.+2      	; 0x1042 <GPIO_setupPinDirection+0x24>
    1040:	d1 c0       	rjmp	.+418    	; 0x11e4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3d 83       	std	Y+5, r19	; 0x05
    104a:	2c 83       	std	Y+4, r18	; 0x04
    104c:	8c 81       	ldd	r24, Y+4	; 0x04
    104e:	9d 81       	ldd	r25, Y+5	; 0x05
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	91 05       	cpc	r25, r1
    1054:	09 f4       	brne	.+2      	; 0x1058 <GPIO_setupPinDirection+0x3a>
    1056:	43 c0       	rjmp	.+134    	; 0x10de <GPIO_setupPinDirection+0xc0>
    1058:	2c 81       	ldd	r18, Y+4	; 0x04
    105a:	3d 81       	ldd	r19, Y+5	; 0x05
    105c:	22 30       	cpi	r18, 0x02	; 2
    105e:	31 05       	cpc	r19, r1
    1060:	2c f4       	brge	.+10     	; 0x106c <GPIO_setupPinDirection+0x4e>
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	9d 81       	ldd	r25, Y+5	; 0x05
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	71 f0       	breq	.+28     	; 0x1086 <GPIO_setupPinDirection+0x68>
    106a:	bc c0       	rjmp	.+376    	; 0x11e4 <GPIO_setupPinDirection+0x1c6>
    106c:	2c 81       	ldd	r18, Y+4	; 0x04
    106e:	3d 81       	ldd	r19, Y+5	; 0x05
    1070:	22 30       	cpi	r18, 0x02	; 2
    1072:	31 05       	cpc	r19, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <GPIO_setupPinDirection+0x5a>
    1076:	5f c0       	rjmp	.+190    	; 0x1136 <GPIO_setupPinDirection+0x118>
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	9d 81       	ldd	r25, Y+5	; 0x05
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	91 05       	cpc	r25, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <GPIO_setupPinDirection+0x66>
    1082:	85 c0       	rjmp	.+266    	; 0x118e <GPIO_setupPinDirection+0x170>
    1084:	af c0       	rjmp	.+350    	; 0x11e4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	a1 f4       	brne	.+40     	; 0x10b4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    108c:	aa e3       	ldi	r26, 0x3A	; 58
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	ea e3       	ldi	r30, 0x3A	; 58
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <GPIO_setupPinDirection+0x8c>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <GPIO_setupPinDirection+0x88>
    10ae:	84 2b       	or	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	98 c0       	rjmp	.+304    	; 0x11e4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    10b4:	aa e3       	ldi	r26, 0x3A	; 58
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	ea e3       	ldi	r30, 0x3A	; 58
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <GPIO_setupPinDirection+0xb4>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <GPIO_setupPinDirection+0xb0>
    10d6:	80 95       	com	r24
    10d8:	84 23       	and	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	83 c0       	rjmp	.+262    	; 0x11e4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	a1 f4       	brne	.+40     	; 0x110c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10e4:	a7 e3       	ldi	r26, 0x37	; 55
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e7 e3       	ldi	r30, 0x37	; 55
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <GPIO_setupPinDirection+0xe4>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <GPIO_setupPinDirection+0xe0>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	6c c0       	rjmp	.+216    	; 0x11e4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    110c:	a7 e3       	ldi	r26, 0x37	; 55
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e7 e3       	ldi	r30, 0x37	; 55
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_setupPinDirection+0x10c>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_setupPinDirection+0x108>
    112e:	80 95       	com	r24
    1130:	84 23       	and	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	57 c0       	rjmp	.+174    	; 0x11e4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	a1 f4       	brne	.+40     	; 0x1164 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    113c:	a4 e3       	ldi	r26, 0x34	; 52
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e4 e3       	ldi	r30, 0x34	; 52
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <GPIO_setupPinDirection+0x13c>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <GPIO_setupPinDirection+0x138>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	40 c0       	rjmp	.+128    	; 0x11e4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1164:	a4 e3       	ldi	r26, 0x34	; 52
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e4 e3       	ldi	r30, 0x34	; 52
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <GPIO_setupPinDirection+0x164>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <GPIO_setupPinDirection+0x160>
    1186:	80 95       	com	r24
    1188:	84 23       	and	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	2b c0       	rjmp	.+86     	; 0x11e4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	a1 f4       	brne	.+40     	; 0x11bc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1194:	a1 e3       	ldi	r26, 0x31	; 49
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e1 e3       	ldi	r30, 0x31	; 49
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <GPIO_setupPinDirection+0x194>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <GPIO_setupPinDirection+0x190>
    11b6:	84 2b       	or	r24, r20
    11b8:	8c 93       	st	X, r24
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    11bc:	a1 e3       	ldi	r26, 0x31	; 49
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e1 e3       	ldi	r30, 0x31	; 49
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <GPIO_setupPinDirection+0x1bc>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <GPIO_setupPinDirection+0x1b8>
    11de:	80 95       	com	r24
    11e0:	84 23       	and	r24, r20
    11e2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <GPIO_writePin+0x6>
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <GPIO_writePin+0x8>
    11fc:	0f 92       	push	r0
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	6a 83       	std	Y+2, r22	; 0x02
    1206:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	88 30       	cpi	r24, 0x08	; 8
    120c:	08 f0       	brcs	.+2      	; 0x1210 <GPIO_writePin+0x1c>
    120e:	d5 c0       	rjmp	.+426    	; 0x13ba <GPIO_writePin+0x1c6>
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	84 30       	cpi	r24, 0x04	; 4
    1214:	08 f0       	brcs	.+2      	; 0x1218 <GPIO_writePin+0x24>
    1216:	d1 c0       	rjmp	.+418    	; 0x13ba <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	3d 83       	std	Y+5, r19	; 0x05
    1220:	2c 83       	std	Y+4, r18	; 0x04
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9d 81       	ldd	r25, Y+5	; 0x05
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	91 05       	cpc	r25, r1
    122a:	09 f4       	brne	.+2      	; 0x122e <GPIO_writePin+0x3a>
    122c:	43 c0       	rjmp	.+134    	; 0x12b4 <GPIO_writePin+0xc0>
    122e:	2c 81       	ldd	r18, Y+4	; 0x04
    1230:	3d 81       	ldd	r19, Y+5	; 0x05
    1232:	22 30       	cpi	r18, 0x02	; 2
    1234:	31 05       	cpc	r19, r1
    1236:	2c f4       	brge	.+10     	; 0x1242 <GPIO_writePin+0x4e>
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	9d 81       	ldd	r25, Y+5	; 0x05
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	71 f0       	breq	.+28     	; 0x125c <GPIO_writePin+0x68>
    1240:	bc c0       	rjmp	.+376    	; 0x13ba <GPIO_writePin+0x1c6>
    1242:	2c 81       	ldd	r18, Y+4	; 0x04
    1244:	3d 81       	ldd	r19, Y+5	; 0x05
    1246:	22 30       	cpi	r18, 0x02	; 2
    1248:	31 05       	cpc	r19, r1
    124a:	09 f4       	brne	.+2      	; 0x124e <GPIO_writePin+0x5a>
    124c:	5f c0       	rjmp	.+190    	; 0x130c <GPIO_writePin+0x118>
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	9d 81       	ldd	r25, Y+5	; 0x05
    1252:	83 30       	cpi	r24, 0x03	; 3
    1254:	91 05       	cpc	r25, r1
    1256:	09 f4       	brne	.+2      	; 0x125a <GPIO_writePin+0x66>
    1258:	85 c0       	rjmp	.+266    	; 0x1364 <GPIO_writePin+0x170>
    125a:	af c0       	rjmp	.+350    	; 0x13ba <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	a1 f4       	brne	.+40     	; 0x128a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1262:	ab e3       	ldi	r26, 0x3B	; 59
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	eb e3       	ldi	r30, 0x3B	; 59
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <GPIO_writePin+0x8c>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <GPIO_writePin+0x88>
    1284:	84 2b       	or	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	98 c0       	rjmp	.+304    	; 0x13ba <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    128a:	ab e3       	ldi	r26, 0x3B	; 59
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	eb e3       	ldi	r30, 0x3B	; 59
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <GPIO_writePin+0xb4>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <GPIO_writePin+0xb0>
    12ac:	80 95       	com	r24
    12ae:	84 23       	and	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	83 c0       	rjmp	.+262    	; 0x13ba <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	a1 f4       	brne	.+40     	; 0x12e2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    12ba:	a8 e3       	ldi	r26, 0x38	; 56
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e8 e3       	ldi	r30, 0x38	; 56
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <GPIO_writePin+0xe4>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <GPIO_writePin+0xe0>
    12dc:	84 2b       	or	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	6c c0       	rjmp	.+216    	; 0x13ba <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12e2:	a8 e3       	ldi	r26, 0x38	; 56
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e8 e3       	ldi	r30, 0x38	; 56
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <GPIO_writePin+0x10c>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <GPIO_writePin+0x108>
    1304:	80 95       	com	r24
    1306:	84 23       	and	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	57 c0       	rjmp	.+174    	; 0x13ba <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	a1 f4       	brne	.+40     	; 0x133a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1312:	a5 e3       	ldi	r26, 0x35	; 53
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e5 e3       	ldi	r30, 0x35	; 53
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <GPIO_writePin+0x13c>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <GPIO_writePin+0x138>
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	40 c0       	rjmp	.+128    	; 0x13ba <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    133a:	a5 e3       	ldi	r26, 0x35	; 53
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e5 e3       	ldi	r30, 0x35	; 53
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <GPIO_writePin+0x164>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <GPIO_writePin+0x160>
    135c:	80 95       	com	r24
    135e:	84 23       	and	r24, r20
    1360:	8c 93       	st	X, r24
    1362:	2b c0       	rjmp	.+86     	; 0x13ba <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	a1 f4       	brne	.+40     	; 0x1392 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    136a:	a2 e3       	ldi	r26, 0x32	; 50
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e2 e3       	ldi	r30, 0x32	; 50
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <GPIO_writePin+0x194>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <GPIO_writePin+0x190>
    138c:	84 2b       	or	r24, r20
    138e:	8c 93       	st	X, r24
    1390:	14 c0       	rjmp	.+40     	; 0x13ba <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1392:	a2 e3       	ldi	r26, 0x32	; 50
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e2 e3       	ldi	r30, 0x32	; 50
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <GPIO_writePin+0x1bc>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <GPIO_writePin+0x1b8>
    13b4:	80 95       	com	r24
    13b6:	84 23       	and	r24, r20
    13b8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <GPIO_readPin+0x6>
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <GPIO_readPin+0x8>
    13d2:	0f 92       	push	r0
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	8a 83       	std	Y+2, r24	; 0x02
    13da:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13dc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	88 30       	cpi	r24, 0x08	; 8
    13e2:	08 f0       	brcs	.+2      	; 0x13e6 <GPIO_readPin+0x1c>
    13e4:	84 c0       	rjmp	.+264    	; 0x14ee <GPIO_readPin+0x124>
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	84 30       	cpi	r24, 0x04	; 4
    13ea:	08 f0       	brcs	.+2      	; 0x13ee <GPIO_readPin+0x24>
    13ec:	80 c0       	rjmp	.+256    	; 0x14ee <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	3d 83       	std	Y+5, r19	; 0x05
    13f6:	2c 83       	std	Y+4, r18	; 0x04
    13f8:	4c 81       	ldd	r20, Y+4	; 0x04
    13fa:	5d 81       	ldd	r21, Y+5	; 0x05
    13fc:	41 30       	cpi	r20, 0x01	; 1
    13fe:	51 05       	cpc	r21, r1
    1400:	79 f1       	breq	.+94     	; 0x1460 <GPIO_readPin+0x96>
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	9d 81       	ldd	r25, Y+5	; 0x05
    1406:	82 30       	cpi	r24, 0x02	; 2
    1408:	91 05       	cpc	r25, r1
    140a:	34 f4       	brge	.+12     	; 0x1418 <GPIO_readPin+0x4e>
    140c:	2c 81       	ldd	r18, Y+4	; 0x04
    140e:	3d 81       	ldd	r19, Y+5	; 0x05
    1410:	21 15       	cp	r18, r1
    1412:	31 05       	cpc	r19, r1
    1414:	69 f0       	breq	.+26     	; 0x1430 <GPIO_readPin+0x66>
    1416:	6b c0       	rjmp	.+214    	; 0x14ee <GPIO_readPin+0x124>
    1418:	4c 81       	ldd	r20, Y+4	; 0x04
    141a:	5d 81       	ldd	r21, Y+5	; 0x05
    141c:	42 30       	cpi	r20, 0x02	; 2
    141e:	51 05       	cpc	r21, r1
    1420:	b9 f1       	breq	.+110    	; 0x1490 <GPIO_readPin+0xc6>
    1422:	8c 81       	ldd	r24, Y+4	; 0x04
    1424:	9d 81       	ldd	r25, Y+5	; 0x05
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	91 05       	cpc	r25, r1
    142a:	09 f4       	brne	.+2      	; 0x142e <GPIO_readPin+0x64>
    142c:	49 c0       	rjmp	.+146    	; 0x14c0 <GPIO_readPin+0xf6>
    142e:	5f c0       	rjmp	.+190    	; 0x14ee <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1430:	e9 e3       	ldi	r30, 0x39	; 57
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	a9 01       	movw	r20, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <GPIO_readPin+0x7e>
    1444:	55 95       	asr	r21
    1446:	47 95       	ror	r20
    1448:	8a 95       	dec	r24
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <GPIO_readPin+0x7a>
    144c:	ca 01       	movw	r24, r20
    144e:	81 70       	andi	r24, 0x01	; 1
    1450:	90 70       	andi	r25, 0x00	; 0
    1452:	88 23       	and	r24, r24
    1454:	19 f0       	breq	.+6      	; 0x145c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	49 c0       	rjmp	.+146    	; 0x14ee <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    145c:	19 82       	std	Y+1, r1	; 0x01
    145e:	47 c0       	rjmp	.+142    	; 0x14ee <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1460:	e6 e3       	ldi	r30, 0x36	; 54
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a9 01       	movw	r20, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <GPIO_readPin+0xae>
    1474:	55 95       	asr	r21
    1476:	47 95       	ror	r20
    1478:	8a 95       	dec	r24
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <GPIO_readPin+0xaa>
    147c:	ca 01       	movw	r24, r20
    147e:	81 70       	andi	r24, 0x01	; 1
    1480:	90 70       	andi	r25, 0x00	; 0
    1482:	88 23       	and	r24, r24
    1484:	19 f0       	breq	.+6      	; 0x148c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	31 c0       	rjmp	.+98     	; 0x14ee <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    148c:	19 82       	std	Y+1, r1	; 0x01
    148e:	2f c0       	rjmp	.+94     	; 0x14ee <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1490:	e3 e3       	ldi	r30, 0x33	; 51
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	88 2f       	mov	r24, r24
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a9 01       	movw	r20, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <GPIO_readPin+0xde>
    14a4:	55 95       	asr	r21
    14a6:	47 95       	ror	r20
    14a8:	8a 95       	dec	r24
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <GPIO_readPin+0xda>
    14ac:	ca 01       	movw	r24, r20
    14ae:	81 70       	andi	r24, 0x01	; 1
    14b0:	90 70       	andi	r25, 0x00	; 0
    14b2:	88 23       	and	r24, r24
    14b4:	19 f0       	breq	.+6      	; 0x14bc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	19 c0       	rjmp	.+50     	; 0x14ee <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14bc:	19 82       	std	Y+1, r1	; 0x01
    14be:	17 c0       	rjmp	.+46     	; 0x14ee <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    14c0:	e0 e3       	ldi	r30, 0x30	; 48
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	88 2f       	mov	r24, r24
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	a9 01       	movw	r20, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <GPIO_readPin+0x10e>
    14d4:	55 95       	asr	r21
    14d6:	47 95       	ror	r20
    14d8:	8a 95       	dec	r24
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <GPIO_readPin+0x10a>
    14dc:	ca 01       	movw	r24, r20
    14de:	81 70       	andi	r24, 0x01	; 1
    14e0:	90 70       	andi	r25, 0x00	; 0
    14e2:	88 23       	and	r24, r24
    14e4:	19 f0       	breq	.+6      	; 0x14ec <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14ec:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	00 d0       	rcall	.+0      	; 0x1506 <GPIO_setupPortDirection+0x6>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <GPIO_setupPortDirection+0x8>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	84 30       	cpi	r24, 0x04	; 4
    1514:	90 f5       	brcc	.+100    	; 0x157a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	3c 83       	std	Y+4, r19	; 0x04
    151e:	2b 83       	std	Y+3, r18	; 0x03
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	9c 81       	ldd	r25, Y+4	; 0x04
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	91 05       	cpc	r25, r1
    1528:	d1 f0       	breq	.+52     	; 0x155e <GPIO_setupPortDirection+0x5e>
    152a:	2b 81       	ldd	r18, Y+3	; 0x03
    152c:	3c 81       	ldd	r19, Y+4	; 0x04
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	2c f4       	brge	.+10     	; 0x153e <GPIO_setupPortDirection+0x3e>
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	9c 81       	ldd	r25, Y+4	; 0x04
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	61 f0       	breq	.+24     	; 0x1554 <GPIO_setupPortDirection+0x54>
    153c:	1e c0       	rjmp	.+60     	; 0x157a <GPIO_setupPortDirection+0x7a>
    153e:	2b 81       	ldd	r18, Y+3	; 0x03
    1540:	3c 81       	ldd	r19, Y+4	; 0x04
    1542:	22 30       	cpi	r18, 0x02	; 2
    1544:	31 05       	cpc	r19, r1
    1546:	81 f0       	breq	.+32     	; 0x1568 <GPIO_setupPortDirection+0x68>
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	83 30       	cpi	r24, 0x03	; 3
    154e:	91 05       	cpc	r25, r1
    1550:	81 f0       	breq	.+32     	; 0x1572 <GPIO_setupPortDirection+0x72>
    1552:	13 c0       	rjmp	.+38     	; 0x157a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1554:	ea e3       	ldi	r30, 0x3A	; 58
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	80 83       	st	Z, r24
    155c:	0e c0       	rjmp	.+28     	; 0x157a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    155e:	e7 e3       	ldi	r30, 0x37	; 55
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	80 83       	st	Z, r24
    1566:	09 c0       	rjmp	.+18     	; 0x157a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1568:	e4 e3       	ldi	r30, 0x34	; 52
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	80 83       	st	Z, r24
    1570:	04 c0       	rjmp	.+8      	; 0x157a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1572:	e1 e3       	ldi	r30, 0x31	; 49
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	80 83       	st	Z, r24
			break;
		}
	}
}
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	00 d0       	rcall	.+0      	; 0x158e <GPIO_writePort+0x6>
    158e:	00 d0       	rcall	.+0      	; 0x1590 <GPIO_writePort+0x8>
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	84 30       	cpi	r24, 0x04	; 4
    159c:	90 f5       	brcc	.+100    	; 0x1602 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	3c 83       	std	Y+4, r19	; 0x04
    15a6:	2b 83       	std	Y+3, r18	; 0x03
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	9c 81       	ldd	r25, Y+4	; 0x04
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	91 05       	cpc	r25, r1
    15b0:	d1 f0       	breq	.+52     	; 0x15e6 <GPIO_writePort+0x5e>
    15b2:	2b 81       	ldd	r18, Y+3	; 0x03
    15b4:	3c 81       	ldd	r19, Y+4	; 0x04
    15b6:	22 30       	cpi	r18, 0x02	; 2
    15b8:	31 05       	cpc	r19, r1
    15ba:	2c f4       	brge	.+10     	; 0x15c6 <GPIO_writePort+0x3e>
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	9c 81       	ldd	r25, Y+4	; 0x04
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	61 f0       	breq	.+24     	; 0x15dc <GPIO_writePort+0x54>
    15c4:	1e c0       	rjmp	.+60     	; 0x1602 <GPIO_writePort+0x7a>
    15c6:	2b 81       	ldd	r18, Y+3	; 0x03
    15c8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ca:	22 30       	cpi	r18, 0x02	; 2
    15cc:	31 05       	cpc	r19, r1
    15ce:	81 f0       	breq	.+32     	; 0x15f0 <GPIO_writePort+0x68>
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	83 30       	cpi	r24, 0x03	; 3
    15d6:	91 05       	cpc	r25, r1
    15d8:	81 f0       	breq	.+32     	; 0x15fa <GPIO_writePort+0x72>
    15da:	13 c0       	rjmp	.+38     	; 0x1602 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15dc:	eb e3       	ldi	r30, 0x3B	; 59
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	80 83       	st	Z, r24
    15e4:	0e c0       	rjmp	.+28     	; 0x1602 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15e6:	e8 e3       	ldi	r30, 0x38	; 56
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	80 83       	st	Z, r24
    15ee:	09 c0       	rjmp	.+18     	; 0x1602 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15f0:	e5 e3       	ldi	r30, 0x35	; 53
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	80 83       	st	Z, r24
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15fa:	e2 e3       	ldi	r30, 0x32	; 50
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	80 83       	st	Z, r24
			break;
		}
	}
}
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <GPIO_readPort+0x6>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <GPIO_readPort+0x8>
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    161e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	84 30       	cpi	r24, 0x04	; 4
    1624:	90 f5       	brcc	.+100    	; 0x168a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	3c 83       	std	Y+4, r19	; 0x04
    162e:	2b 83       	std	Y+3, r18	; 0x03
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	91 05       	cpc	r25, r1
    1638:	d1 f0       	breq	.+52     	; 0x166e <GPIO_readPort+0x5e>
    163a:	2b 81       	ldd	r18, Y+3	; 0x03
    163c:	3c 81       	ldd	r19, Y+4	; 0x04
    163e:	22 30       	cpi	r18, 0x02	; 2
    1640:	31 05       	cpc	r19, r1
    1642:	2c f4       	brge	.+10     	; 0x164e <GPIO_readPort+0x3e>
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	9c 81       	ldd	r25, Y+4	; 0x04
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	61 f0       	breq	.+24     	; 0x1664 <GPIO_readPort+0x54>
    164c:	1e c0       	rjmp	.+60     	; 0x168a <GPIO_readPort+0x7a>
    164e:	2b 81       	ldd	r18, Y+3	; 0x03
    1650:	3c 81       	ldd	r19, Y+4	; 0x04
    1652:	22 30       	cpi	r18, 0x02	; 2
    1654:	31 05       	cpc	r19, r1
    1656:	81 f0       	breq	.+32     	; 0x1678 <GPIO_readPort+0x68>
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	9c 81       	ldd	r25, Y+4	; 0x04
    165c:	83 30       	cpi	r24, 0x03	; 3
    165e:	91 05       	cpc	r25, r1
    1660:	81 f0       	breq	.+32     	; 0x1682 <GPIO_readPort+0x72>
    1662:	13 c0       	rjmp	.+38     	; 0x168a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1664:	e9 e3       	ldi	r30, 0x39	; 57
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	0e c0       	rjmp	.+28     	; 0x168a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    166e:	e6 e3       	ldi	r30, 0x36	; 54
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	09 c0       	rjmp	.+18     	; 0x168a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1678:	e3 e3       	ldi	r30, 0x33	; 51
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	04 c0       	rjmp	.+8      	; 0x168a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1682:	e0 e3       	ldi	r30, 0x30	; 48
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    168a:	89 81       	ldd	r24, Y+1	; 0x01
}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	2e 97       	sbiw	r28, 0x0e	; 14
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS , E,RW pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	41 e0       	ldi	r20, 0x01	; 1
    16b4:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	61 e0       	ldi	r22, 0x01	; 1
    16bc:	41 e0       	ldi	r20, 0x01	; 1
    16be:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	62 e0       	ldi	r22, 0x02	; 2
    16c6:	41 e0       	ldi	r20, 0x01	; 1
    16c8:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_setupPinDirection>
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	a0 ea       	ldi	r26, 0xA0	; 160
    16d2:	b1 e4       	ldi	r27, 0x41	; 65
    16d4:	8b 87       	std	Y+11, r24	; 0x0b
    16d6:	9c 87       	std	Y+12, r25	; 0x0c
    16d8:	ad 87       	std	Y+13, r26	; 0x0d
    16da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16de:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	4a ef       	ldi	r20, 0xFA	; 250
    16ea:	54 e4       	ldi	r21, 0x44	; 68
    16ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	8f 83       	std	Y+7, r24	; 0x07
    16f6:	98 87       	std	Y+8, r25	; 0x08
    16f8:	a9 87       	std	Y+9, r26	; 0x09
    16fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16fc:	6f 81       	ldd	r22, Y+7	; 0x07
    16fe:	78 85       	ldd	r23, Y+8	; 0x08
    1700:	89 85       	ldd	r24, Y+9	; 0x09
    1702:	9a 85       	ldd	r25, Y+10	; 0x0a
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e8       	ldi	r20, 0x80	; 128
    170a:	5f e3       	ldi	r21, 0x3F	; 63
    170c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1710:	88 23       	and	r24, r24
    1712:	2c f4       	brge	.+10     	; 0x171e <LCD_init+0x84>
		__ticks = 1;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9e 83       	std	Y+6, r25	; 0x06
    171a:	8d 83       	std	Y+5, r24	; 0x05
    171c:	3f c0       	rjmp	.+126    	; 0x179c <LCD_init+0x102>
	else if (__tmp > 65535)
    171e:	6f 81       	ldd	r22, Y+7	; 0x07
    1720:	78 85       	ldd	r23, Y+8	; 0x08
    1722:	89 85       	ldd	r24, Y+9	; 0x09
    1724:	9a 85       	ldd	r25, Y+10	; 0x0a
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	3f ef       	ldi	r19, 0xFF	; 255
    172a:	4f e7       	ldi	r20, 0x7F	; 127
    172c:	57 e4       	ldi	r21, 0x47	; 71
    172e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1732:	18 16       	cp	r1, r24
    1734:	4c f5       	brge	.+82     	; 0x1788 <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1736:	6b 85       	ldd	r22, Y+11	; 0x0b
    1738:	7c 85       	ldd	r23, Y+12	; 0x0c
    173a:	8d 85       	ldd	r24, Y+13	; 0x0d
    173c:	9e 85       	ldd	r25, Y+14	; 0x0e
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e2       	ldi	r20, 0x20	; 32
    1744:	51 e4       	ldi	r21, 0x41	; 65
    1746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9e 83       	std	Y+6, r25	; 0x06
    175c:	8d 83       	std	Y+5, r24	; 0x05
    175e:	0f c0       	rjmp	.+30     	; 0x177e <LCD_init+0xe4>
    1760:	88 ec       	ldi	r24, 0xC8	; 200
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9c 83       	std	Y+4, r25	; 0x04
    1766:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	9c 81       	ldd	r25, Y+4	; 0x04
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <LCD_init+0xd2>
    1770:	9c 83       	std	Y+4, r25	; 0x04
    1772:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1774:	8d 81       	ldd	r24, Y+5	; 0x05
    1776:	9e 81       	ldd	r25, Y+6	; 0x06
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	9e 83       	std	Y+6, r25	; 0x06
    177c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	9e 81       	ldd	r25, Y+6	; 0x06
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	69 f7       	brne	.-38     	; 0x1760 <LCD_init+0xc6>
    1786:	14 c0       	rjmp	.+40     	; 0x17b0 <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1788:	6f 81       	ldd	r22, Y+7	; 0x07
    178a:	78 85       	ldd	r23, Y+8	; 0x08
    178c:	89 85       	ldd	r24, Y+9	; 0x09
    178e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	9e 83       	std	Y+6, r25	; 0x06
    179a:	8d 83       	std	Y+5, r24	; 0x05
    179c:	8d 81       	ldd	r24, Y+5	; 0x05
    179e:	9e 81       	ldd	r25, Y+6	; 0x06
    17a0:	9a 83       	std	Y+2, r25	; 0x02
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	9a 81       	ldd	r25, Y+2	; 0x02
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <LCD_init+0x10e>
    17ac:	9a 83       	std	Y+2, r25	; 0x02
    17ae:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	6f ef       	ldi	r22, 0xFF	; 255
    17b4:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    17b8:	88 e3       	ldi	r24, 0x38	; 56
    17ba:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    17be:	8c e0       	ldi	r24, 0x0C	; 12
    17c0:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LCD_sendCommand>
}
    17ca:	2e 96       	adiw	r28, 0x0e	; 14
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	e9 97       	sbiw	r28, 0x39	; 57
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <GPIO_writePin>
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	a0 e8       	ldi	r26, 0x80	; 128
    1802:	bf e3       	ldi	r27, 0x3F	; 63
    1804:	8d ab       	std	Y+53, r24	; 0x35
    1806:	9e ab       	std	Y+54, r25	; 0x36
    1808:	af ab       	std	Y+55, r26	; 0x37
    180a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180c:	6d a9       	ldd	r22, Y+53	; 0x35
    180e:	7e a9       	ldd	r23, Y+54	; 0x36
    1810:	8f a9       	ldd	r24, Y+55	; 0x37
    1812:	98 ad       	ldd	r25, Y+56	; 0x38
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	4a ef       	ldi	r20, 0xFA	; 250
    181a:	54 e4       	ldi	r21, 0x44	; 68
    181c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	89 ab       	std	Y+49, r24	; 0x31
    1826:	9a ab       	std	Y+50, r25	; 0x32
    1828:	ab ab       	std	Y+51, r26	; 0x33
    182a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    182c:	69 a9       	ldd	r22, Y+49	; 0x31
    182e:	7a a9       	ldd	r23, Y+50	; 0x32
    1830:	8b a9       	ldd	r24, Y+51	; 0x33
    1832:	9c a9       	ldd	r25, Y+52	; 0x34
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e8       	ldi	r20, 0x80	; 128
    183a:	5f e3       	ldi	r21, 0x3F	; 63
    183c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1840:	88 23       	and	r24, r24
    1842:	2c f4       	brge	.+10     	; 0x184e <LCD_sendCommand+0x72>
		__ticks = 1;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	98 ab       	std	Y+48, r25	; 0x30
    184a:	8f a7       	std	Y+47, r24	; 0x2f
    184c:	3f c0       	rjmp	.+126    	; 0x18cc <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    184e:	69 a9       	ldd	r22, Y+49	; 0x31
    1850:	7a a9       	ldd	r23, Y+50	; 0x32
    1852:	8b a9       	ldd	r24, Y+51	; 0x33
    1854:	9c a9       	ldd	r25, Y+52	; 0x34
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	3f ef       	ldi	r19, 0xFF	; 255
    185a:	4f e7       	ldi	r20, 0x7F	; 127
    185c:	57 e4       	ldi	r21, 0x47	; 71
    185e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1862:	18 16       	cp	r1, r24
    1864:	4c f5       	brge	.+82     	; 0x18b8 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1866:	6d a9       	ldd	r22, Y+53	; 0x35
    1868:	7e a9       	ldd	r23, Y+54	; 0x36
    186a:	8f a9       	ldd	r24, Y+55	; 0x37
    186c:	98 ad       	ldd	r25, Y+56	; 0x38
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e2       	ldi	r20, 0x20	; 32
    1874:	51 e4       	ldi	r21, 0x41	; 65
    1876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	98 ab       	std	Y+48, r25	; 0x30
    188c:	8f a7       	std	Y+47, r24	; 0x2f
    188e:	0f c0       	rjmp	.+30     	; 0x18ae <LCD_sendCommand+0xd2>
    1890:	88 ec       	ldi	r24, 0xC8	; 200
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9e a7       	std	Y+46, r25	; 0x2e
    1896:	8d a7       	std	Y+45, r24	; 0x2d
    1898:	8d a5       	ldd	r24, Y+45	; 0x2d
    189a:	9e a5       	ldd	r25, Y+46	; 0x2e
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <LCD_sendCommand+0xc0>
    18a0:	9e a7       	std	Y+46, r25	; 0x2e
    18a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a6:	98 a9       	ldd	r25, Y+48	; 0x30
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	98 ab       	std	Y+48, r25	; 0x30
    18ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b0:	98 a9       	ldd	r25, Y+48	; 0x30
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	69 f7       	brne	.-38     	; 0x1890 <LCD_sendCommand+0xb4>
    18b6:	14 c0       	rjmp	.+40     	; 0x18e0 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b8:	69 a9       	ldd	r22, Y+49	; 0x31
    18ba:	7a a9       	ldd	r23, Y+50	; 0x32
    18bc:	8b a9       	ldd	r24, Y+51	; 0x33
    18be:	9c a9       	ldd	r25, Y+52	; 0x34
    18c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	98 ab       	std	Y+48, r25	; 0x30
    18ca:	8f a7       	std	Y+47, r24	; 0x2f
    18cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ce:	98 a9       	ldd	r25, Y+48	; 0x30
    18d0:	9c a7       	std	Y+44, r25	; 0x2c
    18d2:	8b a7       	std	Y+43, r24	; 0x2b
    18d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    18d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	f1 f7       	brne	.-4      	; 0x18d8 <LCD_sendCommand+0xfc>
    18dc:	9c a7       	std	Y+44, r25	; 0x2c
    18de:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	62 e0       	ldi	r22, 0x02	; 2
    18e4:	41 e0       	ldi	r20, 0x01	; 1
    18e6:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <GPIO_writePin>
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a0 e8       	ldi	r26, 0x80	; 128
    18f0:	bf e3       	ldi	r27, 0x3F	; 63
    18f2:	8f a3       	std	Y+39, r24	; 0x27
    18f4:	98 a7       	std	Y+40, r25	; 0x28
    18f6:	a9 a7       	std	Y+41, r26	; 0x29
    18f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fa:	6f a1       	ldd	r22, Y+39	; 0x27
    18fc:	78 a5       	ldd	r23, Y+40	; 0x28
    18fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1900:	9a a5       	ldd	r25, Y+42	; 0x2a
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4a ef       	ldi	r20, 0xFA	; 250
    1908:	54 e4       	ldi	r21, 0x44	; 68
    190a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	8b a3       	std	Y+35, r24	; 0x23
    1914:	9c a3       	std	Y+36, r25	; 0x24
    1916:	ad a3       	std	Y+37, r26	; 0x25
    1918:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    191a:	6b a1       	ldd	r22, Y+35	; 0x23
    191c:	7c a1       	ldd	r23, Y+36	; 0x24
    191e:	8d a1       	ldd	r24, Y+37	; 0x25
    1920:	9e a1       	ldd	r25, Y+38	; 0x26
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e8       	ldi	r20, 0x80	; 128
    1928:	5f e3       	ldi	r21, 0x3F	; 63
    192a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    192e:	88 23       	and	r24, r24
    1930:	2c f4       	brge	.+10     	; 0x193c <LCD_sendCommand+0x160>
		__ticks = 1;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9a a3       	std	Y+34, r25	; 0x22
    1938:	89 a3       	std	Y+33, r24	; 0x21
    193a:	3f c0       	rjmp	.+126    	; 0x19ba <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    193c:	6b a1       	ldd	r22, Y+35	; 0x23
    193e:	7c a1       	ldd	r23, Y+36	; 0x24
    1940:	8d a1       	ldd	r24, Y+37	; 0x25
    1942:	9e a1       	ldd	r25, Y+38	; 0x26
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	3f ef       	ldi	r19, 0xFF	; 255
    1948:	4f e7       	ldi	r20, 0x7F	; 127
    194a:	57 e4       	ldi	r21, 0x47	; 71
    194c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1950:	18 16       	cp	r1, r24
    1952:	4c f5       	brge	.+82     	; 0x19a6 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1954:	6f a1       	ldd	r22, Y+39	; 0x27
    1956:	78 a5       	ldd	r23, Y+40	; 0x28
    1958:	89 a5       	ldd	r24, Y+41	; 0x29
    195a:	9a a5       	ldd	r25, Y+42	; 0x2a
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e2       	ldi	r20, 0x20	; 32
    1962:	51 e4       	ldi	r21, 0x41	; 65
    1964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	9a a3       	std	Y+34, r25	; 0x22
    197a:	89 a3       	std	Y+33, r24	; 0x21
    197c:	0f c0       	rjmp	.+30     	; 0x199c <LCD_sendCommand+0x1c0>
    197e:	88 ec       	ldi	r24, 0xC8	; 200
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	98 a3       	std	Y+32, r25	; 0x20
    1984:	8f 8f       	std	Y+31, r24	; 0x1f
    1986:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1988:	98 a1       	ldd	r25, Y+32	; 0x20
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <LCD_sendCommand+0x1ae>
    198e:	98 a3       	std	Y+32, r25	; 0x20
    1990:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1992:	89 a1       	ldd	r24, Y+33	; 0x21
    1994:	9a a1       	ldd	r25, Y+34	; 0x22
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	9a a3       	std	Y+34, r25	; 0x22
    199a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199c:	89 a1       	ldd	r24, Y+33	; 0x21
    199e:	9a a1       	ldd	r25, Y+34	; 0x22
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	69 f7       	brne	.-38     	; 0x197e <LCD_sendCommand+0x1a2>
    19a4:	14 c0       	rjmp	.+40     	; 0x19ce <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a6:	6b a1       	ldd	r22, Y+35	; 0x23
    19a8:	7c a1       	ldd	r23, Y+36	; 0x24
    19aa:	8d a1       	ldd	r24, Y+37	; 0x25
    19ac:	9e a1       	ldd	r25, Y+38	; 0x26
    19ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	9a a3       	std	Y+34, r25	; 0x22
    19b8:	89 a3       	std	Y+33, r24	; 0x21
    19ba:	89 a1       	ldd	r24, Y+33	; 0x21
    19bc:	9a a1       	ldd	r25, Y+34	; 0x22
    19be:	9e 8f       	std	Y+30, r25	; 0x1e
    19c0:	8d 8f       	std	Y+29, r24	; 0x1d
    19c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <LCD_sendCommand+0x1ea>
    19ca:	9e 8f       	std	Y+30, r25	; 0x1e
    19cc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	69 ad       	ldd	r22, Y+57	; 0x39
    19d2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePort>
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a0 e8       	ldi	r26, 0x80	; 128
    19dc:	bf e3       	ldi	r27, 0x3F	; 63
    19de:	89 8f       	std	Y+25, r24	; 0x19
    19e0:	9a 8f       	std	Y+26, r25	; 0x1a
    19e2:	ab 8f       	std	Y+27, r26	; 0x1b
    19e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e6:	69 8d       	ldd	r22, Y+25	; 0x19
    19e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	4a ef       	ldi	r20, 0xFA	; 250
    19f4:	54 e4       	ldi	r21, 0x44	; 68
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	8d 8b       	std	Y+21, r24	; 0x15
    1a00:	9e 8b       	std	Y+22, r25	; 0x16
    1a02:	af 8b       	std	Y+23, r26	; 0x17
    1a04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a06:	6d 89       	ldd	r22, Y+21	; 0x15
    1a08:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e8       	ldi	r20, 0x80	; 128
    1a14:	5f e3       	ldi	r21, 0x3F	; 63
    1a16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a1a:	88 23       	and	r24, r24
    1a1c:	2c f4       	brge	.+10     	; 0x1a28 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	9c 8b       	std	Y+20, r25	; 0x14
    1a24:	8b 8b       	std	Y+19, r24	; 0x13
    1a26:	3f c0       	rjmp	.+126    	; 0x1aa6 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1a28:	6d 89       	ldd	r22, Y+21	; 0x15
    1a2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	3f ef       	ldi	r19, 0xFF	; 255
    1a34:	4f e7       	ldi	r20, 0x7F	; 127
    1a36:	57 e4       	ldi	r21, 0x47	; 71
    1a38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a3c:	18 16       	cp	r1, r24
    1a3e:	4c f5       	brge	.+82     	; 0x1a92 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a40:	69 8d       	ldd	r22, Y+25	; 0x19
    1a42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e2       	ldi	r20, 0x20	; 32
    1a4e:	51 e4       	ldi	r21, 0x41	; 65
    1a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	bc 01       	movw	r22, r24
    1a5a:	cd 01       	movw	r24, r26
    1a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	9c 8b       	std	Y+20, r25	; 0x14
    1a66:	8b 8b       	std	Y+19, r24	; 0x13
    1a68:	0f c0       	rjmp	.+30     	; 0x1a88 <LCD_sendCommand+0x2ac>
    1a6a:	88 ec       	ldi	r24, 0xC8	; 200
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	9a 8b       	std	Y+18, r25	; 0x12
    1a70:	89 8b       	std	Y+17, r24	; 0x11
    1a72:	89 89       	ldd	r24, Y+17	; 0x11
    1a74:	9a 89       	ldd	r25, Y+18	; 0x12
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <LCD_sendCommand+0x29a>
    1a7a:	9a 8b       	std	Y+18, r25	; 0x12
    1a7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a80:	9c 89       	ldd	r25, Y+20	; 0x14
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	9c 8b       	std	Y+20, r25	; 0x14
    1a86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a88:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	69 f7       	brne	.-38     	; 0x1a6a <LCD_sendCommand+0x28e>
    1a90:	14 c0       	rjmp	.+40     	; 0x1aba <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a92:	6d 89       	ldd	r22, Y+21	; 0x15
    1a94:	7e 89       	ldd	r23, Y+22	; 0x16
    1a96:	8f 89       	ldd	r24, Y+23	; 0x17
    1a98:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	9c 8b       	std	Y+20, r25	; 0x14
    1aa4:	8b 8b       	std	Y+19, r24	; 0x13
    1aa6:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aaa:	98 8b       	std	Y+16, r25	; 0x10
    1aac:	8f 87       	std	Y+15, r24	; 0x0f
    1aae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab0:	98 89       	ldd	r25, Y+16	; 0x10
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <LCD_sendCommand+0x2d6>
    1ab6:	98 8b       	std	Y+16, r25	; 0x10
    1ab8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	62 e0       	ldi	r22, 0x02	; 2
    1abe:	40 e0       	ldi	r20, 0x00	; 0
    1ac0:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <GPIO_writePin>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a0 e8       	ldi	r26, 0x80	; 128
    1aca:	bf e3       	ldi	r27, 0x3F	; 63
    1acc:	8b 87       	std	Y+11, r24	; 0x0b
    1ace:	9c 87       	std	Y+12, r25	; 0x0c
    1ad0:	ad 87       	std	Y+13, r26	; 0x0d
    1ad2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	4a ef       	ldi	r20, 0xFA	; 250
    1ae2:	54 e4       	ldi	r21, 0x44	; 68
    1ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	8f 83       	std	Y+7, r24	; 0x07
    1aee:	98 87       	std	Y+8, r25	; 0x08
    1af0:	a9 87       	std	Y+9, r26	; 0x09
    1af2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af4:	6f 81       	ldd	r22, Y+7	; 0x07
    1af6:	78 85       	ldd	r23, Y+8	; 0x08
    1af8:	89 85       	ldd	r24, Y+9	; 0x09
    1afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e8       	ldi	r20, 0x80	; 128
    1b02:	5f e3       	ldi	r21, 0x3F	; 63
    1b04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b08:	88 23       	and	r24, r24
    1b0a:	2c f4       	brge	.+10     	; 0x1b16 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9e 83       	std	Y+6, r25	; 0x06
    1b12:	8d 83       	std	Y+5, r24	; 0x05
    1b14:	3f c0       	rjmp	.+126    	; 0x1b94 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1b16:	6f 81       	ldd	r22, Y+7	; 0x07
    1b18:	78 85       	ldd	r23, Y+8	; 0x08
    1b1a:	89 85       	ldd	r24, Y+9	; 0x09
    1b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	3f ef       	ldi	r19, 0xFF	; 255
    1b22:	4f e7       	ldi	r20, 0x7F	; 127
    1b24:	57 e4       	ldi	r21, 0x47	; 71
    1b26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b2a:	18 16       	cp	r1, r24
    1b2c:	4c f5       	brge	.+82     	; 0x1b80 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e2       	ldi	r20, 0x20	; 32
    1b3c:	51 e4       	ldi	r21, 0x41	; 65
    1b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	bc 01       	movw	r22, r24
    1b48:	cd 01       	movw	r24, r26
    1b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	0f c0       	rjmp	.+30     	; 0x1b76 <LCD_sendCommand+0x39a>
    1b58:	88 ec       	ldi	r24, 0xC8	; 200
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9c 83       	std	Y+4, r25	; 0x04
    1b5e:	8b 83       	std	Y+3, r24	; 0x03
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <LCD_sendCommand+0x388>
    1b68:	9c 83       	std	Y+4, r25	; 0x04
    1b6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	69 f7       	brne	.-38     	; 0x1b58 <LCD_sendCommand+0x37c>
    1b7e:	14 c0       	rjmp	.+40     	; 0x1ba8 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b80:	6f 81       	ldd	r22, Y+7	; 0x07
    1b82:	78 85       	ldd	r23, Y+8	; 0x08
    1b84:	89 85       	ldd	r24, Y+9	; 0x09
    1b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9e 83       	std	Y+6, r25	; 0x06
    1b92:	8d 83       	std	Y+5, r24	; 0x05
    1b94:	8d 81       	ldd	r24, Y+5	; 0x05
    1b96:	9e 81       	ldd	r25, Y+6	; 0x06
    1b98:	9a 83       	std	Y+2, r25	; 0x02
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <LCD_sendCommand+0x3c4>
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1ba8:	e9 96       	adiw	r28, 0x39	; 57
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	e9 97       	sbiw	r28, 0x39	; 57
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	41 e0       	ldi	r20, 0x01	; 1
    1bd6:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <GPIO_writePin>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	a0 e8       	ldi	r26, 0x80	; 128
    1be0:	bf e3       	ldi	r27, 0x3F	; 63
    1be2:	8d ab       	std	Y+53, r24	; 0x35
    1be4:	9e ab       	std	Y+54, r25	; 0x36
    1be6:	af ab       	std	Y+55, r26	; 0x37
    1be8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bea:	6d a9       	ldd	r22, Y+53	; 0x35
    1bec:	7e a9       	ldd	r23, Y+54	; 0x36
    1bee:	8f a9       	ldd	r24, Y+55	; 0x37
    1bf0:	98 ad       	ldd	r25, Y+56	; 0x38
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4a ef       	ldi	r20, 0xFA	; 250
    1bf8:	54 e4       	ldi	r21, 0x44	; 68
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	89 ab       	std	Y+49, r24	; 0x31
    1c04:	9a ab       	std	Y+50, r25	; 0x32
    1c06:	ab ab       	std	Y+51, r26	; 0x33
    1c08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c10:	9c a9       	ldd	r25, Y+52	; 0x34
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e8       	ldi	r20, 0x80	; 128
    1c18:	5f e3       	ldi	r21, 0x3F	; 63
    1c1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c1e:	88 23       	and	r24, r24
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <LCD_displayCharacter+0x72>
		__ticks = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	98 ab       	std	Y+48, r25	; 0x30
    1c28:	8f a7       	std	Y+47, r24	; 0x2f
    1c2a:	3f c0       	rjmp	.+126    	; 0x1caa <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1c2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c30:	8b a9       	ldd	r24, Y+51	; 0x33
    1c32:	9c a9       	ldd	r25, Y+52	; 0x34
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	3f ef       	ldi	r19, 0xFF	; 255
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	57 e4       	ldi	r21, 0x47	; 71
    1c3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	4c f5       	brge	.+82     	; 0x1c96 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	6d a9       	ldd	r22, Y+53	; 0x35
    1c46:	7e a9       	ldd	r23, Y+54	; 0x36
    1c48:	8f a9       	ldd	r24, Y+55	; 0x37
    1c4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e2       	ldi	r20, 0x20	; 32
    1c52:	51 e4       	ldi	r21, 0x41	; 65
    1c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	98 ab       	std	Y+48, r25	; 0x30
    1c6a:	8f a7       	std	Y+47, r24	; 0x2f
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <LCD_displayCharacter+0xd2>
    1c6e:	88 ec       	ldi	r24, 0xC8	; 200
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9e a7       	std	Y+46, r25	; 0x2e
    1c74:	8d a7       	std	Y+45, r24	; 0x2d
    1c76:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c78:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_displayCharacter+0xc0>
    1c7e:	9e a7       	std	Y+46, r25	; 0x2e
    1c80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c84:	98 a9       	ldd	r25, Y+48	; 0x30
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	98 ab       	std	Y+48, r25	; 0x30
    1c8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	69 f7       	brne	.-38     	; 0x1c6e <LCD_displayCharacter+0xb4>
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	69 a9       	ldd	r22, Y+49	; 0x31
    1c98:	7a a9       	ldd	r23, Y+50	; 0x32
    1c9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	98 ab       	std	Y+48, r25	; 0x30
    1ca8:	8f a7       	std	Y+47, r24	; 0x2f
    1caa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cac:	98 a9       	ldd	r25, Y+48	; 0x30
    1cae:	9c a7       	std	Y+44, r25	; 0x2c
    1cb0:	8b a7       	std	Y+43, r24	; 0x2b
    1cb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LCD_displayCharacter+0xfc>
    1cba:	9c a7       	std	Y+44, r25	; 0x2c
    1cbc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	62 e0       	ldi	r22, 0x02	; 2
    1cc2:	41 e0       	ldi	r20, 0x01	; 1
    1cc4:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <GPIO_writePin>
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	a0 e8       	ldi	r26, 0x80	; 128
    1cce:	bf e3       	ldi	r27, 0x3F	; 63
    1cd0:	8f a3       	std	Y+39, r24	; 0x27
    1cd2:	98 a7       	std	Y+40, r25	; 0x28
    1cd4:	a9 a7       	std	Y+41, r26	; 0x29
    1cd6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd8:	6f a1       	ldd	r22, Y+39	; 0x27
    1cda:	78 a5       	ldd	r23, Y+40	; 0x28
    1cdc:	89 a5       	ldd	r24, Y+41	; 0x29
    1cde:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	4a ef       	ldi	r20, 0xFA	; 250
    1ce6:	54 e4       	ldi	r21, 0x44	; 68
    1ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	8b a3       	std	Y+35, r24	; 0x23
    1cf2:	9c a3       	std	Y+36, r25	; 0x24
    1cf4:	ad a3       	std	Y+37, r26	; 0x25
    1cf6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cf8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cfa:	7c a1       	ldd	r23, Y+36	; 0x24
    1cfc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cfe:	9e a1       	ldd	r25, Y+38	; 0x26
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e8       	ldi	r20, 0x80	; 128
    1d06:	5f e3       	ldi	r21, 0x3F	; 63
    1d08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d0c:	88 23       	and	r24, r24
    1d0e:	2c f4       	brge	.+10     	; 0x1d1a <LCD_displayCharacter+0x160>
		__ticks = 1;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9a a3       	std	Y+34, r25	; 0x22
    1d16:	89 a3       	std	Y+33, r24	; 0x21
    1d18:	3f c0       	rjmp	.+126    	; 0x1d98 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1d1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d20:	9e a1       	ldd	r25, Y+38	; 0x26
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	3f ef       	ldi	r19, 0xFF	; 255
    1d26:	4f e7       	ldi	r20, 0x7F	; 127
    1d28:	57 e4       	ldi	r21, 0x47	; 71
    1d2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d2e:	18 16       	cp	r1, r24
    1d30:	4c f5       	brge	.+82     	; 0x1d84 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d32:	6f a1       	ldd	r22, Y+39	; 0x27
    1d34:	78 a5       	ldd	r23, Y+40	; 0x28
    1d36:	89 a5       	ldd	r24, Y+41	; 0x29
    1d38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e2       	ldi	r20, 0x20	; 32
    1d40:	51 e4       	ldi	r21, 0x41	; 65
    1d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	9a a3       	std	Y+34, r25	; 0x22
    1d58:	89 a3       	std	Y+33, r24	; 0x21
    1d5a:	0f c0       	rjmp	.+30     	; 0x1d7a <LCD_displayCharacter+0x1c0>
    1d5c:	88 ec       	ldi	r24, 0xC8	; 200
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	98 a3       	std	Y+32, r25	; 0x20
    1d62:	8f 8f       	std	Y+31, r24	; 0x1f
    1d64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d66:	98 a1       	ldd	r25, Y+32	; 0x20
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	f1 f7       	brne	.-4      	; 0x1d68 <LCD_displayCharacter+0x1ae>
    1d6c:	98 a3       	std	Y+32, r25	; 0x20
    1d6e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d70:	89 a1       	ldd	r24, Y+33	; 0x21
    1d72:	9a a1       	ldd	r25, Y+34	; 0x22
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	9a a3       	std	Y+34, r25	; 0x22
    1d78:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	69 f7       	brne	.-38     	; 0x1d5c <LCD_displayCharacter+0x1a2>
    1d82:	14 c0       	rjmp	.+40     	; 0x1dac <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d84:	6b a1       	ldd	r22, Y+35	; 0x23
    1d86:	7c a1       	ldd	r23, Y+36	; 0x24
    1d88:	8d a1       	ldd	r24, Y+37	; 0x25
    1d8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	9a a3       	std	Y+34, r25	; 0x22
    1d96:	89 a3       	std	Y+33, r24	; 0x21
    1d98:	89 a1       	ldd	r24, Y+33	; 0x21
    1d9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d9e:	8d 8f       	std	Y+29, r24	; 0x1d
    1da0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1da2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <LCD_displayCharacter+0x1ea>
    1da8:	9e 8f       	std	Y+30, r25	; 0x1e
    1daa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	69 ad       	ldd	r22, Y+57	; 0x39
    1db0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePort>
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a0 e8       	ldi	r26, 0x80	; 128
    1dba:	bf e3       	ldi	r27, 0x3F	; 63
    1dbc:	89 8f       	std	Y+25, r24	; 0x19
    1dbe:	9a 8f       	std	Y+26, r25	; 0x1a
    1dc0:	ab 8f       	std	Y+27, r26	; 0x1b
    1dc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc4:	69 8d       	ldd	r22, Y+25	; 0x19
    1dc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	4a ef       	ldi	r20, 0xFA	; 250
    1dd2:	54 e4       	ldi	r21, 0x44	; 68
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	8d 8b       	std	Y+21, r24	; 0x15
    1dde:	9e 8b       	std	Y+22, r25	; 0x16
    1de0:	af 8b       	std	Y+23, r26	; 0x17
    1de2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1de4:	6d 89       	ldd	r22, Y+21	; 0x15
    1de6:	7e 89       	ldd	r23, Y+22	; 0x16
    1de8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dea:	98 8d       	ldd	r25, Y+24	; 0x18
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e8       	ldi	r20, 0x80	; 128
    1df2:	5f e3       	ldi	r21, 0x3F	; 63
    1df4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df8:	88 23       	and	r24, r24
    1dfa:	2c f4       	brge	.+10     	; 0x1e06 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9c 8b       	std	Y+20, r25	; 0x14
    1e02:	8b 8b       	std	Y+19, r24	; 0x13
    1e04:	3f c0       	rjmp	.+126    	; 0x1e84 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1e06:	6d 89       	ldd	r22, Y+21	; 0x15
    1e08:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	3f ef       	ldi	r19, 0xFF	; 255
    1e12:	4f e7       	ldi	r20, 0x7F	; 127
    1e14:	57 e4       	ldi	r21, 0x47	; 71
    1e16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e1a:	18 16       	cp	r1, r24
    1e1c:	4c f5       	brge	.+82     	; 0x1e70 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e2       	ldi	r20, 0x20	; 32
    1e2c:	51 e4       	ldi	r21, 0x41	; 65
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	bc 01       	movw	r22, r24
    1e38:	cd 01       	movw	r24, r26
    1e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	9c 8b       	std	Y+20, r25	; 0x14
    1e44:	8b 8b       	std	Y+19, r24	; 0x13
    1e46:	0f c0       	rjmp	.+30     	; 0x1e66 <LCD_displayCharacter+0x2ac>
    1e48:	88 ec       	ldi	r24, 0xC8	; 200
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	9a 8b       	std	Y+18, r25	; 0x12
    1e4e:	89 8b       	std	Y+17, r24	; 0x11
    1e50:	89 89       	ldd	r24, Y+17	; 0x11
    1e52:	9a 89       	ldd	r25, Y+18	; 0x12
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <LCD_displayCharacter+0x29a>
    1e58:	9a 8b       	std	Y+18, r25	; 0x12
    1e5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	9c 8b       	std	Y+20, r25	; 0x14
    1e64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e66:	8b 89       	ldd	r24, Y+19	; 0x13
    1e68:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	69 f7       	brne	.-38     	; 0x1e48 <LCD_displayCharacter+0x28e>
    1e6e:	14 c0       	rjmp	.+40     	; 0x1e98 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e70:	6d 89       	ldd	r22, Y+21	; 0x15
    1e72:	7e 89       	ldd	r23, Y+22	; 0x16
    1e74:	8f 89       	ldd	r24, Y+23	; 0x17
    1e76:	98 8d       	ldd	r25, Y+24	; 0x18
    1e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	9c 8b       	std	Y+20, r25	; 0x14
    1e82:	8b 8b       	std	Y+19, r24	; 0x13
    1e84:	8b 89       	ldd	r24, Y+19	; 0x13
    1e86:	9c 89       	ldd	r25, Y+20	; 0x14
    1e88:	98 8b       	std	Y+16, r25	; 0x10
    1e8a:	8f 87       	std	Y+15, r24	; 0x0f
    1e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e8e:	98 89       	ldd	r25, Y+16	; 0x10
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <LCD_displayCharacter+0x2d6>
    1e94:	98 8b       	std	Y+16, r25	; 0x10
    1e96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	62 e0       	ldi	r22, 0x02	; 2
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <GPIO_writePin>
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	a0 e8       	ldi	r26, 0x80	; 128
    1ea8:	bf e3       	ldi	r27, 0x3F	; 63
    1eaa:	8b 87       	std	Y+11, r24	; 0x0b
    1eac:	9c 87       	std	Y+12, r25	; 0x0c
    1eae:	ad 87       	std	Y+13, r26	; 0x0d
    1eb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	4a ef       	ldi	r20, 0xFA	; 250
    1ec0:	54 e4       	ldi	r21, 0x44	; 68
    1ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	8f 83       	std	Y+7, r24	; 0x07
    1ecc:	98 87       	std	Y+8, r25	; 0x08
    1ece:	a9 87       	std	Y+9, r26	; 0x09
    1ed0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed4:	78 85       	ldd	r23, Y+8	; 0x08
    1ed6:	89 85       	ldd	r24, Y+9	; 0x09
    1ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e8       	ldi	r20, 0x80	; 128
    1ee0:	5f e3       	ldi	r21, 0x3F	; 63
    1ee2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee6:	88 23       	and	r24, r24
    1ee8:	2c f4       	brge	.+10     	; 0x1ef4 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9e 83       	std	Y+6, r25	; 0x06
    1ef0:	8d 83       	std	Y+5, r24	; 0x05
    1ef2:	3f c0       	rjmp	.+126    	; 0x1f72 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef6:	78 85       	ldd	r23, Y+8	; 0x08
    1ef8:	89 85       	ldd	r24, Y+9	; 0x09
    1efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	3f ef       	ldi	r19, 0xFF	; 255
    1f00:	4f e7       	ldi	r20, 0x7F	; 127
    1f02:	57 e4       	ldi	r21, 0x47	; 71
    1f04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f08:	18 16       	cp	r1, r24
    1f0a:	4c f5       	brge	.+82     	; 0x1f5e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e2       	ldi	r20, 0x20	; 32
    1f1a:	51 e4       	ldi	r21, 0x41	; 65
    1f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9e 83       	std	Y+6, r25	; 0x06
    1f32:	8d 83       	std	Y+5, r24	; 0x05
    1f34:	0f c0       	rjmp	.+30     	; 0x1f54 <LCD_displayCharacter+0x39a>
    1f36:	88 ec       	ldi	r24, 0xC8	; 200
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	9c 83       	std	Y+4, r25	; 0x04
    1f3c:	8b 83       	std	Y+3, r24	; 0x03
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	9c 81       	ldd	r25, Y+4	; 0x04
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <LCD_displayCharacter+0x388>
    1f46:	9c 83       	std	Y+4, r25	; 0x04
    1f48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	9e 83       	std	Y+6, r25	; 0x06
    1f52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	69 f7       	brne	.-38     	; 0x1f36 <LCD_displayCharacter+0x37c>
    1f5c:	14 c0       	rjmp	.+40     	; 0x1f86 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f60:	78 85       	ldd	r23, Y+8	; 0x08
    1f62:	89 85       	ldd	r24, Y+9	; 0x09
    1f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9e 83       	std	Y+6, r25	; 0x06
    1f70:	8d 83       	std	Y+5, r24	; 0x05
    1f72:	8d 81       	ldd	r24, Y+5	; 0x05
    1f74:	9e 81       	ldd	r25, Y+6	; 0x06
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <LCD_displayCharacter+0x3c4>
    1f82:	9a 83       	std	Y+2, r25	; 0x02
    1f84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f86:	e9 96       	adiw	r28, 0x39	; 57
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <LCD_displayString+0x6>
    1f9e:	0f 92       	push	r0
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	9b 83       	std	Y+3, r25	; 0x03
    1fa6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1fa8:	19 82       	std	Y+1, r1	; 0x01
    1faa:	0e c0       	rjmp	.+28     	; 0x1fc8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	28 2f       	mov	r18, r24
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	e2 0f       	add	r30, r18
    1fba:	f3 1f       	adc	r31, r19
    1fbc:	80 81       	ld	r24, Z
    1fbe:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <LCD_displayCharacter>
		i++;
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	8f 5f       	subi	r24, 0xFF	; 255
    1fc6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	e2 0f       	add	r30, r18
    1fd6:	f3 1f       	adc	r31, r19
    1fd8:	80 81       	ld	r24, Z
    1fda:	88 23       	and	r24, r24
    1fdc:	39 f7       	brne	.-50     	; 0x1fac <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <LCD_moveCursor+0x6>
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <LCD_moveCursor+0x8>
    1ff2:	0f 92       	push	r0
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	8a 83       	std	Y+2, r24	; 0x02
    1ffa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	3d 83       	std	Y+5, r19	; 0x05
    2004:	2c 83       	std	Y+4, r18	; 0x04
    2006:	8c 81       	ldd	r24, Y+4	; 0x04
    2008:	9d 81       	ldd	r25, Y+5	; 0x05
    200a:	81 30       	cpi	r24, 0x01	; 1
    200c:	91 05       	cpc	r25, r1
    200e:	c1 f0       	breq	.+48     	; 0x2040 <LCD_moveCursor+0x56>
    2010:	2c 81       	ldd	r18, Y+4	; 0x04
    2012:	3d 81       	ldd	r19, Y+5	; 0x05
    2014:	22 30       	cpi	r18, 0x02	; 2
    2016:	31 05       	cpc	r19, r1
    2018:	2c f4       	brge	.+10     	; 0x2024 <LCD_moveCursor+0x3a>
    201a:	8c 81       	ldd	r24, Y+4	; 0x04
    201c:	9d 81       	ldd	r25, Y+5	; 0x05
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	61 f0       	breq	.+24     	; 0x203a <LCD_moveCursor+0x50>
    2022:	19 c0       	rjmp	.+50     	; 0x2056 <LCD_moveCursor+0x6c>
    2024:	2c 81       	ldd	r18, Y+4	; 0x04
    2026:	3d 81       	ldd	r19, Y+5	; 0x05
    2028:	22 30       	cpi	r18, 0x02	; 2
    202a:	31 05       	cpc	r19, r1
    202c:	69 f0       	breq	.+26     	; 0x2048 <LCD_moveCursor+0x5e>
    202e:	8c 81       	ldd	r24, Y+4	; 0x04
    2030:	9d 81       	ldd	r25, Y+5	; 0x05
    2032:	83 30       	cpi	r24, 0x03	; 3
    2034:	91 05       	cpc	r25, r1
    2036:	61 f0       	breq	.+24     	; 0x2050 <LCD_moveCursor+0x66>
    2038:	0e c0       	rjmp	.+28     	; 0x2056 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	0b c0       	rjmp	.+22     	; 0x2056 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	80 5c       	subi	r24, 0xC0	; 192
    2044:	89 83       	std	Y+1, r24	; 0x01
    2046:	07 c0       	rjmp	.+14     	; 0x2056 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	80 5f       	subi	r24, 0xF0	; 240
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	03 c0       	rjmp	.+6      	; 0x2056 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	80 5b       	subi	r24, 0xB0	; 176
    2054:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	80 68       	ori	r24, 0x80	; 128
    205a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LCD_sendCommand>
}
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	00 d0       	rcall	.+0      	; 0x2074 <LCD_displayStringRowColumn+0x6>
    2074:	00 d0       	rcall	.+0      	; 0x2076 <LCD_displayStringRowColumn+0x8>
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	6a 83       	std	Y+2, r22	; 0x02
    207e:	5c 83       	std	Y+4, r21	; 0x04
    2080:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	6a 81       	ldd	r22, Y+2	; 0x02
    2086:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>
}
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	62 97       	sbiw	r28, 0x12	; 18
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	9a 8b       	std	Y+18, r25	; 0x12
    20b6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    20b8:	89 89       	ldd	r24, Y+17	; 0x11
    20ba:	9a 89       	ldd	r25, Y+18	; 0x12
    20bc:	9e 01       	movw	r18, r28
    20be:	2f 5f       	subi	r18, 0xFF	; 255
    20c0:	3f 4f       	sbci	r19, 0xFF	; 255
    20c2:	b9 01       	movw	r22, r18
    20c4:	4a e0       	ldi	r20, 0x0A	; 10
    20c6:	50 e0       	ldi	r21, 0x00	; 0
    20c8:	0e 94 e6 20 	call	0x41cc	; 0x41cc <itoa>
   LCD_displayString(buff); /* Display the string */
    20cc:	ce 01       	movw	r24, r28
    20ce:	01 96       	adiw	r24, 0x01	; 1
    20d0:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>
}
    20d4:	62 96       	adiw	r28, 0x12	; 18
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	de bf       	out	0x3e, r29	; 62
    20dc:	0f be       	out	0x3f, r0	; 63
    20de:	cd bf       	out	0x3d, r28	; 61
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LCD_sendCommand>
}
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <start>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
/*
 * description the function that will be included in the main
 */
void start(void){
    20fa:	0f 93       	push	r16
    20fc:	1f 93       	push	r17
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	ce 5e       	subi	r28, 0xEE	; 238
    2108:	d0 40       	sbci	r29, 0x00	; 0
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
	//Enable I-bit
	SREG|=(1<<7);
    2114:	af e5       	ldi	r26, 0x5F	; 95
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	ef e5       	ldi	r30, 0x5F	; 95
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	80 68       	ori	r24, 0x80	; 128
    2120:	8c 93       	st	X, r24
	//initialize the LCD
	LCD_init();
    2122:	0e 94 4d 0b 	call	0x169a	; 0x169a <LCD_init>
	//initialize the UART
	UART_init(&Config);
    2126:	83 e4       	ldi	r24, 0x43	; 67
    2128:	92 e0       	ldi	r25, 0x02	; 2
    212a:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <UART_init>
    212e:	ba c3       	rjmp	.+1908   	; 0x28a4 <start+0x7aa>
	uint8 password[5] , confirmPassword[5] , passwordVerified , command ;
	while(passwordVerified == 0)
	{
		LCD_clearScreen();
    2130:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
		LCD_displayString("Plz enter pass:");
    2134:	80 e6       	ldi	r24, 0x60	; 96
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>


		enterPassword(password);
    213c:	ce 01       	movw	r24, r28
    213e:	8b 51       	subi	r24, 0x1B	; 27
    2140:	9f 4f       	sbci	r25, 0xFF	; 255
    2142:	0e 94 a5 1b 	call	0x374a	; 0x374a <enterPassword>
    2146:	fe 01       	movw	r30, r28
    2148:	e3 52       	subi	r30, 0x23	; 35
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	a8 e4       	ldi	r26, 0x48	; 72
    2152:	b2 e4       	ldi	r27, 0x42	; 66
    2154:	80 83       	st	Z, r24
    2156:	91 83       	std	Z+1, r25	; 0x01
    2158:	a2 83       	std	Z+2, r26	; 0x02
    215a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215c:	8e 01       	movw	r16, r28
    215e:	07 52       	subi	r16, 0x27	; 39
    2160:	1f 4f       	sbci	r17, 0xFF	; 255
    2162:	fe 01       	movw	r30, r28
    2164:	e3 52       	subi	r30, 0x23	; 35
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	60 81       	ld	r22, Z
    216a:	71 81       	ldd	r23, Z+1	; 0x01
    216c:	82 81       	ldd	r24, Z+2	; 0x02
    216e:	93 81       	ldd	r25, Z+3	; 0x03
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	4a ef       	ldi	r20, 0xFA	; 250
    2176:	54 e4       	ldi	r21, 0x44	; 68
    2178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	f8 01       	movw	r30, r16
    2182:	80 83       	st	Z, r24
    2184:	91 83       	std	Z+1, r25	; 0x01
    2186:	a2 83       	std	Z+2, r26	; 0x02
    2188:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    218a:	fe 01       	movw	r30, r28
    218c:	e7 52       	subi	r30, 0x27	; 39
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	60 81       	ld	r22, Z
    2192:	71 81       	ldd	r23, Z+1	; 0x01
    2194:	82 81       	ldd	r24, Z+2	; 0x02
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e8       	ldi	r20, 0x80	; 128
    219e:	5f e3       	ldi	r21, 0x3F	; 63
    21a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a4:	88 23       	and	r24, r24
    21a6:	44 f4       	brge	.+16     	; 0x21b8 <start+0xbe>
		__ticks = 1;
    21a8:	fe 01       	movw	r30, r28
    21aa:	e9 52       	subi	r30, 0x29	; 41
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	91 83       	std	Z+1, r25	; 0x01
    21b4:	80 83       	st	Z, r24
    21b6:	64 c0       	rjmp	.+200    	; 0x2280 <start+0x186>
	else if (__tmp > 65535)
    21b8:	fe 01       	movw	r30, r28
    21ba:	e7 52       	subi	r30, 0x27	; 39
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	60 81       	ld	r22, Z
    21c0:	71 81       	ldd	r23, Z+1	; 0x01
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	3f ef       	ldi	r19, 0xFF	; 255
    21ca:	4f e7       	ldi	r20, 0x7F	; 127
    21cc:	57 e4       	ldi	r21, 0x47	; 71
    21ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d2:	18 16       	cp	r1, r24
    21d4:	0c f0       	brlt	.+2      	; 0x21d8 <start+0xde>
    21d6:	43 c0       	rjmp	.+134    	; 0x225e <start+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d8:	fe 01       	movw	r30, r28
    21da:	e3 52       	subi	r30, 0x23	; 35
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	60 81       	ld	r22, Z
    21e0:	71 81       	ldd	r23, Z+1	; 0x01
    21e2:	82 81       	ldd	r24, Z+2	; 0x02
    21e4:	93 81       	ldd	r25, Z+3	; 0x03
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e2       	ldi	r20, 0x20	; 32
    21ec:	51 e4       	ldi	r21, 0x41	; 65
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	8e 01       	movw	r16, r28
    21f8:	09 52       	subi	r16, 0x29	; 41
    21fa:	1f 4f       	sbci	r17, 0xFF	; 255
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	f8 01       	movw	r30, r16
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	80 83       	st	Z, r24
    220e:	1f c0       	rjmp	.+62     	; 0x224e <start+0x154>
    2210:	fe 01       	movw	r30, r28
    2212:	eb 52       	subi	r30, 0x2B	; 43
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	88 ec       	ldi	r24, 0xC8	; 200
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	80 83       	st	Z, r24
    221e:	fe 01       	movw	r30, r28
    2220:	eb 52       	subi	r30, 0x2B	; 43
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 81       	ld	r24, Z
    2226:	91 81       	ldd	r25, Z+1	; 0x01
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <start+0x12e>
    222c:	fe 01       	movw	r30, r28
    222e:	eb 52       	subi	r30, 0x2B	; 43
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2236:	de 01       	movw	r26, r28
    2238:	a9 52       	subi	r26, 0x29	; 41
    223a:	bf 4f       	sbci	r27, 0xFF	; 255
    223c:	fe 01       	movw	r30, r28
    223e:	e9 52       	subi	r30, 0x29	; 41
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 81       	ld	r24, Z
    2244:	91 81       	ldd	r25, Z+1	; 0x01
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	11 96       	adiw	r26, 0x01	; 1
    224a:	9c 93       	st	X, r25
    224c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224e:	fe 01       	movw	r30, r28
    2250:	e9 52       	subi	r30, 0x29	; 41
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 81       	ld	r24, Z
    2256:	91 81       	ldd	r25, Z+1	; 0x01
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	d1 f6       	brne	.-76     	; 0x2210 <start+0x116>
    225c:	27 c0       	rjmp	.+78     	; 0x22ac <start+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	8e 01       	movw	r16, r28
    2260:	09 52       	subi	r16, 0x29	; 41
    2262:	1f 4f       	sbci	r17, 0xFF	; 255
    2264:	fe 01       	movw	r30, r28
    2266:	e7 52       	subi	r30, 0x27	; 39
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	60 81       	ld	r22, Z
    226c:	71 81       	ldd	r23, Z+1	; 0x01
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	f8 01       	movw	r30, r16
    227c:	91 83       	std	Z+1, r25	; 0x01
    227e:	80 83       	st	Z, r24
    2280:	de 01       	movw	r26, r28
    2282:	ad 52       	subi	r26, 0x2D	; 45
    2284:	bf 4f       	sbci	r27, 0xFF	; 255
    2286:	fe 01       	movw	r30, r28
    2288:	e9 52       	subi	r30, 0x29	; 41
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	8d 93       	st	X+, r24
    2292:	9c 93       	st	X, r25
    2294:	fe 01       	movw	r30, r28
    2296:	ed 52       	subi	r30, 0x2D	; 45
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <start+0x1a4>
    22a2:	fe 01       	movw	r30, r28
    22a4:	ed 52       	subi	r30, 0x2D	; 45
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);
		sendPassword(password);
    22ac:	ce 01       	movw	r24, r28
    22ae:	8b 51       	subi	r24, 0x1B	; 27
    22b0:	9f 4f       	sbci	r25, 0xFF	; 255
    22b2:	0e 94 c5 1c 	call	0x398a	; 0x398a <sendPassword>

		LCD_clearScreen();
    22b6:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
		LCD_displayString("Confirm Pass:");
    22ba:	80 e7       	ldi	r24, 0x70	; 112
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>
		enterPassword( confirmPassword );
    22c2:	ce 01       	movw	r24, r28
    22c4:	86 51       	subi	r24, 0x16	; 22
    22c6:	9f 4f       	sbci	r25, 0xFF	; 255
    22c8:	0e 94 a5 1b 	call	0x374a	; 0x374a <enterPassword>
    22cc:	fe 01       	movw	r30, r28
    22ce:	e1 53       	subi	r30, 0x31	; 49
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	a8 e4       	ldi	r26, 0x48	; 72
    22d8:	b2 e4       	ldi	r27, 0x42	; 66
    22da:	80 83       	st	Z, r24
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	a2 83       	std	Z+2, r26	; 0x02
    22e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e2:	8e 01       	movw	r16, r28
    22e4:	05 53       	subi	r16, 0x35	; 53
    22e6:	1f 4f       	sbci	r17, 0xFF	; 255
    22e8:	fe 01       	movw	r30, r28
    22ea:	e1 53       	subi	r30, 0x31	; 49
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	60 81       	ld	r22, Z
    22f0:	71 81       	ldd	r23, Z+1	; 0x01
    22f2:	82 81       	ldd	r24, Z+2	; 0x02
    22f4:	93 81       	ldd	r25, Z+3	; 0x03
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	4a ef       	ldi	r20, 0xFA	; 250
    22fc:	54 e4       	ldi	r21, 0x44	; 68
    22fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	f8 01       	movw	r30, r16
    2308:	80 83       	st	Z, r24
    230a:	91 83       	std	Z+1, r25	; 0x01
    230c:	a2 83       	std	Z+2, r26	; 0x02
    230e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2310:	fe 01       	movw	r30, r28
    2312:	e5 53       	subi	r30, 0x35	; 53
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	60 81       	ld	r22, Z
    2318:	71 81       	ldd	r23, Z+1	; 0x01
    231a:	82 81       	ldd	r24, Z+2	; 0x02
    231c:	93 81       	ldd	r25, Z+3	; 0x03
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e8       	ldi	r20, 0x80	; 128
    2324:	5f e3       	ldi	r21, 0x3F	; 63
    2326:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    232a:	88 23       	and	r24, r24
    232c:	44 f4       	brge	.+16     	; 0x233e <start+0x244>
		__ticks = 1;
    232e:	fe 01       	movw	r30, r28
    2330:	e7 53       	subi	r30, 0x37	; 55
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	91 83       	std	Z+1, r25	; 0x01
    233a:	80 83       	st	Z, r24
    233c:	64 c0       	rjmp	.+200    	; 0x2406 <start+0x30c>
	else if (__tmp > 65535)
    233e:	fe 01       	movw	r30, r28
    2340:	e5 53       	subi	r30, 0x35	; 53
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	60 81       	ld	r22, Z
    2346:	71 81       	ldd	r23, Z+1	; 0x01
    2348:	82 81       	ldd	r24, Z+2	; 0x02
    234a:	93 81       	ldd	r25, Z+3	; 0x03
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	3f ef       	ldi	r19, 0xFF	; 255
    2350:	4f e7       	ldi	r20, 0x7F	; 127
    2352:	57 e4       	ldi	r21, 0x47	; 71
    2354:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2358:	18 16       	cp	r1, r24
    235a:	0c f0       	brlt	.+2      	; 0x235e <start+0x264>
    235c:	43 c0       	rjmp	.+134    	; 0x23e4 <start+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235e:	fe 01       	movw	r30, r28
    2360:	e1 53       	subi	r30, 0x31	; 49
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e2       	ldi	r20, 0x20	; 32
    2372:	51 e4       	ldi	r21, 0x41	; 65
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	8e 01       	movw	r16, r28
    237e:	07 53       	subi	r16, 0x37	; 55
    2380:	1f 4f       	sbci	r17, 0xFF	; 255
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	f8 01       	movw	r30, r16
    2390:	91 83       	std	Z+1, r25	; 0x01
    2392:	80 83       	st	Z, r24
    2394:	1f c0       	rjmp	.+62     	; 0x23d4 <start+0x2da>
    2396:	fe 01       	movw	r30, r28
    2398:	e9 53       	subi	r30, 0x39	; 57
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	88 ec       	ldi	r24, 0xC8	; 200
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	91 83       	std	Z+1, r25	; 0x01
    23a2:	80 83       	st	Z, r24
    23a4:	fe 01       	movw	r30, r28
    23a6:	e9 53       	subi	r30, 0x39	; 57
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 81       	ld	r24, Z
    23ac:	91 81       	ldd	r25, Z+1	; 0x01
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <start+0x2b4>
    23b2:	fe 01       	movw	r30, r28
    23b4:	e9 53       	subi	r30, 0x39	; 57
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	91 83       	std	Z+1, r25	; 0x01
    23ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23bc:	de 01       	movw	r26, r28
    23be:	a7 53       	subi	r26, 0x37	; 55
    23c0:	bf 4f       	sbci	r27, 0xFF	; 255
    23c2:	fe 01       	movw	r30, r28
    23c4:	e7 53       	subi	r30, 0x37	; 55
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	80 81       	ld	r24, Z
    23ca:	91 81       	ldd	r25, Z+1	; 0x01
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	11 96       	adiw	r26, 0x01	; 1
    23d0:	9c 93       	st	X, r25
    23d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d4:	fe 01       	movw	r30, r28
    23d6:	e7 53       	subi	r30, 0x37	; 55
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 81       	ld	r24, Z
    23dc:	91 81       	ldd	r25, Z+1	; 0x01
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	d1 f6       	brne	.-76     	; 0x2396 <start+0x29c>
    23e2:	27 c0       	rjmp	.+78     	; 0x2432 <start+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e4:	8e 01       	movw	r16, r28
    23e6:	07 53       	subi	r16, 0x37	; 55
    23e8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ea:	fe 01       	movw	r30, r28
    23ec:	e5 53       	subi	r30, 0x35	; 53
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	60 81       	ld	r22, Z
    23f2:	71 81       	ldd	r23, Z+1	; 0x01
    23f4:	82 81       	ldd	r24, Z+2	; 0x02
    23f6:	93 81       	ldd	r25, Z+3	; 0x03
    23f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	f8 01       	movw	r30, r16
    2402:	91 83       	std	Z+1, r25	; 0x01
    2404:	80 83       	st	Z, r24
    2406:	de 01       	movw	r26, r28
    2408:	ab 53       	subi	r26, 0x3B	; 59
    240a:	bf 4f       	sbci	r27, 0xFF	; 255
    240c:	fe 01       	movw	r30, r28
    240e:	e7 53       	subi	r30, 0x37	; 55
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	80 81       	ld	r24, Z
    2414:	91 81       	ldd	r25, Z+1	; 0x01
    2416:	8d 93       	st	X+, r24
    2418:	9c 93       	st	X, r25
    241a:	fe 01       	movw	r30, r28
    241c:	eb 53       	subi	r30, 0x3B	; 59
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	80 81       	ld	r24, Z
    2422:	91 81       	ldd	r25, Z+1	; 0x01
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <start+0x32a>
    2428:	fe 01       	movw	r30, r28
    242a:	eb 53       	subi	r30, 0x3B	; 59
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);
		sendPassword( confirmPassword );
    2432:	ce 01       	movw	r24, r28
    2434:	86 51       	subi	r24, 0x16	; 22
    2436:	9f 4f       	sbci	r25, 0xFF	; 255
    2438:	0e 94 c5 1c 	call	0x398a	; 0x398a <sendPassword>
    243c:	fe 01       	movw	r30, r28
    243e:	ef 53       	subi	r30, 0x3F	; 63
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	a8 e4       	ldi	r26, 0x48	; 72
    2448:	b2 e4       	ldi	r27, 0x42	; 66
    244a:	80 83       	st	Z, r24
    244c:	91 83       	std	Z+1, r25	; 0x01
    244e:	a2 83       	std	Z+2, r26	; 0x02
    2450:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2452:	8e 01       	movw	r16, r28
    2454:	03 54       	subi	r16, 0x43	; 67
    2456:	1f 4f       	sbci	r17, 0xFF	; 255
    2458:	fe 01       	movw	r30, r28
    245a:	ef 53       	subi	r30, 0x3F	; 63
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	60 81       	ld	r22, Z
    2460:	71 81       	ldd	r23, Z+1	; 0x01
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	4a ef       	ldi	r20, 0xFA	; 250
    246c:	54 e4       	ldi	r21, 0x44	; 68
    246e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	f8 01       	movw	r30, r16
    2478:	80 83       	st	Z, r24
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	a2 83       	std	Z+2, r26	; 0x02
    247e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2480:	fe 01       	movw	r30, r28
    2482:	e3 54       	subi	r30, 0x43	; 67
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	60 81       	ld	r22, Z
    2488:	71 81       	ldd	r23, Z+1	; 0x01
    248a:	82 81       	ldd	r24, Z+2	; 0x02
    248c:	93 81       	ldd	r25, Z+3	; 0x03
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e8       	ldi	r20, 0x80	; 128
    2494:	5f e3       	ldi	r21, 0x3F	; 63
    2496:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    249a:	88 23       	and	r24, r24
    249c:	44 f4       	brge	.+16     	; 0x24ae <start+0x3b4>
		__ticks = 1;
    249e:	fe 01       	movw	r30, r28
    24a0:	e5 54       	subi	r30, 0x45	; 69
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	80 83       	st	Z, r24
    24ac:	64 c0       	rjmp	.+200    	; 0x2576 <start+0x47c>
	else if (__tmp > 65535)
    24ae:	fe 01       	movw	r30, r28
    24b0:	e3 54       	subi	r30, 0x43	; 67
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	60 81       	ld	r22, Z
    24b6:	71 81       	ldd	r23, Z+1	; 0x01
    24b8:	82 81       	ldd	r24, Z+2	; 0x02
    24ba:	93 81       	ldd	r25, Z+3	; 0x03
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	3f ef       	ldi	r19, 0xFF	; 255
    24c0:	4f e7       	ldi	r20, 0x7F	; 127
    24c2:	57 e4       	ldi	r21, 0x47	; 71
    24c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c8:	18 16       	cp	r1, r24
    24ca:	0c f0       	brlt	.+2      	; 0x24ce <start+0x3d4>
    24cc:	43 c0       	rjmp	.+134    	; 0x2554 <start+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ce:	fe 01       	movw	r30, r28
    24d0:	ef 53       	subi	r30, 0x3F	; 63
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	60 81       	ld	r22, Z
    24d6:	71 81       	ldd	r23, Z+1	; 0x01
    24d8:	82 81       	ldd	r24, Z+2	; 0x02
    24da:	93 81       	ldd	r25, Z+3	; 0x03
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e2       	ldi	r20, 0x20	; 32
    24e2:	51 e4       	ldi	r21, 0x41	; 65
    24e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	8e 01       	movw	r16, r28
    24ee:	05 54       	subi	r16, 0x45	; 69
    24f0:	1f 4f       	sbci	r17, 0xFF	; 255
    24f2:	bc 01       	movw	r22, r24
    24f4:	cd 01       	movw	r24, r26
    24f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	f8 01       	movw	r30, r16
    2500:	91 83       	std	Z+1, r25	; 0x01
    2502:	80 83       	st	Z, r24
    2504:	1f c0       	rjmp	.+62     	; 0x2544 <start+0x44a>
    2506:	fe 01       	movw	r30, r28
    2508:	e7 54       	subi	r30, 0x47	; 71
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	88 ec       	ldi	r24, 0xC8	; 200
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	91 83       	std	Z+1, r25	; 0x01
    2512:	80 83       	st	Z, r24
    2514:	fe 01       	movw	r30, r28
    2516:	e7 54       	subi	r30, 0x47	; 71
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	80 81       	ld	r24, Z
    251c:	91 81       	ldd	r25, Z+1	; 0x01
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <start+0x424>
    2522:	fe 01       	movw	r30, r28
    2524:	e7 54       	subi	r30, 0x47	; 71
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	91 83       	std	Z+1, r25	; 0x01
    252a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252c:	de 01       	movw	r26, r28
    252e:	a5 54       	subi	r26, 0x45	; 69
    2530:	bf 4f       	sbci	r27, 0xFF	; 255
    2532:	fe 01       	movw	r30, r28
    2534:	e5 54       	subi	r30, 0x45	; 69
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	80 81       	ld	r24, Z
    253a:	91 81       	ldd	r25, Z+1	; 0x01
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	11 96       	adiw	r26, 0x01	; 1
    2540:	9c 93       	st	X, r25
    2542:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2544:	fe 01       	movw	r30, r28
    2546:	e5 54       	subi	r30, 0x45	; 69
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	91 81       	ldd	r25, Z+1	; 0x01
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	d1 f6       	brne	.-76     	; 0x2506 <start+0x40c>
    2552:	27 c0       	rjmp	.+78     	; 0x25a2 <start+0x4a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2554:	8e 01       	movw	r16, r28
    2556:	05 54       	subi	r16, 0x45	; 69
    2558:	1f 4f       	sbci	r17, 0xFF	; 255
    255a:	fe 01       	movw	r30, r28
    255c:	e3 54       	subi	r30, 0x43	; 67
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	60 81       	ld	r22, Z
    2562:	71 81       	ldd	r23, Z+1	; 0x01
    2564:	82 81       	ldd	r24, Z+2	; 0x02
    2566:	93 81       	ldd	r25, Z+3	; 0x03
    2568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	f8 01       	movw	r30, r16
    2572:	91 83       	std	Z+1, r25	; 0x01
    2574:	80 83       	st	Z, r24
    2576:	de 01       	movw	r26, r28
    2578:	a9 54       	subi	r26, 0x49	; 73
    257a:	bf 4f       	sbci	r27, 0xFF	; 255
    257c:	fe 01       	movw	r30, r28
    257e:	e5 54       	subi	r30, 0x45	; 69
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 81       	ld	r24, Z
    2584:	91 81       	ldd	r25, Z+1	; 0x01
    2586:	8d 93       	st	X+, r24
    2588:	9c 93       	st	X, r25
    258a:	fe 01       	movw	r30, r28
    258c:	e9 54       	subi	r30, 0x49	; 73
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	80 81       	ld	r24, Z
    2592:	91 81       	ldd	r25, Z+1	; 0x01
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <start+0x49a>
    2598:	fe 01       	movw	r30, r28
    259a:	e9 54       	subi	r30, 0x49	; 73
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	91 83       	std	Z+1, r25	; 0x01
    25a0:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);

		passwordVerified = UART_recieveByte();
    25a2:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    25a6:	fe 01       	movw	r30, r28
    25a8:	ec 51       	subi	r30, 0x1C	; 28
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	80 83       	st	Z, r24
    25ae:	fe 01       	movw	r30, r28
    25b0:	ed 54       	subi	r30, 0x4D	; 77
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	a8 e4       	ldi	r26, 0x48	; 72
    25ba:	b2 e4       	ldi	r27, 0x42	; 66
    25bc:	80 83       	st	Z, r24
    25be:	91 83       	std	Z+1, r25	; 0x01
    25c0:	a2 83       	std	Z+2, r26	; 0x02
    25c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c4:	8e 01       	movw	r16, r28
    25c6:	01 55       	subi	r16, 0x51	; 81
    25c8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ca:	fe 01       	movw	r30, r28
    25cc:	ed 54       	subi	r30, 0x4D	; 77
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	60 81       	ld	r22, Z
    25d2:	71 81       	ldd	r23, Z+1	; 0x01
    25d4:	82 81       	ldd	r24, Z+2	; 0x02
    25d6:	93 81       	ldd	r25, Z+3	; 0x03
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	4a ef       	ldi	r20, 0xFA	; 250
    25de:	54 e4       	ldi	r21, 0x44	; 68
    25e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	f8 01       	movw	r30, r16
    25ea:	80 83       	st	Z, r24
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	a2 83       	std	Z+2, r26	; 0x02
    25f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25f2:	fe 01       	movw	r30, r28
    25f4:	e1 55       	subi	r30, 0x51	; 81
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	60 81       	ld	r22, Z
    25fa:	71 81       	ldd	r23, Z+1	; 0x01
    25fc:	82 81       	ldd	r24, Z+2	; 0x02
    25fe:	93 81       	ldd	r25, Z+3	; 0x03
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    260c:	88 23       	and	r24, r24
    260e:	44 f4       	brge	.+16     	; 0x2620 <start+0x526>
		__ticks = 1;
    2610:	fe 01       	movw	r30, r28
    2612:	e3 55       	subi	r30, 0x53	; 83
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	80 83       	st	Z, r24
    261e:	64 c0       	rjmp	.+200    	; 0x26e8 <start+0x5ee>
	else if (__tmp > 65535)
    2620:	fe 01       	movw	r30, r28
    2622:	e1 55       	subi	r30, 0x51	; 81
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	60 81       	ld	r22, Z
    2628:	71 81       	ldd	r23, Z+1	; 0x01
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	93 81       	ldd	r25, Z+3	; 0x03
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	3f ef       	ldi	r19, 0xFF	; 255
    2632:	4f e7       	ldi	r20, 0x7F	; 127
    2634:	57 e4       	ldi	r21, 0x47	; 71
    2636:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    263a:	18 16       	cp	r1, r24
    263c:	0c f0       	brlt	.+2      	; 0x2640 <start+0x546>
    263e:	43 c0       	rjmp	.+134    	; 0x26c6 <start+0x5cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2640:	fe 01       	movw	r30, r28
    2642:	ed 54       	subi	r30, 0x4D	; 77
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	60 81       	ld	r22, Z
    2648:	71 81       	ldd	r23, Z+1	; 0x01
    264a:	82 81       	ldd	r24, Z+2	; 0x02
    264c:	93 81       	ldd	r25, Z+3	; 0x03
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e2       	ldi	r20, 0x20	; 32
    2654:	51 e4       	ldi	r21, 0x41	; 65
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	8e 01       	movw	r16, r28
    2660:	03 55       	subi	r16, 0x53	; 83
    2662:	1f 4f       	sbci	r17, 0xFF	; 255
    2664:	bc 01       	movw	r22, r24
    2666:	cd 01       	movw	r24, r26
    2668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	f8 01       	movw	r30, r16
    2672:	91 83       	std	Z+1, r25	; 0x01
    2674:	80 83       	st	Z, r24
    2676:	1f c0       	rjmp	.+62     	; 0x26b6 <start+0x5bc>
    2678:	fe 01       	movw	r30, r28
    267a:	e5 55       	subi	r30, 0x55	; 85
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	88 ec       	ldi	r24, 0xC8	; 200
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	91 83       	std	Z+1, r25	; 0x01
    2684:	80 83       	st	Z, r24
    2686:	fe 01       	movw	r30, r28
    2688:	e5 55       	subi	r30, 0x55	; 85
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 81       	ld	r24, Z
    268e:	91 81       	ldd	r25, Z+1	; 0x01
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <start+0x596>
    2694:	fe 01       	movw	r30, r28
    2696:	e5 55       	subi	r30, 0x55	; 85
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269e:	de 01       	movw	r26, r28
    26a0:	a3 55       	subi	r26, 0x53	; 83
    26a2:	bf 4f       	sbci	r27, 0xFF	; 255
    26a4:	fe 01       	movw	r30, r28
    26a6:	e3 55       	subi	r30, 0x53	; 83
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 81       	ld	r24, Z
    26ac:	91 81       	ldd	r25, Z+1	; 0x01
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	11 96       	adiw	r26, 0x01	; 1
    26b2:	9c 93       	st	X, r25
    26b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b6:	fe 01       	movw	r30, r28
    26b8:	e3 55       	subi	r30, 0x53	; 83
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	80 81       	ld	r24, Z
    26be:	91 81       	ldd	r25, Z+1	; 0x01
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	d1 f6       	brne	.-76     	; 0x2678 <start+0x57e>
    26c4:	28 c0       	rjmp	.+80     	; 0x2716 <start+0x61c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c6:	8e 01       	movw	r16, r28
    26c8:	03 55       	subi	r16, 0x53	; 83
    26ca:	1f 4f       	sbci	r17, 0xFF	; 255
    26cc:	fe 01       	movw	r30, r28
    26ce:	e1 55       	subi	r30, 0x51	; 81
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	60 81       	ld	r22, Z
    26d4:	71 81       	ldd	r23, Z+1	; 0x01
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	f8 01       	movw	r30, r16
    26e4:	91 83       	std	Z+1, r25	; 0x01
    26e6:	80 83       	st	Z, r24
    26e8:	de 01       	movw	r26, r28
    26ea:	a7 55       	subi	r26, 0x57	; 87
    26ec:	bf 4f       	sbci	r27, 0xFF	; 255
    26ee:	fe 01       	movw	r30, r28
    26f0:	e3 55       	subi	r30, 0x53	; 83
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	80 81       	ld	r24, Z
    26f6:	91 81       	ldd	r25, Z+1	; 0x01
    26f8:	11 96       	adiw	r26, 0x01	; 1
    26fa:	9c 93       	st	X, r25
    26fc:	8e 93       	st	-X, r24
    26fe:	fe 01       	movw	r30, r28
    2700:	e7 55       	subi	r30, 0x57	; 87
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	91 81       	ldd	r25, Z+1	; 0x01
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <start+0x60e>
    270c:	fe 01       	movw	r30, r28
    270e:	e7 55       	subi	r30, 0x57	; 87
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	91 83       	std	Z+1, r25	; 0x01
    2714:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);

		if(passwordVerified)
    2716:	fe 01       	movw	r30, r28
    2718:	ec 51       	subi	r30, 0x1C	; 28
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	80 81       	ld	r24, Z
    271e:	88 23       	and	r24, r24
    2720:	39 f0       	breq	.+14     	; 0x2730 <start+0x636>
		{
			LCD_clearScreen();
    2722:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
			LCD_displayString("Right Password");
    2726:	8e e7       	ldi	r24, 0x7E	; 126
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>
    272e:	06 c0       	rjmp	.+12     	; 0x273c <start+0x642>
		}

		else
		{
			LCD_clearScreen();
    2730:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    2734:	8d e8       	ldi	r24, 0x8D	; 141
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>
    273c:	fe 01       	movw	r30, r28
    273e:	eb 55       	subi	r30, 0x5B	; 91
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	90 e8       	ldi	r25, 0x80	; 128
    2746:	ab e3       	ldi	r26, 0x3B	; 59
    2748:	b5 e4       	ldi	r27, 0x45	; 69
    274a:	80 83       	st	Z, r24
    274c:	91 83       	std	Z+1, r25	; 0x01
    274e:	a2 83       	std	Z+2, r26	; 0x02
    2750:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2752:	8e 01       	movw	r16, r28
    2754:	0f 55       	subi	r16, 0x5F	; 95
    2756:	1f 4f       	sbci	r17, 0xFF	; 255
    2758:	fe 01       	movw	r30, r28
    275a:	eb 55       	subi	r30, 0x5B	; 91
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	60 81       	ld	r22, Z
    2760:	71 81       	ldd	r23, Z+1	; 0x01
    2762:	82 81       	ldd	r24, Z+2	; 0x02
    2764:	93 81       	ldd	r25, Z+3	; 0x03
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	4a ef       	ldi	r20, 0xFA	; 250
    276c:	54 e4       	ldi	r21, 0x44	; 68
    276e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	f8 01       	movw	r30, r16
    2778:	80 83       	st	Z, r24
    277a:	91 83       	std	Z+1, r25	; 0x01
    277c:	a2 83       	std	Z+2, r26	; 0x02
    277e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2780:	fe 01       	movw	r30, r28
    2782:	ef 55       	subi	r30, 0x5F	; 95
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	60 81       	ld	r22, Z
    2788:	71 81       	ldd	r23, Z+1	; 0x01
    278a:	82 81       	ldd	r24, Z+2	; 0x02
    278c:	93 81       	ldd	r25, Z+3	; 0x03
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e8       	ldi	r20, 0x80	; 128
    2794:	5f e3       	ldi	r21, 0x3F	; 63
    2796:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    279a:	88 23       	and	r24, r24
    279c:	44 f4       	brge	.+16     	; 0x27ae <start+0x6b4>
		__ticks = 1;
    279e:	fe 01       	movw	r30, r28
    27a0:	e1 56       	subi	r30, 0x61	; 97
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	91 83       	std	Z+1, r25	; 0x01
    27aa:	80 83       	st	Z, r24
    27ac:	64 c0       	rjmp	.+200    	; 0x2876 <start+0x77c>
	else if (__tmp > 65535)
    27ae:	fe 01       	movw	r30, r28
    27b0:	ef 55       	subi	r30, 0x5F	; 95
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	60 81       	ld	r22, Z
    27b6:	71 81       	ldd	r23, Z+1	; 0x01
    27b8:	82 81       	ldd	r24, Z+2	; 0x02
    27ba:	93 81       	ldd	r25, Z+3	; 0x03
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	3f ef       	ldi	r19, 0xFF	; 255
    27c0:	4f e7       	ldi	r20, 0x7F	; 127
    27c2:	57 e4       	ldi	r21, 0x47	; 71
    27c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27c8:	18 16       	cp	r1, r24
    27ca:	0c f0       	brlt	.+2      	; 0x27ce <start+0x6d4>
    27cc:	43 c0       	rjmp	.+134    	; 0x2854 <start+0x75a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ce:	fe 01       	movw	r30, r28
    27d0:	eb 55       	subi	r30, 0x5B	; 91
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	60 81       	ld	r22, Z
    27d6:	71 81       	ldd	r23, Z+1	; 0x01
    27d8:	82 81       	ldd	r24, Z+2	; 0x02
    27da:	93 81       	ldd	r25, Z+3	; 0x03
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e2       	ldi	r20, 0x20	; 32
    27e2:	51 e4       	ldi	r21, 0x41	; 65
    27e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	8e 01       	movw	r16, r28
    27ee:	01 56       	subi	r16, 0x61	; 97
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	bc 01       	movw	r22, r24
    27f4:	cd 01       	movw	r24, r26
    27f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	f8 01       	movw	r30, r16
    2800:	91 83       	std	Z+1, r25	; 0x01
    2802:	80 83       	st	Z, r24
    2804:	1f c0       	rjmp	.+62     	; 0x2844 <start+0x74a>
    2806:	fe 01       	movw	r30, r28
    2808:	e3 56       	subi	r30, 0x63	; 99
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	88 ec       	ldi	r24, 0xC8	; 200
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	91 83       	std	Z+1, r25	; 0x01
    2812:	80 83       	st	Z, r24
    2814:	fe 01       	movw	r30, r28
    2816:	e3 56       	subi	r30, 0x63	; 99
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	80 81       	ld	r24, Z
    281c:	91 81       	ldd	r25, Z+1	; 0x01
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <start+0x724>
    2822:	fe 01       	movw	r30, r28
    2824:	e3 56       	subi	r30, 0x63	; 99
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	91 83       	std	Z+1, r25	; 0x01
    282a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282c:	de 01       	movw	r26, r28
    282e:	a1 56       	subi	r26, 0x61	; 97
    2830:	bf 4f       	sbci	r27, 0xFF	; 255
    2832:	fe 01       	movw	r30, r28
    2834:	e1 56       	subi	r30, 0x61	; 97
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 81       	ld	r24, Z
    283a:	91 81       	ldd	r25, Z+1	; 0x01
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	11 96       	adiw	r26, 0x01	; 1
    2840:	9c 93       	st	X, r25
    2842:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2844:	fe 01       	movw	r30, r28
    2846:	e1 56       	subi	r30, 0x61	; 97
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	80 81       	ld	r24, Z
    284c:	91 81       	ldd	r25, Z+1	; 0x01
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	d1 f6       	brne	.-76     	; 0x2806 <start+0x70c>
    2852:	28 c0       	rjmp	.+80     	; 0x28a4 <start+0x7aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2854:	8e 01       	movw	r16, r28
    2856:	01 56       	subi	r16, 0x61	; 97
    2858:	1f 4f       	sbci	r17, 0xFF	; 255
    285a:	fe 01       	movw	r30, r28
    285c:	ef 55       	subi	r30, 0x5F	; 95
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	60 81       	ld	r22, Z
    2862:	71 81       	ldd	r23, Z+1	; 0x01
    2864:	82 81       	ldd	r24, Z+2	; 0x02
    2866:	93 81       	ldd	r25, Z+3	; 0x03
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	f8 01       	movw	r30, r16
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	80 83       	st	Z, r24
    2876:	de 01       	movw	r26, r28
    2878:	a5 56       	subi	r26, 0x65	; 101
    287a:	bf 4f       	sbci	r27, 0xFF	; 255
    287c:	fe 01       	movw	r30, r28
    287e:	e1 56       	subi	r30, 0x61	; 97
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	80 81       	ld	r24, Z
    2884:	91 81       	ldd	r25, Z+1	; 0x01
    2886:	11 96       	adiw	r26, 0x01	; 1
    2888:	9c 93       	st	X, r25
    288a:	8e 93       	st	-X, r24
    288c:	fe 01       	movw	r30, r28
    288e:	e5 56       	subi	r30, 0x65	; 101
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 81       	ld	r24, Z
    2894:	91 81       	ldd	r25, Z+1	; 0x01
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	f1 f7       	brne	.-4      	; 0x2896 <start+0x79c>
    289a:	fe 01       	movw	r30, r28
    289c:	e5 56       	subi	r30, 0x65	; 101
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	91 83       	std	Z+1, r25	; 0x01
    28a2:	80 83       	st	Z, r24
	//initialize the LCD
	LCD_init();
	//initialize the UART
	UART_init(&Config);
	uint8 password[5] , confirmPassword[5] , passwordVerified , command ;
	while(passwordVerified == 0)
    28a4:	fe 01       	movw	r30, r28
    28a6:	ec 51       	subi	r30, 0x1C	; 28
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	80 81       	ld	r24, Z
    28ac:	88 23       	and	r24, r24
    28ae:	09 f4       	brne	.+2      	; 0x28b2 <start+0x7b8>
    28b0:	3f cc       	rjmp	.-1922   	; 0x2130 <start+0x36>

	}

	while(1)
	{
		optionsDisplay();
    28b2:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <optionsDisplay>
		command = KEYPAD_getPressedKey();
    28b6:	0e 94 17 07 	call	0xe2e	; 0xe2e <KEYPAD_getPressedKey>
    28ba:	fe 01       	movw	r30, r28
    28bc:	ed 51       	subi	r30, 0x1D	; 29
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 83       	st	Z, r24
    28c2:	fe 01       	movw	r30, r28
    28c4:	e9 56       	subi	r30, 0x69	; 105
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	aa ef       	ldi	r26, 0xFA	; 250
    28ce:	b3 e4       	ldi	r27, 0x43	; 67
    28d0:	80 83       	st	Z, r24
    28d2:	91 83       	std	Z+1, r25	; 0x01
    28d4:	a2 83       	std	Z+2, r26	; 0x02
    28d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d8:	8e 01       	movw	r16, r28
    28da:	0d 56       	subi	r16, 0x6D	; 109
    28dc:	1f 4f       	sbci	r17, 0xFF	; 255
    28de:	fe 01       	movw	r30, r28
    28e0:	e9 56       	subi	r30, 0x69	; 105
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	60 81       	ld	r22, Z
    28e6:	71 81       	ldd	r23, Z+1	; 0x01
    28e8:	82 81       	ldd	r24, Z+2	; 0x02
    28ea:	93 81       	ldd	r25, Z+3	; 0x03
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	4a ef       	ldi	r20, 0xFA	; 250
    28f2:	54 e4       	ldi	r21, 0x44	; 68
    28f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	f8 01       	movw	r30, r16
    28fe:	80 83       	st	Z, r24
    2900:	91 83       	std	Z+1, r25	; 0x01
    2902:	a2 83       	std	Z+2, r26	; 0x02
    2904:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2906:	fe 01       	movw	r30, r28
    2908:	ed 56       	subi	r30, 0x6D	; 109
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	60 81       	ld	r22, Z
    290e:	71 81       	ldd	r23, Z+1	; 0x01
    2910:	82 81       	ldd	r24, Z+2	; 0x02
    2912:	93 81       	ldd	r25, Z+3	; 0x03
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e8       	ldi	r20, 0x80	; 128
    291a:	5f e3       	ldi	r21, 0x3F	; 63
    291c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2920:	88 23       	and	r24, r24
    2922:	44 f4       	brge	.+16     	; 0x2934 <start+0x83a>
		__ticks = 1;
    2924:	fe 01       	movw	r30, r28
    2926:	ef 56       	subi	r30, 0x6F	; 111
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	91 83       	std	Z+1, r25	; 0x01
    2930:	80 83       	st	Z, r24
    2932:	64 c0       	rjmp	.+200    	; 0x29fc <start+0x902>
	else if (__tmp > 65535)
    2934:	fe 01       	movw	r30, r28
    2936:	ed 56       	subi	r30, 0x6D	; 109
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	60 81       	ld	r22, Z
    293c:	71 81       	ldd	r23, Z+1	; 0x01
    293e:	82 81       	ldd	r24, Z+2	; 0x02
    2940:	93 81       	ldd	r25, Z+3	; 0x03
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	3f ef       	ldi	r19, 0xFF	; 255
    2946:	4f e7       	ldi	r20, 0x7F	; 127
    2948:	57 e4       	ldi	r21, 0x47	; 71
    294a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    294e:	18 16       	cp	r1, r24
    2950:	0c f0       	brlt	.+2      	; 0x2954 <start+0x85a>
    2952:	43 c0       	rjmp	.+134    	; 0x29da <start+0x8e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2954:	fe 01       	movw	r30, r28
    2956:	e9 56       	subi	r30, 0x69	; 105
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	60 81       	ld	r22, Z
    295c:	71 81       	ldd	r23, Z+1	; 0x01
    295e:	82 81       	ldd	r24, Z+2	; 0x02
    2960:	93 81       	ldd	r25, Z+3	; 0x03
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e2       	ldi	r20, 0x20	; 32
    2968:	51 e4       	ldi	r21, 0x41	; 65
    296a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	8e 01       	movw	r16, r28
    2974:	0f 56       	subi	r16, 0x6F	; 111
    2976:	1f 4f       	sbci	r17, 0xFF	; 255
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	f8 01       	movw	r30, r16
    2986:	91 83       	std	Z+1, r25	; 0x01
    2988:	80 83       	st	Z, r24
    298a:	1f c0       	rjmp	.+62     	; 0x29ca <start+0x8d0>
    298c:	fe 01       	movw	r30, r28
    298e:	e1 57       	subi	r30, 0x71	; 113
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	88 ec       	ldi	r24, 0xC8	; 200
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
    299a:	fe 01       	movw	r30, r28
    299c:	e1 57       	subi	r30, 0x71	; 113
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 81       	ld	r24, Z
    29a2:	91 81       	ldd	r25, Z+1	; 0x01
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <start+0x8aa>
    29a8:	fe 01       	movw	r30, r28
    29aa:	e1 57       	subi	r30, 0x71	; 113
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b2:	de 01       	movw	r26, r28
    29b4:	af 56       	subi	r26, 0x6F	; 111
    29b6:	bf 4f       	sbci	r27, 0xFF	; 255
    29b8:	fe 01       	movw	r30, r28
    29ba:	ef 56       	subi	r30, 0x6F	; 111
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 81       	ld	r24, Z
    29c0:	91 81       	ldd	r25, Z+1	; 0x01
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	11 96       	adiw	r26, 0x01	; 1
    29c6:	9c 93       	st	X, r25
    29c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ca:	fe 01       	movw	r30, r28
    29cc:	ef 56       	subi	r30, 0x6F	; 111
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	80 81       	ld	r24, Z
    29d2:	91 81       	ldd	r25, Z+1	; 0x01
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	d1 f6       	brne	.-76     	; 0x298c <start+0x892>
    29d8:	27 c0       	rjmp	.+78     	; 0x2a28 <start+0x92e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29da:	8e 01       	movw	r16, r28
    29dc:	0f 56       	subi	r16, 0x6F	; 111
    29de:	1f 4f       	sbci	r17, 0xFF	; 255
    29e0:	fe 01       	movw	r30, r28
    29e2:	ed 56       	subi	r30, 0x6D	; 109
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	60 81       	ld	r22, Z
    29e8:	71 81       	ldd	r23, Z+1	; 0x01
    29ea:	82 81       	ldd	r24, Z+2	; 0x02
    29ec:	93 81       	ldd	r25, Z+3	; 0x03
    29ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	f8 01       	movw	r30, r16
    29f8:	91 83       	std	Z+1, r25	; 0x01
    29fa:	80 83       	st	Z, r24
    29fc:	de 01       	movw	r26, r28
    29fe:	a3 57       	subi	r26, 0x73	; 115
    2a00:	bf 4f       	sbci	r27, 0xFF	; 255
    2a02:	fe 01       	movw	r30, r28
    2a04:	ef 56       	subi	r30, 0x6F	; 111
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	80 81       	ld	r24, Z
    2a0a:	91 81       	ldd	r25, Z+1	; 0x01
    2a0c:	8d 93       	st	X+, r24
    2a0e:	9c 93       	st	X, r25
    2a10:	fe 01       	movw	r30, r28
    2a12:	e3 57       	subi	r30, 0x73	; 115
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	80 81       	ld	r24, Z
    2a18:	91 81       	ldd	r25, Z+1	; 0x01
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <start+0x920>
    2a1e:	fe 01       	movw	r30, r28
    2a20:	e3 57       	subi	r30, 0x73	; 115
    2a22:	ff 4f       	sbci	r31, 0xFF	; 255
    2a24:	91 83       	std	Z+1, r25	; 0x01
    2a26:	80 83       	st	Z, r24
		_delay_ms(KEYPAD_DELAY);
		UART_sendByte(command);
    2a28:	fe 01       	movw	r30, r28
    2a2a:	ed 51       	subi	r30, 0x1D	; 29
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 81       	ld	r24, Z
    2a30:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
    2a34:	fe 01       	movw	r30, r28
    2a36:	e7 57       	subi	r30, 0x77	; 119
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	a8 e4       	ldi	r26, 0x48	; 72
    2a40:	b2 e4       	ldi	r27, 0x42	; 66
    2a42:	80 83       	st	Z, r24
    2a44:	91 83       	std	Z+1, r25	; 0x01
    2a46:	a2 83       	std	Z+2, r26	; 0x02
    2a48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4a:	8e 01       	movw	r16, r28
    2a4c:	0b 57       	subi	r16, 0x7B	; 123
    2a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a50:	fe 01       	movw	r30, r28
    2a52:	e7 57       	subi	r30, 0x77	; 119
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	60 81       	ld	r22, Z
    2a58:	71 81       	ldd	r23, Z+1	; 0x01
    2a5a:	82 81       	ldd	r24, Z+2	; 0x02
    2a5c:	93 81       	ldd	r25, Z+3	; 0x03
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	4a ef       	ldi	r20, 0xFA	; 250
    2a64:	54 e4       	ldi	r21, 0x44	; 68
    2a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	f8 01       	movw	r30, r16
    2a70:	80 83       	st	Z, r24
    2a72:	91 83       	std	Z+1, r25	; 0x01
    2a74:	a2 83       	std	Z+2, r26	; 0x02
    2a76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a78:	fe 01       	movw	r30, r28
    2a7a:	eb 57       	subi	r30, 0x7B	; 123
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	60 81       	ld	r22, Z
    2a80:	71 81       	ldd	r23, Z+1	; 0x01
    2a82:	82 81       	ldd	r24, Z+2	; 0x02
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e8       	ldi	r20, 0x80	; 128
    2a8c:	5f e3       	ldi	r21, 0x3F	; 63
    2a8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a92:	88 23       	and	r24, r24
    2a94:	44 f4       	brge	.+16     	; 0x2aa6 <start+0x9ac>
		__ticks = 1;
    2a96:	fe 01       	movw	r30, r28
    2a98:	ed 57       	subi	r30, 0x7D	; 125
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
    2aa4:	64 c0       	rjmp	.+200    	; 0x2b6e <start+0xa74>
	else if (__tmp > 65535)
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	eb 57       	subi	r30, 0x7B	; 123
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	60 81       	ld	r22, Z
    2aae:	71 81       	ldd	r23, Z+1	; 0x01
    2ab0:	82 81       	ldd	r24, Z+2	; 0x02
    2ab2:	93 81       	ldd	r25, Z+3	; 0x03
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	3f ef       	ldi	r19, 0xFF	; 255
    2ab8:	4f e7       	ldi	r20, 0x7F	; 127
    2aba:	57 e4       	ldi	r21, 0x47	; 71
    2abc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac0:	18 16       	cp	r1, r24
    2ac2:	0c f0       	brlt	.+2      	; 0x2ac6 <start+0x9cc>
    2ac4:	43 c0       	rjmp	.+134    	; 0x2b4c <start+0xa52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e7 57       	subi	r30, 0x77	; 119
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	60 81       	ld	r22, Z
    2ace:	71 81       	ldd	r23, Z+1	; 0x01
    2ad0:	82 81       	ldd	r24, Z+2	; 0x02
    2ad2:	93 81       	ldd	r25, Z+3	; 0x03
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e2       	ldi	r20, 0x20	; 32
    2ada:	51 e4       	ldi	r21, 0x41	; 65
    2adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	8e 01       	movw	r16, r28
    2ae6:	0d 57       	subi	r16, 0x7D	; 125
    2ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aea:	bc 01       	movw	r22, r24
    2aec:	cd 01       	movw	r24, r26
    2aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	f8 01       	movw	r30, r16
    2af8:	91 83       	std	Z+1, r25	; 0x01
    2afa:	80 83       	st	Z, r24
    2afc:	1f c0       	rjmp	.+62     	; 0x2b3c <start+0xa42>
    2afe:	fe 01       	movw	r30, r28
    2b00:	ef 57       	subi	r30, 0x7F	; 127
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	88 ec       	ldi	r24, 0xC8	; 200
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	91 83       	std	Z+1, r25	; 0x01
    2b0a:	80 83       	st	Z, r24
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	ef 57       	subi	r30, 0x7F	; 127
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	80 81       	ld	r24, Z
    2b14:	91 81       	ldd	r25, Z+1	; 0x01
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <start+0xa1c>
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	ef 57       	subi	r30, 0x7F	; 127
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b24:	de 01       	movw	r26, r28
    2b26:	ad 57       	subi	r26, 0x7D	; 125
    2b28:	bf 4f       	sbci	r27, 0xFF	; 255
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	ed 57       	subi	r30, 0x7D	; 125
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 81       	ld	r24, Z
    2b32:	91 81       	ldd	r25, Z+1	; 0x01
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	11 96       	adiw	r26, 0x01	; 1
    2b38:	9c 93       	st	X, r25
    2b3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	ed 57       	subi	r30, 0x7D	; 125
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 81       	ld	r24, Z
    2b44:	91 81       	ldd	r25, Z+1	; 0x01
    2b46:	00 97       	sbiw	r24, 0x00	; 0
    2b48:	d1 f6       	brne	.-76     	; 0x2afe <start+0xa04>
    2b4a:	28 c0       	rjmp	.+80     	; 0x2b9c <start+0xaa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b4c:	8e 01       	movw	r16, r28
    2b4e:	0d 57       	subi	r16, 0x7D	; 125
    2b50:	1f 4f       	sbci	r17, 0xFF	; 255
    2b52:	fe 01       	movw	r30, r28
    2b54:	eb 57       	subi	r30, 0x7B	; 123
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	60 81       	ld	r22, Z
    2b5a:	71 81       	ldd	r23, Z+1	; 0x01
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	93 81       	ldd	r25, Z+3	; 0x03
    2b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	f8 01       	movw	r30, r16
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24
    2b6e:	de 01       	movw	r26, r28
    2b70:	a1 58       	subi	r26, 0x81	; 129
    2b72:	bf 4f       	sbci	r27, 0xFF	; 255
    2b74:	fe 01       	movw	r30, r28
    2b76:	ed 57       	subi	r30, 0x7D	; 125
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	80 81       	ld	r24, Z
    2b7c:	91 81       	ldd	r25, Z+1	; 0x01
    2b7e:	11 96       	adiw	r26, 0x01	; 1
    2b80:	9c 93       	st	X, r25
    2b82:	8e 93       	st	-X, r24
    2b84:	fe 01       	movw	r30, r28
    2b86:	e1 58       	subi	r30, 0x81	; 129
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	80 81       	ld	r24, Z
    2b8c:	91 81       	ldd	r25, Z+1	; 0x01
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <start+0xa94>
    2b92:	fe 01       	movw	r30, r28
    2b94:	e1 58       	subi	r30, 0x81	; 129
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	91 83       	std	Z+1, r25	; 0x01
    2b9a:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);
		if(command == '+')
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	ed 51       	subi	r30, 0x1D	; 29
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	80 81       	ld	r24, Z
    2ba4:	8b 32       	cpi	r24, 0x2B	; 43
    2ba6:	09 f0       	breq	.+2      	; 0x2baa <start+0xab0>
    2ba8:	a0 c1       	rjmp	.+832    	; 0x2eea <start+0xdf0>
		{
			LCD_clearScreen();
    2baa:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
			LCD_displayString("Plz enter pass:");
    2bae:	80 e6       	ldi	r24, 0x60	; 96
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>
			enterPassword(password);
    2bb6:	ce 01       	movw	r24, r28
    2bb8:	8b 51       	subi	r24, 0x1B	; 27
    2bba:	9f 4f       	sbci	r25, 0xFF	; 255
    2bbc:	0e 94 a5 1b 	call	0x374a	; 0x374a <enterPassword>
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e5 58       	subi	r30, 0x85	; 133
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	a8 e4       	ldi	r26, 0x48	; 72
    2bcc:	b2 e4       	ldi	r27, 0x42	; 66
    2bce:	80 83       	st	Z, r24
    2bd0:	91 83       	std	Z+1, r25	; 0x01
    2bd2:	a2 83       	std	Z+2, r26	; 0x02
    2bd4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd6:	8e 01       	movw	r16, r28
    2bd8:	09 58       	subi	r16, 0x89	; 137
    2bda:	1f 4f       	sbci	r17, 0xFF	; 255
    2bdc:	fe 01       	movw	r30, r28
    2bde:	e5 58       	subi	r30, 0x85	; 133
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	60 81       	ld	r22, Z
    2be4:	71 81       	ldd	r23, Z+1	; 0x01
    2be6:	82 81       	ldd	r24, Z+2	; 0x02
    2be8:	93 81       	ldd	r25, Z+3	; 0x03
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	4a ef       	ldi	r20, 0xFA	; 250
    2bf0:	54 e4       	ldi	r21, 0x44	; 68
    2bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	f8 01       	movw	r30, r16
    2bfc:	80 83       	st	Z, r24
    2bfe:	91 83       	std	Z+1, r25	; 0x01
    2c00:	a2 83       	std	Z+2, r26	; 0x02
    2c02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c04:	fe 01       	movw	r30, r28
    2c06:	e9 58       	subi	r30, 0x89	; 137
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	60 81       	ld	r22, Z
    2c0c:	71 81       	ldd	r23, Z+1	; 0x01
    2c0e:	82 81       	ldd	r24, Z+2	; 0x02
    2c10:	93 81       	ldd	r25, Z+3	; 0x03
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e8       	ldi	r20, 0x80	; 128
    2c18:	5f e3       	ldi	r21, 0x3F	; 63
    2c1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c1e:	88 23       	and	r24, r24
    2c20:	44 f4       	brge	.+16     	; 0x2c32 <start+0xb38>
		__ticks = 1;
    2c22:	fe 01       	movw	r30, r28
    2c24:	eb 58       	subi	r30, 0x8B	; 139
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	91 83       	std	Z+1, r25	; 0x01
    2c2e:	80 83       	st	Z, r24
    2c30:	64 c0       	rjmp	.+200    	; 0x2cfa <start+0xc00>
	else if (__tmp > 65535)
    2c32:	fe 01       	movw	r30, r28
    2c34:	e9 58       	subi	r30, 0x89	; 137
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	60 81       	ld	r22, Z
    2c3a:	71 81       	ldd	r23, Z+1	; 0x01
    2c3c:	82 81       	ldd	r24, Z+2	; 0x02
    2c3e:	93 81       	ldd	r25, Z+3	; 0x03
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	3f ef       	ldi	r19, 0xFF	; 255
    2c44:	4f e7       	ldi	r20, 0x7F	; 127
    2c46:	57 e4       	ldi	r21, 0x47	; 71
    2c48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c4c:	18 16       	cp	r1, r24
    2c4e:	0c f0       	brlt	.+2      	; 0x2c52 <start+0xb58>
    2c50:	43 c0       	rjmp	.+134    	; 0x2cd8 <start+0xbde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c52:	fe 01       	movw	r30, r28
    2c54:	e5 58       	subi	r30, 0x85	; 133
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	60 81       	ld	r22, Z
    2c5a:	71 81       	ldd	r23, Z+1	; 0x01
    2c5c:	82 81       	ldd	r24, Z+2	; 0x02
    2c5e:	93 81       	ldd	r25, Z+3	; 0x03
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e2       	ldi	r20, 0x20	; 32
    2c66:	51 e4       	ldi	r21, 0x41	; 65
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	8e 01       	movw	r16, r28
    2c72:	0b 58       	subi	r16, 0x8B	; 139
    2c74:	1f 4f       	sbci	r17, 0xFF	; 255
    2c76:	bc 01       	movw	r22, r24
    2c78:	cd 01       	movw	r24, r26
    2c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	f8 01       	movw	r30, r16
    2c84:	91 83       	std	Z+1, r25	; 0x01
    2c86:	80 83       	st	Z, r24
    2c88:	1f c0       	rjmp	.+62     	; 0x2cc8 <start+0xbce>
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	ed 58       	subi	r30, 0x8D	; 141
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	88 ec       	ldi	r24, 0xC8	; 200
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	91 83       	std	Z+1, r25	; 0x01
    2c96:	80 83       	st	Z, r24
    2c98:	fe 01       	movw	r30, r28
    2c9a:	ed 58       	subi	r30, 0x8D	; 141
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	80 81       	ld	r24, Z
    2ca0:	91 81       	ldd	r25, Z+1	; 0x01
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <start+0xba8>
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	ed 58       	subi	r30, 0x8D	; 141
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	91 83       	std	Z+1, r25	; 0x01
    2cae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb0:	de 01       	movw	r26, r28
    2cb2:	ab 58       	subi	r26, 0x8B	; 139
    2cb4:	bf 4f       	sbci	r27, 0xFF	; 255
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	eb 58       	subi	r30, 0x8B	; 139
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	80 81       	ld	r24, Z
    2cbe:	91 81       	ldd	r25, Z+1	; 0x01
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	11 96       	adiw	r26, 0x01	; 1
    2cc4:	9c 93       	st	X, r25
    2cc6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc8:	fe 01       	movw	r30, r28
    2cca:	eb 58       	subi	r30, 0x8B	; 139
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	80 81       	ld	r24, Z
    2cd0:	91 81       	ldd	r25, Z+1	; 0x01
    2cd2:	00 97       	sbiw	r24, 0x00	; 0
    2cd4:	d1 f6       	brne	.-76     	; 0x2c8a <start+0xb90>
    2cd6:	27 c0       	rjmp	.+78     	; 0x2d26 <start+0xc2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd8:	8e 01       	movw	r16, r28
    2cda:	0b 58       	subi	r16, 0x8B	; 139
    2cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e9 58       	subi	r30, 0x89	; 137
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	60 81       	ld	r22, Z
    2ce6:	71 81       	ldd	r23, Z+1	; 0x01
    2ce8:	82 81       	ldd	r24, Z+2	; 0x02
    2cea:	93 81       	ldd	r25, Z+3	; 0x03
    2cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	f8 01       	movw	r30, r16
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	80 83       	st	Z, r24
    2cfa:	de 01       	movw	r26, r28
    2cfc:	af 58       	subi	r26, 0x8F	; 143
    2cfe:	bf 4f       	sbci	r27, 0xFF	; 255
    2d00:	fe 01       	movw	r30, r28
    2d02:	eb 58       	subi	r30, 0x8B	; 139
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	80 81       	ld	r24, Z
    2d08:	91 81       	ldd	r25, Z+1	; 0x01
    2d0a:	8d 93       	st	X+, r24
    2d0c:	9c 93       	st	X, r25
    2d0e:	fe 01       	movw	r30, r28
    2d10:	ef 58       	subi	r30, 0x8F	; 143
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	80 81       	ld	r24, Z
    2d16:	91 81       	ldd	r25, Z+1	; 0x01
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <start+0xc1e>
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	ef 58       	subi	r30, 0x8F	; 143
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24
			_delay_ms(UART_DELAY);
			sendPassword(password);
    2d26:	ce 01       	movw	r24, r28
    2d28:	8b 51       	subi	r24, 0x1B	; 27
    2d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2c:	0e 94 c5 1c 	call	0x398a	; 0x398a <sendPassword>
			passwordVerified = 0;
    2d30:	fe 01       	movw	r30, r28
    2d32:	ec 51       	subi	r30, 0x1C	; 28
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	10 82       	st	Z, r1
			passwordVerified = UART_recieveByte();
    2d38:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	ec 51       	subi	r30, 0x1C	; 28
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	80 83       	st	Z, r24
			if(passwordVerified)
    2d44:	fe 01       	movw	r30, r28
    2d46:	ec 51       	subi	r30, 0x1C	; 28
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	80 81       	ld	r24, Z
    2d4c:	88 23       	and	r24, r24
    2d4e:	19 f0       	breq	.+6      	; 0x2d56 <start+0xc5c>
			{
				openDoor();
    2d50:	0e 94 76 1d 	call	0x3aec	; 0x3aec <openDoor>
    2d54:	ae cd       	rjmp	.-1188   	; 0x28b2 <start+0x7b8>
			}

			else
			{
				uint8 falsePasswordCounter = UART_recieveByte();
    2d56:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	ee 51       	subi	r30, 0x1E	; 30
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	80 83       	st	Z, r24
				if(falsePasswordCounter >=3)
    2d62:	fe 01       	movw	r30, r28
    2d64:	ee 51       	subi	r30, 0x1E	; 30
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 81       	ld	r24, Z
    2d6a:	83 30       	cpi	r24, 0x03	; 3
    2d6c:	18 f0       	brcs	.+6      	; 0x2d74 <start+0xc7a>
				{
					securityAlarm();
    2d6e:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <securityAlarm>
    2d72:	9f cd       	rjmp	.-1218   	; 0x28b2 <start+0x7b8>
				}

				else
				{
					LCD_clearScreen();
    2d74:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    2d78:	8d e8       	ldi	r24, 0x8D	; 141
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>
    2d80:	fe 01       	movw	r30, r28
    2d82:	e3 59       	subi	r30, 0x93	; 147
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	90 e4       	ldi	r25, 0x40	; 64
    2d8a:	ac e1       	ldi	r26, 0x1C	; 28
    2d8c:	b5 e4       	ldi	r27, 0x45	; 69
    2d8e:	80 83       	st	Z, r24
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	a2 83       	std	Z+2, r26	; 0x02
    2d94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d96:	8e 01       	movw	r16, r28
    2d98:	07 59       	subi	r16, 0x97	; 151
    2d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e3 59       	subi	r30, 0x93	; 147
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	60 81       	ld	r22, Z
    2da4:	71 81       	ldd	r23, Z+1	; 0x01
    2da6:	82 81       	ldd	r24, Z+2	; 0x02
    2da8:	93 81       	ldd	r25, Z+3	; 0x03
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	4a ef       	ldi	r20, 0xFA	; 250
    2db0:	54 e4       	ldi	r21, 0x44	; 68
    2db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	f8 01       	movw	r30, r16
    2dbc:	80 83       	st	Z, r24
    2dbe:	91 83       	std	Z+1, r25	; 0x01
    2dc0:	a2 83       	std	Z+2, r26	; 0x02
    2dc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e7 59       	subi	r30, 0x97	; 151
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	60 81       	ld	r22, Z
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e8       	ldi	r20, 0x80	; 128
    2dd8:	5f e3       	ldi	r21, 0x3F	; 63
    2dda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dde:	88 23       	and	r24, r24
    2de0:	44 f4       	brge	.+16     	; 0x2df2 <start+0xcf8>
		__ticks = 1;
    2de2:	fe 01       	movw	r30, r28
    2de4:	e9 59       	subi	r30, 0x99	; 153
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	80 83       	st	Z, r24
    2df0:	64 c0       	rjmp	.+200    	; 0x2eba <start+0xdc0>
	else if (__tmp > 65535)
    2df2:	fe 01       	movw	r30, r28
    2df4:	e7 59       	subi	r30, 0x97	; 151
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	3f ef       	ldi	r19, 0xFF	; 255
    2e04:	4f e7       	ldi	r20, 0x7F	; 127
    2e06:	57 e4       	ldi	r21, 0x47	; 71
    2e08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e0c:	18 16       	cp	r1, r24
    2e0e:	0c f0       	brlt	.+2      	; 0x2e12 <start+0xd18>
    2e10:	43 c0       	rjmp	.+134    	; 0x2e98 <start+0xd9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e12:	fe 01       	movw	r30, r28
    2e14:	e3 59       	subi	r30, 0x93	; 147
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	82 81       	ldd	r24, Z+2	; 0x02
    2e1e:	93 81       	ldd	r25, Z+3	; 0x03
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e2       	ldi	r20, 0x20	; 32
    2e26:	51 e4       	ldi	r21, 0x41	; 65
    2e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	8e 01       	movw	r16, r28
    2e32:	09 59       	subi	r16, 0x99	; 153
    2e34:	1f 4f       	sbci	r17, 0xFF	; 255
    2e36:	bc 01       	movw	r22, r24
    2e38:	cd 01       	movw	r24, r26
    2e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	f8 01       	movw	r30, r16
    2e44:	91 83       	std	Z+1, r25	; 0x01
    2e46:	80 83       	st	Z, r24
    2e48:	1f c0       	rjmp	.+62     	; 0x2e88 <start+0xd8e>
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	eb 59       	subi	r30, 0x9B	; 155
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	88 ec       	ldi	r24, 0xC8	; 200
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	91 83       	std	Z+1, r25	; 0x01
    2e56:	80 83       	st	Z, r24
    2e58:	fe 01       	movw	r30, r28
    2e5a:	eb 59       	subi	r30, 0x9B	; 155
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	80 81       	ld	r24, Z
    2e60:	91 81       	ldd	r25, Z+1	; 0x01
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	f1 f7       	brne	.-4      	; 0x2e62 <start+0xd68>
    2e66:	fe 01       	movw	r30, r28
    2e68:	eb 59       	subi	r30, 0x9B	; 155
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e70:	de 01       	movw	r26, r28
    2e72:	a9 59       	subi	r26, 0x99	; 153
    2e74:	bf 4f       	sbci	r27, 0xFF	; 255
    2e76:	fe 01       	movw	r30, r28
    2e78:	e9 59       	subi	r30, 0x99	; 153
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	80 81       	ld	r24, Z
    2e7e:	91 81       	ldd	r25, Z+1	; 0x01
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	11 96       	adiw	r26, 0x01	; 1
    2e84:	9c 93       	st	X, r25
    2e86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e9 59       	subi	r30, 0x99	; 153
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	80 81       	ld	r24, Z
    2e90:	91 81       	ldd	r25, Z+1	; 0x01
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	d1 f6       	brne	.-76     	; 0x2e4a <start+0xd50>
    2e96:	0d cd       	rjmp	.-1510   	; 0x28b2 <start+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e98:	8e 01       	movw	r16, r28
    2e9a:	09 59       	subi	r16, 0x99	; 153
    2e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e7 59       	subi	r30, 0x97	; 151
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	60 81       	ld	r22, Z
    2ea6:	71 81       	ldd	r23, Z+1	; 0x01
    2ea8:	82 81       	ldd	r24, Z+2	; 0x02
    2eaa:	93 81       	ldd	r25, Z+3	; 0x03
    2eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	f8 01       	movw	r30, r16
    2eb6:	91 83       	std	Z+1, r25	; 0x01
    2eb8:	80 83       	st	Z, r24
    2eba:	de 01       	movw	r26, r28
    2ebc:	ad 59       	subi	r26, 0x9D	; 157
    2ebe:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e9 59       	subi	r30, 0x99	; 153
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 81       	ld	r24, Z
    2ec8:	91 81       	ldd	r25, Z+1	; 0x01
    2eca:	11 96       	adiw	r26, 0x01	; 1
    2ecc:	9c 93       	st	X, r25
    2ece:	8e 93       	st	-X, r24
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	ed 59       	subi	r30, 0x9D	; 157
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	80 81       	ld	r24, Z
    2ed8:	91 81       	ldd	r25, Z+1	; 0x01
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	f1 f7       	brne	.-4      	; 0x2eda <start+0xde0>
    2ede:	fe 01       	movw	r30, r28
    2ee0:	ed 59       	subi	r30, 0x9D	; 157
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	91 83       	std	Z+1, r25	; 0x01
    2ee6:	80 83       	st	Z, r24
    2ee8:	e4 cc       	rjmp	.-1592   	; 0x28b2 <start+0x7b8>

			}

		}

		else if(command == '-')
    2eea:	fe 01       	movw	r30, r28
    2eec:	ed 51       	subi	r30, 0x1D	; 29
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	80 81       	ld	r24, Z
    2ef2:	8d 32       	cpi	r24, 0x2D	; 45
    2ef4:	09 f0       	breq	.+2      	; 0x2ef8 <start+0xdfe>
    2ef6:	dd cc       	rjmp	.-1606   	; 0x28b2 <start+0x7b8>
		{
			LCD_clearScreen();
    2ef8:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
			LCD_displayString("Enter old pass:");
    2efc:	8c e9       	ldi	r24, 0x9C	; 156
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>


			enterPassword(password);
    2f04:	ce 01       	movw	r24, r28
    2f06:	8b 51       	subi	r24, 0x1B	; 27
    2f08:	9f 4f       	sbci	r25, 0xFF	; 255
    2f0a:	0e 94 a5 1b 	call	0x374a	; 0x374a <enterPassword>
    2f0e:	fe 01       	movw	r30, r28
    2f10:	e1 5a       	subi	r30, 0xA1	; 161
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	a8 e4       	ldi	r26, 0x48	; 72
    2f1a:	b2 e4       	ldi	r27, 0x42	; 66
    2f1c:	80 83       	st	Z, r24
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	a2 83       	std	Z+2, r26	; 0x02
    2f22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f24:	8e 01       	movw	r16, r28
    2f26:	05 5a       	subi	r16, 0xA5	; 165
    2f28:	1f 4f       	sbci	r17, 0xFF	; 255
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	e1 5a       	subi	r30, 0xA1	; 161
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	60 81       	ld	r22, Z
    2f32:	71 81       	ldd	r23, Z+1	; 0x01
    2f34:	82 81       	ldd	r24, Z+2	; 0x02
    2f36:	93 81       	ldd	r25, Z+3	; 0x03
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	4a ef       	ldi	r20, 0xFA	; 250
    2f3e:	54 e4       	ldi	r21, 0x44	; 68
    2f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	f8 01       	movw	r30, r16
    2f4a:	80 83       	st	Z, r24
    2f4c:	91 83       	std	Z+1, r25	; 0x01
    2f4e:	a2 83       	std	Z+2, r26	; 0x02
    2f50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f52:	fe 01       	movw	r30, r28
    2f54:	e5 5a       	subi	r30, 0xA5	; 165
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	60 81       	ld	r22, Z
    2f5a:	71 81       	ldd	r23, Z+1	; 0x01
    2f5c:	82 81       	ldd	r24, Z+2	; 0x02
    2f5e:	93 81       	ldd	r25, Z+3	; 0x03
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	40 e8       	ldi	r20, 0x80	; 128
    2f66:	5f e3       	ldi	r21, 0x3F	; 63
    2f68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f6c:	88 23       	and	r24, r24
    2f6e:	44 f4       	brge	.+16     	; 0x2f80 <start+0xe86>
		__ticks = 1;
    2f70:	fe 01       	movw	r30, r28
    2f72:	e7 5a       	subi	r30, 0xA7	; 167
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	91 83       	std	Z+1, r25	; 0x01
    2f7c:	80 83       	st	Z, r24
    2f7e:	64 c0       	rjmp	.+200    	; 0x3048 <start+0xf4e>
	else if (__tmp > 65535)
    2f80:	fe 01       	movw	r30, r28
    2f82:	e5 5a       	subi	r30, 0xA5	; 165
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	60 81       	ld	r22, Z
    2f88:	71 81       	ldd	r23, Z+1	; 0x01
    2f8a:	82 81       	ldd	r24, Z+2	; 0x02
    2f8c:	93 81       	ldd	r25, Z+3	; 0x03
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	3f ef       	ldi	r19, 0xFF	; 255
    2f92:	4f e7       	ldi	r20, 0x7F	; 127
    2f94:	57 e4       	ldi	r21, 0x47	; 71
    2f96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f9a:	18 16       	cp	r1, r24
    2f9c:	0c f0       	brlt	.+2      	; 0x2fa0 <start+0xea6>
    2f9e:	43 c0       	rjmp	.+134    	; 0x3026 <start+0xf2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	e1 5a       	subi	r30, 0xA1	; 161
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	60 81       	ld	r22, Z
    2fa8:	71 81       	ldd	r23, Z+1	; 0x01
    2faa:	82 81       	ldd	r24, Z+2	; 0x02
    2fac:	93 81       	ldd	r25, Z+3	; 0x03
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e2       	ldi	r20, 0x20	; 32
    2fb4:	51 e4       	ldi	r21, 0x41	; 65
    2fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	8e 01       	movw	r16, r28
    2fc0:	07 5a       	subi	r16, 0xA7	; 167
    2fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc4:	bc 01       	movw	r22, r24
    2fc6:	cd 01       	movw	r24, r26
    2fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	f8 01       	movw	r30, r16
    2fd2:	91 83       	std	Z+1, r25	; 0x01
    2fd4:	80 83       	st	Z, r24
    2fd6:	1f c0       	rjmp	.+62     	; 0x3016 <start+0xf1c>
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e9 5a       	subi	r30, 0xA9	; 169
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	88 ec       	ldi	r24, 0xC8	; 200
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	91 83       	std	Z+1, r25	; 0x01
    2fe4:	80 83       	st	Z, r24
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	e9 5a       	subi	r30, 0xA9	; 169
    2fea:	ff 4f       	sbci	r31, 0xFF	; 255
    2fec:	80 81       	ld	r24, Z
    2fee:	91 81       	ldd	r25, Z+1	; 0x01
    2ff0:	01 97       	sbiw	r24, 0x01	; 1
    2ff2:	f1 f7       	brne	.-4      	; 0x2ff0 <start+0xef6>
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	e9 5a       	subi	r30, 0xA9	; 169
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	91 83       	std	Z+1, r25	; 0x01
    2ffc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffe:	de 01       	movw	r26, r28
    3000:	a7 5a       	subi	r26, 0xA7	; 167
    3002:	bf 4f       	sbci	r27, 0xFF	; 255
    3004:	fe 01       	movw	r30, r28
    3006:	e7 5a       	subi	r30, 0xA7	; 167
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	80 81       	ld	r24, Z
    300c:	91 81       	ldd	r25, Z+1	; 0x01
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	11 96       	adiw	r26, 0x01	; 1
    3012:	9c 93       	st	X, r25
    3014:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3016:	fe 01       	movw	r30, r28
    3018:	e7 5a       	subi	r30, 0xA7	; 167
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	80 81       	ld	r24, Z
    301e:	91 81       	ldd	r25, Z+1	; 0x01
    3020:	00 97       	sbiw	r24, 0x00	; 0
    3022:	d1 f6       	brne	.-76     	; 0x2fd8 <start+0xede>
    3024:	27 c0       	rjmp	.+78     	; 0x3074 <start+0xf7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3026:	8e 01       	movw	r16, r28
    3028:	07 5a       	subi	r16, 0xA7	; 167
    302a:	1f 4f       	sbci	r17, 0xFF	; 255
    302c:	fe 01       	movw	r30, r28
    302e:	e5 5a       	subi	r30, 0xA5	; 165
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	60 81       	ld	r22, Z
    3034:	71 81       	ldd	r23, Z+1	; 0x01
    3036:	82 81       	ldd	r24, Z+2	; 0x02
    3038:	93 81       	ldd	r25, Z+3	; 0x03
    303a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	f8 01       	movw	r30, r16
    3044:	91 83       	std	Z+1, r25	; 0x01
    3046:	80 83       	st	Z, r24
    3048:	de 01       	movw	r26, r28
    304a:	ab 5a       	subi	r26, 0xAB	; 171
    304c:	bf 4f       	sbci	r27, 0xFF	; 255
    304e:	fe 01       	movw	r30, r28
    3050:	e7 5a       	subi	r30, 0xA7	; 167
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	80 81       	ld	r24, Z
    3056:	91 81       	ldd	r25, Z+1	; 0x01
    3058:	8d 93       	st	X+, r24
    305a:	9c 93       	st	X, r25
    305c:	fe 01       	movw	r30, r28
    305e:	eb 5a       	subi	r30, 0xAB	; 171
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	80 81       	ld	r24, Z
    3064:	91 81       	ldd	r25, Z+1	; 0x01
    3066:	01 97       	sbiw	r24, 0x01	; 1
    3068:	f1 f7       	brne	.-4      	; 0x3066 <start+0xf6c>
    306a:	fe 01       	movw	r30, r28
    306c:	eb 5a       	subi	r30, 0xAB	; 171
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	91 83       	std	Z+1, r25	; 0x01
    3072:	80 83       	st	Z, r24
			_delay_ms(UART_DELAY);
			sendPassword(password);
    3074:	ce 01       	movw	r24, r28
    3076:	8b 51       	subi	r24, 0x1B	; 27
    3078:	9f 4f       	sbci	r25, 0xFF	; 255
    307a:	0e 94 c5 1c 	call	0x398a	; 0x398a <sendPassword>

			passwordVerified = 0;
    307e:	fe 01       	movw	r30, r28
    3080:	ec 51       	subi	r30, 0x1C	; 28
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	10 82       	st	Z, r1
			passwordVerified = UART_recieveByte();
    3086:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    308a:	fe 01       	movw	r30, r28
    308c:	ec 51       	subi	r30, 0x1C	; 28
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	80 83       	st	Z, r24


			if(passwordVerified)
    3092:	fe 01       	movw	r30, r28
    3094:	ec 51       	subi	r30, 0x1C	; 28
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	80 81       	ld	r24, Z
    309a:	88 23       	and	r24, r24
    309c:	09 f4       	brne	.+2      	; 0x30a0 <start+0xfa6>
    309e:	cd c2       	rjmp	.+1434   	; 0x363a <start+0x1540>
			{
				LCD_clearScreen();
    30a0:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
				LCD_displayString("Enter New pass:");
    30a4:	8c ea       	ldi	r24, 0xAC	; 172
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>

				enterPassword(password);
    30ac:	ce 01       	movw	r24, r28
    30ae:	8b 51       	subi	r24, 0x1B	; 27
    30b0:	9f 4f       	sbci	r25, 0xFF	; 255
    30b2:	0e 94 a5 1b 	call	0x374a	; 0x374a <enterPassword>
    30b6:	fe 01       	movw	r30, r28
    30b8:	ef 5a       	subi	r30, 0xAF	; 175
    30ba:	ff 4f       	sbci	r31, 0xFF	; 255
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	a8 e4       	ldi	r26, 0x48	; 72
    30c2:	b2 e4       	ldi	r27, 0x42	; 66
    30c4:	80 83       	st	Z, r24
    30c6:	91 83       	std	Z+1, r25	; 0x01
    30c8:	a2 83       	std	Z+2, r26	; 0x02
    30ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30cc:	8e 01       	movw	r16, r28
    30ce:	03 5b       	subi	r16, 0xB3	; 179
    30d0:	1f 4f       	sbci	r17, 0xFF	; 255
    30d2:	fe 01       	movw	r30, r28
    30d4:	ef 5a       	subi	r30, 0xAF	; 175
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	60 81       	ld	r22, Z
    30da:	71 81       	ldd	r23, Z+1	; 0x01
    30dc:	82 81       	ldd	r24, Z+2	; 0x02
    30de:	93 81       	ldd	r25, Z+3	; 0x03
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	4a ef       	ldi	r20, 0xFA	; 250
    30e6:	54 e4       	ldi	r21, 0x44	; 68
    30e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	f8 01       	movw	r30, r16
    30f2:	80 83       	st	Z, r24
    30f4:	91 83       	std	Z+1, r25	; 0x01
    30f6:	a2 83       	std	Z+2, r26	; 0x02
    30f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30fa:	fe 01       	movw	r30, r28
    30fc:	e3 5b       	subi	r30, 0xB3	; 179
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	60 81       	ld	r22, Z
    3102:	71 81       	ldd	r23, Z+1	; 0x01
    3104:	82 81       	ldd	r24, Z+2	; 0x02
    3106:	93 81       	ldd	r25, Z+3	; 0x03
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e8       	ldi	r20, 0x80	; 128
    310e:	5f e3       	ldi	r21, 0x3F	; 63
    3110:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3114:	88 23       	and	r24, r24
    3116:	44 f4       	brge	.+16     	; 0x3128 <start+0x102e>
		__ticks = 1;
    3118:	fe 01       	movw	r30, r28
    311a:	e5 5b       	subi	r30, 0xB5	; 181
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	91 83       	std	Z+1, r25	; 0x01
    3124:	80 83       	st	Z, r24
    3126:	64 c0       	rjmp	.+200    	; 0x31f0 <start+0x10f6>
	else if (__tmp > 65535)
    3128:	fe 01       	movw	r30, r28
    312a:	e3 5b       	subi	r30, 0xB3	; 179
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	60 81       	ld	r22, Z
    3130:	71 81       	ldd	r23, Z+1	; 0x01
    3132:	82 81       	ldd	r24, Z+2	; 0x02
    3134:	93 81       	ldd	r25, Z+3	; 0x03
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	3f ef       	ldi	r19, 0xFF	; 255
    313a:	4f e7       	ldi	r20, 0x7F	; 127
    313c:	57 e4       	ldi	r21, 0x47	; 71
    313e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3142:	18 16       	cp	r1, r24
    3144:	0c f0       	brlt	.+2      	; 0x3148 <start+0x104e>
    3146:	43 c0       	rjmp	.+134    	; 0x31ce <start+0x10d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3148:	fe 01       	movw	r30, r28
    314a:	ef 5a       	subi	r30, 0xAF	; 175
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	60 81       	ld	r22, Z
    3150:	71 81       	ldd	r23, Z+1	; 0x01
    3152:	82 81       	ldd	r24, Z+2	; 0x02
    3154:	93 81       	ldd	r25, Z+3	; 0x03
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	40 e2       	ldi	r20, 0x20	; 32
    315c:	51 e4       	ldi	r21, 0x41	; 65
    315e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	8e 01       	movw	r16, r28
    3168:	05 5b       	subi	r16, 0xB5	; 181
    316a:	1f 4f       	sbci	r17, 0xFF	; 255
    316c:	bc 01       	movw	r22, r24
    316e:	cd 01       	movw	r24, r26
    3170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	f8 01       	movw	r30, r16
    317a:	91 83       	std	Z+1, r25	; 0x01
    317c:	80 83       	st	Z, r24
    317e:	1f c0       	rjmp	.+62     	; 0x31be <start+0x10c4>
    3180:	fe 01       	movw	r30, r28
    3182:	e7 5b       	subi	r30, 0xB7	; 183
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	88 ec       	ldi	r24, 0xC8	; 200
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	91 83       	std	Z+1, r25	; 0x01
    318c:	80 83       	st	Z, r24
    318e:	fe 01       	movw	r30, r28
    3190:	e7 5b       	subi	r30, 0xB7	; 183
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	80 81       	ld	r24, Z
    3196:	91 81       	ldd	r25, Z+1	; 0x01
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	f1 f7       	brne	.-4      	; 0x3198 <start+0x109e>
    319c:	fe 01       	movw	r30, r28
    319e:	e7 5b       	subi	r30, 0xB7	; 183
    31a0:	ff 4f       	sbci	r31, 0xFF	; 255
    31a2:	91 83       	std	Z+1, r25	; 0x01
    31a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a6:	de 01       	movw	r26, r28
    31a8:	a5 5b       	subi	r26, 0xB5	; 181
    31aa:	bf 4f       	sbci	r27, 0xFF	; 255
    31ac:	fe 01       	movw	r30, r28
    31ae:	e5 5b       	subi	r30, 0xB5	; 181
    31b0:	ff 4f       	sbci	r31, 0xFF	; 255
    31b2:	80 81       	ld	r24, Z
    31b4:	91 81       	ldd	r25, Z+1	; 0x01
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	11 96       	adiw	r26, 0x01	; 1
    31ba:	9c 93       	st	X, r25
    31bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31be:	fe 01       	movw	r30, r28
    31c0:	e5 5b       	subi	r30, 0xB5	; 181
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	80 81       	ld	r24, Z
    31c6:	91 81       	ldd	r25, Z+1	; 0x01
    31c8:	00 97       	sbiw	r24, 0x00	; 0
    31ca:	d1 f6       	brne	.-76     	; 0x3180 <start+0x1086>
    31cc:	27 c0       	rjmp	.+78     	; 0x321c <start+0x1122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ce:	8e 01       	movw	r16, r28
    31d0:	05 5b       	subi	r16, 0xB5	; 181
    31d2:	1f 4f       	sbci	r17, 0xFF	; 255
    31d4:	fe 01       	movw	r30, r28
    31d6:	e3 5b       	subi	r30, 0xB3	; 179
    31d8:	ff 4f       	sbci	r31, 0xFF	; 255
    31da:	60 81       	ld	r22, Z
    31dc:	71 81       	ldd	r23, Z+1	; 0x01
    31de:	82 81       	ldd	r24, Z+2	; 0x02
    31e0:	93 81       	ldd	r25, Z+3	; 0x03
    31e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	f8 01       	movw	r30, r16
    31ec:	91 83       	std	Z+1, r25	; 0x01
    31ee:	80 83       	st	Z, r24
    31f0:	de 01       	movw	r26, r28
    31f2:	a9 5b       	subi	r26, 0xB9	; 185
    31f4:	bf 4f       	sbci	r27, 0xFF	; 255
    31f6:	fe 01       	movw	r30, r28
    31f8:	e5 5b       	subi	r30, 0xB5	; 181
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	80 81       	ld	r24, Z
    31fe:	91 81       	ldd	r25, Z+1	; 0x01
    3200:	8d 93       	st	X+, r24
    3202:	9c 93       	st	X, r25
    3204:	fe 01       	movw	r30, r28
    3206:	e9 5b       	subi	r30, 0xB9	; 185
    3208:	ff 4f       	sbci	r31, 0xFF	; 255
    320a:	80 81       	ld	r24, Z
    320c:	91 81       	ldd	r25, Z+1	; 0x01
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	f1 f7       	brne	.-4      	; 0x320e <start+0x1114>
    3212:	fe 01       	movw	r30, r28
    3214:	e9 5b       	subi	r30, 0xB9	; 185
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	91 83       	std	Z+1, r25	; 0x01
    321a:	80 83       	st	Z, r24
				_delay_ms(UART_DELAY);
				sendPassword(password);
    321c:	ce 01       	movw	r24, r28
    321e:	8b 51       	subi	r24, 0x1B	; 27
    3220:	9f 4f       	sbci	r25, 0xFF	; 255
    3222:	0e 94 c5 1c 	call	0x398a	; 0x398a <sendPassword>

				LCD_clearScreen();
    3226:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
				LCD_displayString("Confirm New pass:");
    322a:	8c eb       	ldi	r24, 0xBC	; 188
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>

				enterPassword( confirmPassword );
    3232:	ce 01       	movw	r24, r28
    3234:	86 51       	subi	r24, 0x16	; 22
    3236:	9f 4f       	sbci	r25, 0xFF	; 255
    3238:	0e 94 a5 1b 	call	0x374a	; 0x374a <enterPassword>
    323c:	fe 01       	movw	r30, r28
    323e:	ed 5b       	subi	r30, 0xBD	; 189
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	a8 e4       	ldi	r26, 0x48	; 72
    3248:	b2 e4       	ldi	r27, 0x42	; 66
    324a:	80 83       	st	Z, r24
    324c:	91 83       	std	Z+1, r25	; 0x01
    324e:	a2 83       	std	Z+2, r26	; 0x02
    3250:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3252:	8e 01       	movw	r16, r28
    3254:	01 5c       	subi	r16, 0xC1	; 193
    3256:	1f 4f       	sbci	r17, 0xFF	; 255
    3258:	fe 01       	movw	r30, r28
    325a:	ed 5b       	subi	r30, 0xBD	; 189
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	60 81       	ld	r22, Z
    3260:	71 81       	ldd	r23, Z+1	; 0x01
    3262:	82 81       	ldd	r24, Z+2	; 0x02
    3264:	93 81       	ldd	r25, Z+3	; 0x03
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	4a ef       	ldi	r20, 0xFA	; 250
    326c:	54 e4       	ldi	r21, 0x44	; 68
    326e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	f8 01       	movw	r30, r16
    3278:	80 83       	st	Z, r24
    327a:	91 83       	std	Z+1, r25	; 0x01
    327c:	a2 83       	std	Z+2, r26	; 0x02
    327e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3280:	fe 01       	movw	r30, r28
    3282:	ff 96       	adiw	r30, 0x3f	; 63
    3284:	60 81       	ld	r22, Z
    3286:	71 81       	ldd	r23, Z+1	; 0x01
    3288:	82 81       	ldd	r24, Z+2	; 0x02
    328a:	93 81       	ldd	r25, Z+3	; 0x03
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	40 e8       	ldi	r20, 0x80	; 128
    3292:	5f e3       	ldi	r21, 0x3F	; 63
    3294:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3298:	88 23       	and	r24, r24
    329a:	2c f4       	brge	.+10     	; 0x32a6 <start+0x11ac>
		__ticks = 1;
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	9e af       	std	Y+62, r25	; 0x3e
    32a2:	8d af       	std	Y+61, r24	; 0x3d
    32a4:	46 c0       	rjmp	.+140    	; 0x3332 <start+0x1238>
	else if (__tmp > 65535)
    32a6:	fe 01       	movw	r30, r28
    32a8:	ff 96       	adiw	r30, 0x3f	; 63
    32aa:	60 81       	ld	r22, Z
    32ac:	71 81       	ldd	r23, Z+1	; 0x01
    32ae:	82 81       	ldd	r24, Z+2	; 0x02
    32b0:	93 81       	ldd	r25, Z+3	; 0x03
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	3f ef       	ldi	r19, 0xFF	; 255
    32b6:	4f e7       	ldi	r20, 0x7F	; 127
    32b8:	57 e4       	ldi	r21, 0x47	; 71
    32ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32be:	18 16       	cp	r1, r24
    32c0:	64 f5       	brge	.+88     	; 0x331a <start+0x1220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c2:	fe 01       	movw	r30, r28
    32c4:	ed 5b       	subi	r30, 0xBD	; 189
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	60 81       	ld	r22, Z
    32ca:	71 81       	ldd	r23, Z+1	; 0x01
    32cc:	82 81       	ldd	r24, Z+2	; 0x02
    32ce:	93 81       	ldd	r25, Z+3	; 0x03
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	40 e2       	ldi	r20, 0x20	; 32
    32d6:	51 e4       	ldi	r21, 0x41	; 65
    32d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	bc 01       	movw	r22, r24
    32e2:	cd 01       	movw	r24, r26
    32e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	9e af       	std	Y+62, r25	; 0x3e
    32ee:	8d af       	std	Y+61, r24	; 0x3d
    32f0:	0f c0       	rjmp	.+30     	; 0x3310 <start+0x1216>
    32f2:	88 ec       	ldi	r24, 0xC8	; 200
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	9c af       	std	Y+60, r25	; 0x3c
    32f8:	8b af       	std	Y+59, r24	; 0x3b
    32fa:	8b ad       	ldd	r24, Y+59	; 0x3b
    32fc:	9c ad       	ldd	r25, Y+60	; 0x3c
    32fe:	01 97       	sbiw	r24, 0x01	; 1
    3300:	f1 f7       	brne	.-4      	; 0x32fe <start+0x1204>
    3302:	9c af       	std	Y+60, r25	; 0x3c
    3304:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3306:	8d ad       	ldd	r24, Y+61	; 0x3d
    3308:	9e ad       	ldd	r25, Y+62	; 0x3e
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	9e af       	std	Y+62, r25	; 0x3e
    330e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3310:	8d ad       	ldd	r24, Y+61	; 0x3d
    3312:	9e ad       	ldd	r25, Y+62	; 0x3e
    3314:	00 97       	sbiw	r24, 0x00	; 0
    3316:	69 f7       	brne	.-38     	; 0x32f2 <start+0x11f8>
    3318:	16 c0       	rjmp	.+44     	; 0x3346 <start+0x124c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    331a:	fe 01       	movw	r30, r28
    331c:	ff 96       	adiw	r30, 0x3f	; 63
    331e:	60 81       	ld	r22, Z
    3320:	71 81       	ldd	r23, Z+1	; 0x01
    3322:	82 81       	ldd	r24, Z+2	; 0x02
    3324:	93 81       	ldd	r25, Z+3	; 0x03
    3326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	9e af       	std	Y+62, r25	; 0x3e
    3330:	8d af       	std	Y+61, r24	; 0x3d
    3332:	8d ad       	ldd	r24, Y+61	; 0x3d
    3334:	9e ad       	ldd	r25, Y+62	; 0x3e
    3336:	9a af       	std	Y+58, r25	; 0x3a
    3338:	89 af       	std	Y+57, r24	; 0x39
    333a:	89 ad       	ldd	r24, Y+57	; 0x39
    333c:	9a ad       	ldd	r25, Y+58	; 0x3a
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	f1 f7       	brne	.-4      	; 0x333e <start+0x1244>
    3342:	9a af       	std	Y+58, r25	; 0x3a
    3344:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(UART_DELAY);
				sendPassword( confirmPassword );
    3346:	ce 01       	movw	r24, r28
    3348:	86 51       	subi	r24, 0x16	; 22
    334a:	9f 4f       	sbci	r25, 0xFF	; 255
    334c:	0e 94 c5 1c 	call	0x398a	; 0x398a <sendPassword>
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	a8 e4       	ldi	r26, 0x48	; 72
    3356:	b2 e4       	ldi	r27, 0x42	; 66
    3358:	8d ab       	std	Y+53, r24	; 0x35
    335a:	9e ab       	std	Y+54, r25	; 0x36
    335c:	af ab       	std	Y+55, r26	; 0x37
    335e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3360:	6d a9       	ldd	r22, Y+53	; 0x35
    3362:	7e a9       	ldd	r23, Y+54	; 0x36
    3364:	8f a9       	ldd	r24, Y+55	; 0x37
    3366:	98 ad       	ldd	r25, Y+56	; 0x38
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	4a ef       	ldi	r20, 0xFA	; 250
    336e:	54 e4       	ldi	r21, 0x44	; 68
    3370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	89 ab       	std	Y+49, r24	; 0x31
    337a:	9a ab       	std	Y+50, r25	; 0x32
    337c:	ab ab       	std	Y+51, r26	; 0x33
    337e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3380:	69 a9       	ldd	r22, Y+49	; 0x31
    3382:	7a a9       	ldd	r23, Y+50	; 0x32
    3384:	8b a9       	ldd	r24, Y+51	; 0x33
    3386:	9c a9       	ldd	r25, Y+52	; 0x34
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	40 e8       	ldi	r20, 0x80	; 128
    338e:	5f e3       	ldi	r21, 0x3F	; 63
    3390:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3394:	88 23       	and	r24, r24
    3396:	2c f4       	brge	.+10     	; 0x33a2 <start+0x12a8>
		__ticks = 1;
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	98 ab       	std	Y+48, r25	; 0x30
    339e:	8f a7       	std	Y+47, r24	; 0x2f
    33a0:	3f c0       	rjmp	.+126    	; 0x3420 <start+0x1326>
	else if (__tmp > 65535)
    33a2:	69 a9       	ldd	r22, Y+49	; 0x31
    33a4:	7a a9       	ldd	r23, Y+50	; 0x32
    33a6:	8b a9       	ldd	r24, Y+51	; 0x33
    33a8:	9c a9       	ldd	r25, Y+52	; 0x34
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	3f ef       	ldi	r19, 0xFF	; 255
    33ae:	4f e7       	ldi	r20, 0x7F	; 127
    33b0:	57 e4       	ldi	r21, 0x47	; 71
    33b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33b6:	18 16       	cp	r1, r24
    33b8:	4c f5       	brge	.+82     	; 0x340c <start+0x1312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ba:	6d a9       	ldd	r22, Y+53	; 0x35
    33bc:	7e a9       	ldd	r23, Y+54	; 0x36
    33be:	8f a9       	ldd	r24, Y+55	; 0x37
    33c0:	98 ad       	ldd	r25, Y+56	; 0x38
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	40 e2       	ldi	r20, 0x20	; 32
    33c8:	51 e4       	ldi	r21, 0x41	; 65
    33ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	bc 01       	movw	r22, r24
    33d4:	cd 01       	movw	r24, r26
    33d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	98 ab       	std	Y+48, r25	; 0x30
    33e0:	8f a7       	std	Y+47, r24	; 0x2f
    33e2:	0f c0       	rjmp	.+30     	; 0x3402 <start+0x1308>
    33e4:	88 ec       	ldi	r24, 0xC8	; 200
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	9e a7       	std	Y+46, r25	; 0x2e
    33ea:	8d a7       	std	Y+45, r24	; 0x2d
    33ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    33ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    33f0:	01 97       	sbiw	r24, 0x01	; 1
    33f2:	f1 f7       	brne	.-4      	; 0x33f0 <start+0x12f6>
    33f4:	9e a7       	std	Y+46, r25	; 0x2e
    33f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    33fa:	98 a9       	ldd	r25, Y+48	; 0x30
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	98 ab       	std	Y+48, r25	; 0x30
    3400:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3402:	8f a5       	ldd	r24, Y+47	; 0x2f
    3404:	98 a9       	ldd	r25, Y+48	; 0x30
    3406:	00 97       	sbiw	r24, 0x00	; 0
    3408:	69 f7       	brne	.-38     	; 0x33e4 <start+0x12ea>
    340a:	14 c0       	rjmp	.+40     	; 0x3434 <start+0x133a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    340c:	69 a9       	ldd	r22, Y+49	; 0x31
    340e:	7a a9       	ldd	r23, Y+50	; 0x32
    3410:	8b a9       	ldd	r24, Y+51	; 0x33
    3412:	9c a9       	ldd	r25, Y+52	; 0x34
    3414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3418:	dc 01       	movw	r26, r24
    341a:	cb 01       	movw	r24, r22
    341c:	98 ab       	std	Y+48, r25	; 0x30
    341e:	8f a7       	std	Y+47, r24	; 0x2f
    3420:	8f a5       	ldd	r24, Y+47	; 0x2f
    3422:	98 a9       	ldd	r25, Y+48	; 0x30
    3424:	9c a7       	std	Y+44, r25	; 0x2c
    3426:	8b a7       	std	Y+43, r24	; 0x2b
    3428:	8b a5       	ldd	r24, Y+43	; 0x2b
    342a:	9c a5       	ldd	r25, Y+44	; 0x2c
    342c:	01 97       	sbiw	r24, 0x01	; 1
    342e:	f1 f7       	brne	.-4      	; 0x342c <start+0x1332>
    3430:	9c a7       	std	Y+44, r25	; 0x2c
    3432:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(UART_DELAY);

				passwordVerified = 0;
    3434:	fe 01       	movw	r30, r28
    3436:	ec 51       	subi	r30, 0x1C	; 28
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	10 82       	st	Z, r1
				passwordVerified = UART_recieveByte();
    343c:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    3440:	fe 01       	movw	r30, r28
    3442:	ec 51       	subi	r30, 0x1C	; 28
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	80 83       	st	Z, r24

				if(passwordVerified)
    3448:	fe 01       	movw	r30, r28
    344a:	ec 51       	subi	r30, 0x1C	; 28
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	80 81       	ld	r24, Z
    3450:	88 23       	and	r24, r24
    3452:	09 f4       	brne	.+2      	; 0x3456 <start+0x135c>
    3454:	79 c0       	rjmp	.+242    	; 0x3548 <start+0x144e>
				{
					LCD_clearScreen();
    3456:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
					LCD_displayString("Password Changed");
    345a:	8e ec       	ldi	r24, 0xCE	; 206
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	90 e8       	ldi	r25, 0x80	; 128
    3466:	ab e3       	ldi	r26, 0x3B	; 59
    3468:	b5 e4       	ldi	r27, 0x45	; 69
    346a:	8f a3       	std	Y+39, r24	; 0x27
    346c:	98 a7       	std	Y+40, r25	; 0x28
    346e:	a9 a7       	std	Y+41, r26	; 0x29
    3470:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3472:	6f a1       	ldd	r22, Y+39	; 0x27
    3474:	78 a5       	ldd	r23, Y+40	; 0x28
    3476:	89 a5       	ldd	r24, Y+41	; 0x29
    3478:	9a a5       	ldd	r25, Y+42	; 0x2a
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	4a ef       	ldi	r20, 0xFA	; 250
    3480:	54 e4       	ldi	r21, 0x44	; 68
    3482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	8b a3       	std	Y+35, r24	; 0x23
    348c:	9c a3       	std	Y+36, r25	; 0x24
    348e:	ad a3       	std	Y+37, r26	; 0x25
    3490:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3492:	6b a1       	ldd	r22, Y+35	; 0x23
    3494:	7c a1       	ldd	r23, Y+36	; 0x24
    3496:	8d a1       	ldd	r24, Y+37	; 0x25
    3498:	9e a1       	ldd	r25, Y+38	; 0x26
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	40 e8       	ldi	r20, 0x80	; 128
    34a0:	5f e3       	ldi	r21, 0x3F	; 63
    34a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34a6:	88 23       	and	r24, r24
    34a8:	2c f4       	brge	.+10     	; 0x34b4 <start+0x13ba>
		__ticks = 1;
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	9a a3       	std	Y+34, r25	; 0x22
    34b0:	89 a3       	std	Y+33, r24	; 0x21
    34b2:	3f c0       	rjmp	.+126    	; 0x3532 <start+0x1438>
	else if (__tmp > 65535)
    34b4:	6b a1       	ldd	r22, Y+35	; 0x23
    34b6:	7c a1       	ldd	r23, Y+36	; 0x24
    34b8:	8d a1       	ldd	r24, Y+37	; 0x25
    34ba:	9e a1       	ldd	r25, Y+38	; 0x26
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	3f ef       	ldi	r19, 0xFF	; 255
    34c0:	4f e7       	ldi	r20, 0x7F	; 127
    34c2:	57 e4       	ldi	r21, 0x47	; 71
    34c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34c8:	18 16       	cp	r1, r24
    34ca:	4c f5       	brge	.+82     	; 0x351e <start+0x1424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34cc:	6f a1       	ldd	r22, Y+39	; 0x27
    34ce:	78 a5       	ldd	r23, Y+40	; 0x28
    34d0:	89 a5       	ldd	r24, Y+41	; 0x29
    34d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	40 e2       	ldi	r20, 0x20	; 32
    34da:	51 e4       	ldi	r21, 0x41	; 65
    34dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	bc 01       	movw	r22, r24
    34e6:	cd 01       	movw	r24, r26
    34e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	9a a3       	std	Y+34, r25	; 0x22
    34f2:	89 a3       	std	Y+33, r24	; 0x21
    34f4:	0f c0       	rjmp	.+30     	; 0x3514 <start+0x141a>
    34f6:	88 ec       	ldi	r24, 0xC8	; 200
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	98 a3       	std	Y+32, r25	; 0x20
    34fc:	8f 8f       	std	Y+31, r24	; 0x1f
    34fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3500:	98 a1       	ldd	r25, Y+32	; 0x20
    3502:	01 97       	sbiw	r24, 0x01	; 1
    3504:	f1 f7       	brne	.-4      	; 0x3502 <start+0x1408>
    3506:	98 a3       	std	Y+32, r25	; 0x20
    3508:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    350a:	89 a1       	ldd	r24, Y+33	; 0x21
    350c:	9a a1       	ldd	r25, Y+34	; 0x22
    350e:	01 97       	sbiw	r24, 0x01	; 1
    3510:	9a a3       	std	Y+34, r25	; 0x22
    3512:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3514:	89 a1       	ldd	r24, Y+33	; 0x21
    3516:	9a a1       	ldd	r25, Y+34	; 0x22
    3518:	00 97       	sbiw	r24, 0x00	; 0
    351a:	69 f7       	brne	.-38     	; 0x34f6 <start+0x13fc>
    351c:	ca c9       	rjmp	.-3180   	; 0x28b2 <start+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    351e:	6b a1       	ldd	r22, Y+35	; 0x23
    3520:	7c a1       	ldd	r23, Y+36	; 0x24
    3522:	8d a1       	ldd	r24, Y+37	; 0x25
    3524:	9e a1       	ldd	r25, Y+38	; 0x26
    3526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352a:	dc 01       	movw	r26, r24
    352c:	cb 01       	movw	r24, r22
    352e:	9a a3       	std	Y+34, r25	; 0x22
    3530:	89 a3       	std	Y+33, r24	; 0x21
    3532:	89 a1       	ldd	r24, Y+33	; 0x21
    3534:	9a a1       	ldd	r25, Y+34	; 0x22
    3536:	9e 8f       	std	Y+30, r25	; 0x1e
    3538:	8d 8f       	std	Y+29, r24	; 0x1d
    353a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    353c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    353e:	01 97       	sbiw	r24, 0x01	; 1
    3540:	f1 f7       	brne	.-4      	; 0x353e <start+0x1444>
    3542:	9e 8f       	std	Y+30, r25	; 0x1e
    3544:	8d 8f       	std	Y+29, r24	; 0x1d
    3546:	b5 c9       	rjmp	.-3222   	; 0x28b2 <start+0x7b8>
					_delay_ms(3000);
				}

				else
				{
					LCD_clearScreen();
    3548:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    354c:	8d e8       	ldi	r24, 0x8D	; 141
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	90 e4       	ldi	r25, 0x40	; 64
    3558:	ac e1       	ldi	r26, 0x1C	; 28
    355a:	b5 e4       	ldi	r27, 0x45	; 69
    355c:	89 8f       	std	Y+25, r24	; 0x19
    355e:	9a 8f       	std	Y+26, r25	; 0x1a
    3560:	ab 8f       	std	Y+27, r26	; 0x1b
    3562:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3564:	69 8d       	ldd	r22, Y+25	; 0x19
    3566:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3568:	8b 8d       	ldd	r24, Y+27	; 0x1b
    356a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	4a ef       	ldi	r20, 0xFA	; 250
    3572:	54 e4       	ldi	r21, 0x44	; 68
    3574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	8d 8b       	std	Y+21, r24	; 0x15
    357e:	9e 8b       	std	Y+22, r25	; 0x16
    3580:	af 8b       	std	Y+23, r26	; 0x17
    3582:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3584:	6d 89       	ldd	r22, Y+21	; 0x15
    3586:	7e 89       	ldd	r23, Y+22	; 0x16
    3588:	8f 89       	ldd	r24, Y+23	; 0x17
    358a:	98 8d       	ldd	r25, Y+24	; 0x18
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	40 e8       	ldi	r20, 0x80	; 128
    3592:	5f e3       	ldi	r21, 0x3F	; 63
    3594:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3598:	88 23       	and	r24, r24
    359a:	2c f4       	brge	.+10     	; 0x35a6 <start+0x14ac>
		__ticks = 1;
    359c:	81 e0       	ldi	r24, 0x01	; 1
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	9c 8b       	std	Y+20, r25	; 0x14
    35a2:	8b 8b       	std	Y+19, r24	; 0x13
    35a4:	3f c0       	rjmp	.+126    	; 0x3624 <start+0x152a>
	else if (__tmp > 65535)
    35a6:	6d 89       	ldd	r22, Y+21	; 0x15
    35a8:	7e 89       	ldd	r23, Y+22	; 0x16
    35aa:	8f 89       	ldd	r24, Y+23	; 0x17
    35ac:	98 8d       	ldd	r25, Y+24	; 0x18
    35ae:	20 e0       	ldi	r18, 0x00	; 0
    35b0:	3f ef       	ldi	r19, 0xFF	; 255
    35b2:	4f e7       	ldi	r20, 0x7F	; 127
    35b4:	57 e4       	ldi	r21, 0x47	; 71
    35b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ba:	18 16       	cp	r1, r24
    35bc:	4c f5       	brge	.+82     	; 0x3610 <start+0x1516>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35be:	69 8d       	ldd	r22, Y+25	; 0x19
    35c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	40 e2       	ldi	r20, 0x20	; 32
    35cc:	51 e4       	ldi	r21, 0x41	; 65
    35ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	bc 01       	movw	r22, r24
    35d8:	cd 01       	movw	r24, r26
    35da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	9c 8b       	std	Y+20, r25	; 0x14
    35e4:	8b 8b       	std	Y+19, r24	; 0x13
    35e6:	0f c0       	rjmp	.+30     	; 0x3606 <start+0x150c>
    35e8:	88 ec       	ldi	r24, 0xC8	; 200
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	9a 8b       	std	Y+18, r25	; 0x12
    35ee:	89 8b       	std	Y+17, r24	; 0x11
    35f0:	89 89       	ldd	r24, Y+17	; 0x11
    35f2:	9a 89       	ldd	r25, Y+18	; 0x12
    35f4:	01 97       	sbiw	r24, 0x01	; 1
    35f6:	f1 f7       	brne	.-4      	; 0x35f4 <start+0x14fa>
    35f8:	9a 8b       	std	Y+18, r25	; 0x12
    35fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35fc:	8b 89       	ldd	r24, Y+19	; 0x13
    35fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3600:	01 97       	sbiw	r24, 0x01	; 1
    3602:	9c 8b       	std	Y+20, r25	; 0x14
    3604:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3606:	8b 89       	ldd	r24, Y+19	; 0x13
    3608:	9c 89       	ldd	r25, Y+20	; 0x14
    360a:	00 97       	sbiw	r24, 0x00	; 0
    360c:	69 f7       	brne	.-38     	; 0x35e8 <start+0x14ee>
    360e:	51 c9       	rjmp	.-3422   	; 0x28b2 <start+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3610:	6d 89       	ldd	r22, Y+21	; 0x15
    3612:	7e 89       	ldd	r23, Y+22	; 0x16
    3614:	8f 89       	ldd	r24, Y+23	; 0x17
    3616:	98 8d       	ldd	r25, Y+24	; 0x18
    3618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361c:	dc 01       	movw	r26, r24
    361e:	cb 01       	movw	r24, r22
    3620:	9c 8b       	std	Y+20, r25	; 0x14
    3622:	8b 8b       	std	Y+19, r24	; 0x13
    3624:	8b 89       	ldd	r24, Y+19	; 0x13
    3626:	9c 89       	ldd	r25, Y+20	; 0x14
    3628:	98 8b       	std	Y+16, r25	; 0x10
    362a:	8f 87       	std	Y+15, r24	; 0x0f
    362c:	8f 85       	ldd	r24, Y+15	; 0x0f
    362e:	98 89       	ldd	r25, Y+16	; 0x10
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	f1 f7       	brne	.-4      	; 0x3630 <start+0x1536>
    3634:	98 8b       	std	Y+16, r25	; 0x10
    3636:	8f 87       	std	Y+15, r24	; 0x0f
    3638:	3c c9       	rjmp	.-3464   	; 0x28b2 <start+0x7b8>
				}
			}

			else
			{
				uint8 falsePasswordCounter = UART_recieveByte();
    363a:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    363e:	fe 01       	movw	r30, r28
    3640:	ef 51       	subi	r30, 0x1F	; 31
    3642:	ff 4f       	sbci	r31, 0xFF	; 255
    3644:	80 83       	st	Z, r24
				if(falsePasswordCounter >=3)
    3646:	fe 01       	movw	r30, r28
    3648:	ef 51       	subi	r30, 0x1F	; 31
    364a:	ff 4f       	sbci	r31, 0xFF	; 255
    364c:	80 81       	ld	r24, Z
    364e:	83 30       	cpi	r24, 0x03	; 3
    3650:	18 f0       	brcs	.+6      	; 0x3658 <start+0x155e>
				{
					securityAlarm();
    3652:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <securityAlarm>
    3656:	2d c9       	rjmp	.-3494   	; 0x28b2 <start+0x7b8>
				}

				else
				{
					LCD_clearScreen();
    3658:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    365c:	8d e8       	ldi	r24, 0x8D	; 141
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>
    3664:	80 e0       	ldi	r24, 0x00	; 0
    3666:	90 e4       	ldi	r25, 0x40	; 64
    3668:	ac e1       	ldi	r26, 0x1C	; 28
    366a:	b5 e4       	ldi	r27, 0x45	; 69
    366c:	8b 87       	std	Y+11, r24	; 0x0b
    366e:	9c 87       	std	Y+12, r25	; 0x0c
    3670:	ad 87       	std	Y+13, r26	; 0x0d
    3672:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3674:	6b 85       	ldd	r22, Y+11	; 0x0b
    3676:	7c 85       	ldd	r23, Y+12	; 0x0c
    3678:	8d 85       	ldd	r24, Y+13	; 0x0d
    367a:	9e 85       	ldd	r25, Y+14	; 0x0e
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	4a ef       	ldi	r20, 0xFA	; 250
    3682:	54 e4       	ldi	r21, 0x44	; 68
    3684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	8f 83       	std	Y+7, r24	; 0x07
    368e:	98 87       	std	Y+8, r25	; 0x08
    3690:	a9 87       	std	Y+9, r26	; 0x09
    3692:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3694:	6f 81       	ldd	r22, Y+7	; 0x07
    3696:	78 85       	ldd	r23, Y+8	; 0x08
    3698:	89 85       	ldd	r24, Y+9	; 0x09
    369a:	9a 85       	ldd	r25, Y+10	; 0x0a
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	40 e8       	ldi	r20, 0x80	; 128
    36a2:	5f e3       	ldi	r21, 0x3F	; 63
    36a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36a8:	88 23       	and	r24, r24
    36aa:	2c f4       	brge	.+10     	; 0x36b6 <start+0x15bc>
		__ticks = 1;
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	9e 83       	std	Y+6, r25	; 0x06
    36b2:	8d 83       	std	Y+5, r24	; 0x05
    36b4:	3f c0       	rjmp	.+126    	; 0x3734 <start+0x163a>
	else if (__tmp > 65535)
    36b6:	6f 81       	ldd	r22, Y+7	; 0x07
    36b8:	78 85       	ldd	r23, Y+8	; 0x08
    36ba:	89 85       	ldd	r24, Y+9	; 0x09
    36bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36be:	20 e0       	ldi	r18, 0x00	; 0
    36c0:	3f ef       	ldi	r19, 0xFF	; 255
    36c2:	4f e7       	ldi	r20, 0x7F	; 127
    36c4:	57 e4       	ldi	r21, 0x47	; 71
    36c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36ca:	18 16       	cp	r1, r24
    36cc:	4c f5       	brge	.+82     	; 0x3720 <start+0x1626>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    36d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    36d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    36d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    36d6:	20 e0       	ldi	r18, 0x00	; 0
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	40 e2       	ldi	r20, 0x20	; 32
    36dc:	51 e4       	ldi	r21, 0x41	; 65
    36de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e2:	dc 01       	movw	r26, r24
    36e4:	cb 01       	movw	r24, r22
    36e6:	bc 01       	movw	r22, r24
    36e8:	cd 01       	movw	r24, r26
    36ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	9e 83       	std	Y+6, r25	; 0x06
    36f4:	8d 83       	std	Y+5, r24	; 0x05
    36f6:	0f c0       	rjmp	.+30     	; 0x3716 <start+0x161c>
    36f8:	88 ec       	ldi	r24, 0xC8	; 200
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	9c 83       	std	Y+4, r25	; 0x04
    36fe:	8b 83       	std	Y+3, r24	; 0x03
    3700:	8b 81       	ldd	r24, Y+3	; 0x03
    3702:	9c 81       	ldd	r25, Y+4	; 0x04
    3704:	01 97       	sbiw	r24, 0x01	; 1
    3706:	f1 f7       	brne	.-4      	; 0x3704 <start+0x160a>
    3708:	9c 83       	std	Y+4, r25	; 0x04
    370a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    370c:	8d 81       	ldd	r24, Y+5	; 0x05
    370e:	9e 81       	ldd	r25, Y+6	; 0x06
    3710:	01 97       	sbiw	r24, 0x01	; 1
    3712:	9e 83       	std	Y+6, r25	; 0x06
    3714:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3716:	8d 81       	ldd	r24, Y+5	; 0x05
    3718:	9e 81       	ldd	r25, Y+6	; 0x06
    371a:	00 97       	sbiw	r24, 0x00	; 0
    371c:	69 f7       	brne	.-38     	; 0x36f8 <start+0x15fe>
    371e:	c9 c8       	rjmp	.-3694   	; 0x28b2 <start+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3720:	6f 81       	ldd	r22, Y+7	; 0x07
    3722:	78 85       	ldd	r23, Y+8	; 0x08
    3724:	89 85       	ldd	r24, Y+9	; 0x09
    3726:	9a 85       	ldd	r25, Y+10	; 0x0a
    3728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372c:	dc 01       	movw	r26, r24
    372e:	cb 01       	movw	r24, r22
    3730:	9e 83       	std	Y+6, r25	; 0x06
    3732:	8d 83       	std	Y+5, r24	; 0x05
    3734:	8d 81       	ldd	r24, Y+5	; 0x05
    3736:	9e 81       	ldd	r25, Y+6	; 0x06
    3738:	9a 83       	std	Y+2, r25	; 0x02
    373a:	89 83       	std	Y+1, r24	; 0x01
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	9a 81       	ldd	r25, Y+2	; 0x02
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	f1 f7       	brne	.-4      	; 0x3740 <start+0x1646>
    3744:	9a 83       	std	Y+2, r25	; 0x02
    3746:	89 83       	std	Y+1, r24	; 0x01
    3748:	b4 c8       	rjmp	.-3736   	; 0x28b2 <start+0x7b8>

0000374a <enterPassword>:
		}
	}
}

void enterPassword (uint8 password[])
{
    374a:	0f 93       	push	r16
    374c:	1f 93       	push	r17
    374e:	df 93       	push	r29
    3750:	cf 93       	push	r28
    3752:	cd b7       	in	r28, 0x3d	; 61
    3754:	de b7       	in	r29, 0x3e	; 62
    3756:	6f 97       	sbiw	r28, 0x1f	; 31
    3758:	0f b6       	in	r0, 0x3f	; 63
    375a:	f8 94       	cli
    375c:	de bf       	out	0x3e, r29	; 62
    375e:	0f be       	out	0x3f, r0	; 63
    3760:	cd bf       	out	0x3d, r28	; 61
    3762:	9f 8f       	std	Y+31, r25	; 0x1f
    3764:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i;
	LCD_moveCursor(1, 5);
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	65 e0       	ldi	r22, 0x05	; 5
    376a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_moveCursor>

	for (i=0 ; i<6 ;++i)
    376e:	1d 8e       	std	Y+29, r1	; 0x1d
    3770:	8b c0       	rjmp	.+278    	; 0x3888 <enterPassword+0x13e>
	{
		while ((KEYPAD_getPressedKey() != 13) && (i == 5));
    3772:	0e 94 17 07 	call	0xe2e	; 0xe2e <KEYPAD_getPressedKey>
    3776:	8d 30       	cpi	r24, 0x0D	; 13
    3778:	19 f0       	breq	.+6      	; 0x3780 <enterPassword+0x36>
    377a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    377c:	85 30       	cpi	r24, 0x05	; 5
    377e:	c9 f3       	breq	.-14     	; 0x3772 <enterPassword+0x28>

		password[i] = KEYPAD_getPressedKey();
    3780:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3782:	28 2f       	mov	r18, r24
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3788:	9f 8d       	ldd	r25, Y+31	; 0x1f
    378a:	8c 01       	movw	r16, r24
    378c:	02 0f       	add	r16, r18
    378e:	13 1f       	adc	r17, r19
    3790:	0e 94 17 07 	call	0xe2e	; 0xe2e <KEYPAD_getPressedKey>
    3794:	f8 01       	movw	r30, r16
    3796:	80 83       	st	Z, r24
    3798:	80 e0       	ldi	r24, 0x00	; 0
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	aa ef       	ldi	r26, 0xFA	; 250
    379e:	b3 e4       	ldi	r27, 0x43	; 67
    37a0:	89 8f       	std	Y+25, r24	; 0x19
    37a2:	9a 8f       	std	Y+26, r25	; 0x1a
    37a4:	ab 8f       	std	Y+27, r26	; 0x1b
    37a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37a8:	69 8d       	ldd	r22, Y+25	; 0x19
    37aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37b0:	20 e0       	ldi	r18, 0x00	; 0
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	4a ef       	ldi	r20, 0xFA	; 250
    37b6:	54 e4       	ldi	r21, 0x44	; 68
    37b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37bc:	dc 01       	movw	r26, r24
    37be:	cb 01       	movw	r24, r22
    37c0:	8d 8b       	std	Y+21, r24	; 0x15
    37c2:	9e 8b       	std	Y+22, r25	; 0x16
    37c4:	af 8b       	std	Y+23, r26	; 0x17
    37c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37c8:	6d 89       	ldd	r22, Y+21	; 0x15
    37ca:	7e 89       	ldd	r23, Y+22	; 0x16
    37cc:	8f 89       	ldd	r24, Y+23	; 0x17
    37ce:	98 8d       	ldd	r25, Y+24	; 0x18
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	40 e8       	ldi	r20, 0x80	; 128
    37d6:	5f e3       	ldi	r21, 0x3F	; 63
    37d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37dc:	88 23       	and	r24, r24
    37de:	2c f4       	brge	.+10     	; 0x37ea <enterPassword+0xa0>
		__ticks = 1;
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	9c 8b       	std	Y+20, r25	; 0x14
    37e6:	8b 8b       	std	Y+19, r24	; 0x13
    37e8:	3f c0       	rjmp	.+126    	; 0x3868 <enterPassword+0x11e>
	else if (__tmp > 65535)
    37ea:	6d 89       	ldd	r22, Y+21	; 0x15
    37ec:	7e 89       	ldd	r23, Y+22	; 0x16
    37ee:	8f 89       	ldd	r24, Y+23	; 0x17
    37f0:	98 8d       	ldd	r25, Y+24	; 0x18
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	3f ef       	ldi	r19, 0xFF	; 255
    37f6:	4f e7       	ldi	r20, 0x7F	; 127
    37f8:	57 e4       	ldi	r21, 0x47	; 71
    37fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37fe:	18 16       	cp	r1, r24
    3800:	4c f5       	brge	.+82     	; 0x3854 <enterPassword+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3802:	69 8d       	ldd	r22, Y+25	; 0x19
    3804:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3806:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3808:	9c 8d       	ldd	r25, Y+28	; 0x1c
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	40 e2       	ldi	r20, 0x20	; 32
    3810:	51 e4       	ldi	r21, 0x41	; 65
    3812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3816:	dc 01       	movw	r26, r24
    3818:	cb 01       	movw	r24, r22
    381a:	bc 01       	movw	r22, r24
    381c:	cd 01       	movw	r24, r26
    381e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	9c 8b       	std	Y+20, r25	; 0x14
    3828:	8b 8b       	std	Y+19, r24	; 0x13
    382a:	0f c0       	rjmp	.+30     	; 0x384a <enterPassword+0x100>
    382c:	88 ec       	ldi	r24, 0xC8	; 200
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	9a 8b       	std	Y+18, r25	; 0x12
    3832:	89 8b       	std	Y+17, r24	; 0x11
    3834:	89 89       	ldd	r24, Y+17	; 0x11
    3836:	9a 89       	ldd	r25, Y+18	; 0x12
    3838:	01 97       	sbiw	r24, 0x01	; 1
    383a:	f1 f7       	brne	.-4      	; 0x3838 <enterPassword+0xee>
    383c:	9a 8b       	std	Y+18, r25	; 0x12
    383e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3840:	8b 89       	ldd	r24, Y+19	; 0x13
    3842:	9c 89       	ldd	r25, Y+20	; 0x14
    3844:	01 97       	sbiw	r24, 0x01	; 1
    3846:	9c 8b       	std	Y+20, r25	; 0x14
    3848:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    384a:	8b 89       	ldd	r24, Y+19	; 0x13
    384c:	9c 89       	ldd	r25, Y+20	; 0x14
    384e:	00 97       	sbiw	r24, 0x00	; 0
    3850:	69 f7       	brne	.-38     	; 0x382c <enterPassword+0xe2>
    3852:	14 c0       	rjmp	.+40     	; 0x387c <enterPassword+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3854:	6d 89       	ldd	r22, Y+21	; 0x15
    3856:	7e 89       	ldd	r23, Y+22	; 0x16
    3858:	8f 89       	ldd	r24, Y+23	; 0x17
    385a:	98 8d       	ldd	r25, Y+24	; 0x18
    385c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3860:	dc 01       	movw	r26, r24
    3862:	cb 01       	movw	r24, r22
    3864:	9c 8b       	std	Y+20, r25	; 0x14
    3866:	8b 8b       	std	Y+19, r24	; 0x13
    3868:	8b 89       	ldd	r24, Y+19	; 0x13
    386a:	9c 89       	ldd	r25, Y+20	; 0x14
    386c:	98 8b       	std	Y+16, r25	; 0x10
    386e:	8f 87       	std	Y+15, r24	; 0x0f
    3870:	8f 85       	ldd	r24, Y+15	; 0x0f
    3872:	98 89       	ldd	r25, Y+16	; 0x10
    3874:	01 97       	sbiw	r24, 0x01	; 1
    3876:	f1 f7       	brne	.-4      	; 0x3874 <enterPassword+0x12a>
    3878:	98 8b       	std	Y+16, r25	; 0x10
    387a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms (KEYPAD_DELAY);
		LCD_displayCharacter('*');
    387c:	8a e2       	ldi	r24, 0x2A	; 42
    387e:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <LCD_displayCharacter>
void enterPassword (uint8 password[])
{
	uint8 i;
	LCD_moveCursor(1, 5);

	for (i=0 ; i<6 ;++i)
    3882:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3884:	8f 5f       	subi	r24, 0xFF	; 255
    3886:	8d 8f       	std	Y+29, r24	; 0x1d
    3888:	8d 8d       	ldd	r24, Y+29	; 0x1d
    388a:	86 30       	cpi	r24, 0x06	; 6
    388c:	08 f4       	brcc	.+2      	; 0x3890 <enterPassword+0x146>
    388e:	71 cf       	rjmp	.-286    	; 0x3772 <enterPassword+0x28>
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	aa ef       	ldi	r26, 0xFA	; 250
    3896:	b3 e4       	ldi	r27, 0x43	; 67
    3898:	8b 87       	std	Y+11, r24	; 0x0b
    389a:	9c 87       	std	Y+12, r25	; 0x0c
    389c:	ad 87       	std	Y+13, r26	; 0x0d
    389e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    38a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    38a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	4a ef       	ldi	r20, 0xFA	; 250
    38ae:	54 e4       	ldi	r21, 0x44	; 68
    38b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	8f 83       	std	Y+7, r24	; 0x07
    38ba:	98 87       	std	Y+8, r25	; 0x08
    38bc:	a9 87       	std	Y+9, r26	; 0x09
    38be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38c0:	6f 81       	ldd	r22, Y+7	; 0x07
    38c2:	78 85       	ldd	r23, Y+8	; 0x08
    38c4:	89 85       	ldd	r24, Y+9	; 0x09
    38c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c8:	20 e0       	ldi	r18, 0x00	; 0
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	40 e8       	ldi	r20, 0x80	; 128
    38ce:	5f e3       	ldi	r21, 0x3F	; 63
    38d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38d4:	88 23       	and	r24, r24
    38d6:	2c f4       	brge	.+10     	; 0x38e2 <enterPassword+0x198>
		__ticks = 1;
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	9e 83       	std	Y+6, r25	; 0x06
    38de:	8d 83       	std	Y+5, r24	; 0x05
    38e0:	3f c0       	rjmp	.+126    	; 0x3960 <enterPassword+0x216>
	else if (__tmp > 65535)
    38e2:	6f 81       	ldd	r22, Y+7	; 0x07
    38e4:	78 85       	ldd	r23, Y+8	; 0x08
    38e6:	89 85       	ldd	r24, Y+9	; 0x09
    38e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	3f ef       	ldi	r19, 0xFF	; 255
    38ee:	4f e7       	ldi	r20, 0x7F	; 127
    38f0:	57 e4       	ldi	r21, 0x47	; 71
    38f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38f6:	18 16       	cp	r1, r24
    38f8:	4c f5       	brge	.+82     	; 0x394c <enterPassword+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    38fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    38fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3900:	9e 85       	ldd	r25, Y+14	; 0x0e
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	40 e2       	ldi	r20, 0x20	; 32
    3908:	51 e4       	ldi	r21, 0x41	; 65
    390a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	bc 01       	movw	r22, r24
    3914:	cd 01       	movw	r24, r26
    3916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	9e 83       	std	Y+6, r25	; 0x06
    3920:	8d 83       	std	Y+5, r24	; 0x05
    3922:	0f c0       	rjmp	.+30     	; 0x3942 <enterPassword+0x1f8>
    3924:	88 ec       	ldi	r24, 0xC8	; 200
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	9c 83       	std	Y+4, r25	; 0x04
    392a:	8b 83       	std	Y+3, r24	; 0x03
    392c:	8b 81       	ldd	r24, Y+3	; 0x03
    392e:	9c 81       	ldd	r25, Y+4	; 0x04
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	f1 f7       	brne	.-4      	; 0x3930 <enterPassword+0x1e6>
    3934:	9c 83       	std	Y+4, r25	; 0x04
    3936:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3938:	8d 81       	ldd	r24, Y+5	; 0x05
    393a:	9e 81       	ldd	r25, Y+6	; 0x06
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	9e 83       	std	Y+6, r25	; 0x06
    3940:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3942:	8d 81       	ldd	r24, Y+5	; 0x05
    3944:	9e 81       	ldd	r25, Y+6	; 0x06
    3946:	00 97       	sbiw	r24, 0x00	; 0
    3948:	69 f7       	brne	.-38     	; 0x3924 <enterPassword+0x1da>
    394a:	14 c0       	rjmp	.+40     	; 0x3974 <enterPassword+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    394c:	6f 81       	ldd	r22, Y+7	; 0x07
    394e:	78 85       	ldd	r23, Y+8	; 0x08
    3950:	89 85       	ldd	r24, Y+9	; 0x09
    3952:	9a 85       	ldd	r25, Y+10	; 0x0a
    3954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	9e 83       	std	Y+6, r25	; 0x06
    395e:	8d 83       	std	Y+5, r24	; 0x05
    3960:	8d 81       	ldd	r24, Y+5	; 0x05
    3962:	9e 81       	ldd	r25, Y+6	; 0x06
    3964:	9a 83       	std	Y+2, r25	; 0x02
    3966:	89 83       	std	Y+1, r24	; 0x01
    3968:	89 81       	ldd	r24, Y+1	; 0x01
    396a:	9a 81       	ldd	r25, Y+2	; 0x02
    396c:	01 97       	sbiw	r24, 0x01	; 1
    396e:	f1 f7       	brne	.-4      	; 0x396c <enterPassword+0x222>
    3970:	9a 83       	std	Y+2, r25	; 0x02
    3972:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms (KEYPAD_DELAY);
		LCD_displayCharacter('*');
	}

	_delay_ms (KEYPAD_DELAY);
}
    3974:	6f 96       	adiw	r28, 0x1f	; 31
    3976:	0f b6       	in	r0, 0x3f	; 63
    3978:	f8 94       	cli
    397a:	de bf       	out	0x3e, r29	; 62
    397c:	0f be       	out	0x3f, r0	; 63
    397e:	cd bf       	out	0x3d, r28	; 61
    3980:	cf 91       	pop	r28
    3982:	df 91       	pop	r29
    3984:	1f 91       	pop	r17
    3986:	0f 91       	pop	r16
    3988:	08 95       	ret

0000398a <sendPassword>:

void sendPassword (uint8 password[])
{
    398a:	df 93       	push	r29
    398c:	cf 93       	push	r28
    398e:	cd b7       	in	r28, 0x3d	; 61
    3990:	de b7       	in	r29, 0x3e	; 62
    3992:	61 97       	sbiw	r28, 0x11	; 17
    3994:	0f b6       	in	r0, 0x3f	; 63
    3996:	f8 94       	cli
    3998:	de bf       	out	0x3e, r29	; 62
    399a:	0f be       	out	0x3f, r0	; 63
    399c:	cd bf       	out	0x3d, r28	; 61
    399e:	99 8b       	std	Y+17, r25	; 0x11
    39a0:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    39a2:	1f 86       	std	Y+15, r1	; 0x0f
    39a4:	0e c0       	rjmp	.+28     	; 0x39c2 <sendPassword+0x38>
	{
		UART_sendByte (password[i]);
    39a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    39a8:	28 2f       	mov	r18, r24
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	88 89       	ldd	r24, Y+16	; 0x10
    39ae:	99 89       	ldd	r25, Y+17	; 0x11
    39b0:	fc 01       	movw	r30, r24
    39b2:	e2 0f       	add	r30, r18
    39b4:	f3 1f       	adc	r31, r19
    39b6:	80 81       	ld	r24, Z
    39b8:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>

void sendPassword (uint8 password[])
{
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    39bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    39be:	8f 5f       	subi	r24, 0xFF	; 255
    39c0:	8f 87       	std	Y+15, r24	; 0x0f
    39c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    39c4:	85 30       	cpi	r24, 0x05	; 5
    39c6:	78 f3       	brcs	.-34     	; 0x39a6 <sendPassword+0x1c>
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	a8 e4       	ldi	r26, 0x48	; 72
    39ce:	b2 e4       	ldi	r27, 0x42	; 66
    39d0:	8b 87       	std	Y+11, r24	; 0x0b
    39d2:	9c 87       	std	Y+12, r25	; 0x0c
    39d4:	ad 87       	std	Y+13, r26	; 0x0d
    39d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    39da:	7c 85       	ldd	r23, Y+12	; 0x0c
    39dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    39de:	9e 85       	ldd	r25, Y+14	; 0x0e
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	4a ef       	ldi	r20, 0xFA	; 250
    39e6:	54 e4       	ldi	r21, 0x44	; 68
    39e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ec:	dc 01       	movw	r26, r24
    39ee:	cb 01       	movw	r24, r22
    39f0:	8f 83       	std	Y+7, r24	; 0x07
    39f2:	98 87       	std	Y+8, r25	; 0x08
    39f4:	a9 87       	std	Y+9, r26	; 0x09
    39f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39f8:	6f 81       	ldd	r22, Y+7	; 0x07
    39fa:	78 85       	ldd	r23, Y+8	; 0x08
    39fc:	89 85       	ldd	r24, Y+9	; 0x09
    39fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	40 e8       	ldi	r20, 0x80	; 128
    3a06:	5f e3       	ldi	r21, 0x3F	; 63
    3a08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a0c:	88 23       	and	r24, r24
    3a0e:	2c f4       	brge	.+10     	; 0x3a1a <sendPassword+0x90>
		__ticks = 1;
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	9e 83       	std	Y+6, r25	; 0x06
    3a16:	8d 83       	std	Y+5, r24	; 0x05
    3a18:	3f c0       	rjmp	.+126    	; 0x3a98 <sendPassword+0x10e>
	else if (__tmp > 65535)
    3a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a1c:	78 85       	ldd	r23, Y+8	; 0x08
    3a1e:	89 85       	ldd	r24, Y+9	; 0x09
    3a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	3f ef       	ldi	r19, 0xFF	; 255
    3a26:	4f e7       	ldi	r20, 0x7F	; 127
    3a28:	57 e4       	ldi	r21, 0x47	; 71
    3a2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a2e:	18 16       	cp	r1, r24
    3a30:	4c f5       	brge	.+82     	; 0x3a84 <sendPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	40 e2       	ldi	r20, 0x20	; 32
    3a40:	51 e4       	ldi	r21, 0x41	; 65
    3a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	bc 01       	movw	r22, r24
    3a4c:	cd 01       	movw	r24, r26
    3a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	9e 83       	std	Y+6, r25	; 0x06
    3a58:	8d 83       	std	Y+5, r24	; 0x05
    3a5a:	0f c0       	rjmp	.+30     	; 0x3a7a <sendPassword+0xf0>
    3a5c:	88 ec       	ldi	r24, 0xC8	; 200
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	9c 83       	std	Y+4, r25	; 0x04
    3a62:	8b 83       	std	Y+3, r24	; 0x03
    3a64:	8b 81       	ldd	r24, Y+3	; 0x03
    3a66:	9c 81       	ldd	r25, Y+4	; 0x04
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	f1 f7       	brne	.-4      	; 0x3a68 <sendPassword+0xde>
    3a6c:	9c 83       	std	Y+4, r25	; 0x04
    3a6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a70:	8d 81       	ldd	r24, Y+5	; 0x05
    3a72:	9e 81       	ldd	r25, Y+6	; 0x06
    3a74:	01 97       	sbiw	r24, 0x01	; 1
    3a76:	9e 83       	std	Y+6, r25	; 0x06
    3a78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7e:	00 97       	sbiw	r24, 0x00	; 0
    3a80:	69 f7       	brne	.-38     	; 0x3a5c <sendPassword+0xd2>
    3a82:	14 c0       	rjmp	.+40     	; 0x3aac <sendPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a84:	6f 81       	ldd	r22, Y+7	; 0x07
    3a86:	78 85       	ldd	r23, Y+8	; 0x08
    3a88:	89 85       	ldd	r24, Y+9	; 0x09
    3a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	9e 83       	std	Y+6, r25	; 0x06
    3a96:	8d 83       	std	Y+5, r24	; 0x05
    3a98:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9c:	9a 83       	std	Y+2, r25	; 0x02
    3a9e:	89 83       	std	Y+1, r24	; 0x01
    3aa0:	89 81       	ldd	r24, Y+1	; 0x01
    3aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa4:	01 97       	sbiw	r24, 0x01	; 1
    3aa6:	f1 f7       	brne	.-4      	; 0x3aa4 <sendPassword+0x11a>
    3aa8:	9a 83       	std	Y+2, r25	; 0x02
    3aaa:	89 83       	std	Y+1, r24	; 0x01
	{
		UART_sendByte (password[i]);
	}
	_delay_ms (UART_DELAY);
}
    3aac:	61 96       	adiw	r28, 0x11	; 17
    3aae:	0f b6       	in	r0, 0x3f	; 63
    3ab0:	f8 94       	cli
    3ab2:	de bf       	out	0x3e, r29	; 62
    3ab4:	0f be       	out	0x3f, r0	; 63
    3ab6:	cd bf       	out	0x3d, r28	; 61
    3ab8:	cf 91       	pop	r28
    3aba:	df 91       	pop	r29
    3abc:	08 95       	ret

00003abe <optionsDisplay>:

void optionsDisplay (void)
{
    3abe:	df 93       	push	r29
    3ac0:	cf 93       	push	r28
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    3ac6:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "- :Change Pass");
    3aca:	2f ed       	ldi	r18, 0xDF	; 223
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	60 e0       	ldi	r22, 0x00	; 0
    3ad2:	a9 01       	movw	r20, r18
    3ad4:	0e 94 37 10 	call	0x206e	; 0x206e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "+ :Open Door");
    3ad8:	2e ee       	ldi	r18, 0xEE	; 238
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	60 e0       	ldi	r22, 0x00	; 0
    3ae0:	a9 01       	movw	r20, r18
    3ae2:	0e 94 37 10 	call	0x206e	; 0x206e <LCD_displayStringRowColumn>
}
    3ae6:	cf 91       	pop	r28
    3ae8:	df 91       	pop	r29
    3aea:	08 95       	ret

00003aec <openDoor>:

void openDoor (void)
{
    3aec:	df 93       	push	r29
    3aee:	cf 93       	push	r28
    3af0:	cd b7       	in	r28, 0x3d	; 61
    3af2:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    3af4:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
	LCD_displayString("Door Unlocking.");
    3af8:	8b ef       	ldi	r24, 0xFB	; 251
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>

	wait(15);
    3b00:	8f e0       	ldi	r24, 0x0F	; 15
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <wait>

	LCD_clearScreen();
    3b08:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
	LCD_displayString("Door Opened");
    3b0c:	8b e0       	ldi	r24, 0x0B	; 11
    3b0e:	91 e0       	ldi	r25, 0x01	; 1
    3b10:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>

	wait(3);
    3b14:	83 e0       	ldi	r24, 0x03	; 3
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <wait>

	LCD_clearScreen();
    3b1c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
	LCD_displayString("Door is Locking.");
    3b20:	87 e1       	ldi	r24, 0x17	; 23
    3b22:	91 e0       	ldi	r25, 0x01	; 1
    3b24:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>
	wait(15);
    3b28:	8f e0       	ldi	r24, 0x0F	; 15
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <wait>
}
    3b30:	cf 91       	pop	r28
    3b32:	df 91       	pop	r29
    3b34:	08 95       	ret

00003b36 <securityAlarm>:

void securityAlarm (void)
{
    3b36:	df 93       	push	r29
    3b38:	cf 93       	push	r28
    3b3a:	cd b7       	in	r28, 0x3d	; 61
    3b3c:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
    3b3e:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_clearScreen>
	LCD_displayString("Security Alarm....");
    3b42:	88 e2       	ldi	r24, 0x28	; 40
    3b44:	91 e0       	ldi	r25, 0x01	; 1
    3b46:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_displayString>
	wait(60);
    3b4a:	8c e3       	ldi	r24, 0x3C	; 60
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <wait>
}
    3b52:	cf 91       	pop	r28
    3b54:	df 91       	pop	r29
    3b56:	08 95       	ret

00003b58 <timer_tick>:

void timer_tick(void){
    3b58:	df 93       	push	r29
    3b5a:	cf 93       	push	r28
    3b5c:	cd b7       	in	r28, 0x3d	; 61
    3b5e:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    3b60:	80 91 50 02 	lds	r24, 0x0250
    3b64:	90 91 51 02 	lds	r25, 0x0251
    3b68:	a0 91 52 02 	lds	r26, 0x0252
    3b6c:	b0 91 53 02 	lds	r27, 0x0253
    3b70:	01 96       	adiw	r24, 0x01	; 1
    3b72:	a1 1d       	adc	r26, r1
    3b74:	b1 1d       	adc	r27, r1
    3b76:	80 93 50 02 	sts	0x0250, r24
    3b7a:	90 93 51 02 	sts	0x0251, r25
    3b7e:	a0 93 52 02 	sts	0x0252, r26
    3b82:	b0 93 53 02 	sts	0x0253, r27
}
    3b86:	cf 91       	pop	r28
    3b88:	df 91       	pop	r29
    3b8a:	08 95       	ret

00003b8c <wait>:

void wait(uint16 seconds){
    3b8c:	df 93       	push	r29
    3b8e:	cf 93       	push	r28
    3b90:	cd b7       	in	r28, 0x3d	; 61
    3b92:	de b7       	in	r29, 0x3e	; 62
    3b94:	61 97       	sbiw	r28, 0x11	; 17
    3b96:	0f b6       	in	r0, 0x3f	; 63
    3b98:	f8 94       	cli
    3b9a:	de bf       	out	0x3e, r29	; 62
    3b9c:	0f be       	out	0x3f, r0	; 63
    3b9e:	cd bf       	out	0x3d, r28	; 61
    3ba0:	9c 87       	std	Y+12, r25	; 0x0c
    3ba2:	8b 87       	std	Y+11, r24	; 0x0b
	g_tick=0;
    3ba4:	10 92 50 02 	sts	0x0250, r1
    3ba8:	10 92 51 02 	sts	0x0251, r1
    3bac:	10 92 52 02 	sts	0x0252, r1
    3bb0:	10 92 53 02 	sts	0x0253, r1
	uint32 counter=seconds;
    3bb4:	8b 85       	ldd	r24, Y+11	; 0x0b
    3bb6:	9c 85       	ldd	r25, Y+12	; 0x0c
    3bb8:	cc 01       	movw	r24, r24
    3bba:	a0 e0       	ldi	r26, 0x00	; 0
    3bbc:	b0 e0       	ldi	r27, 0x00	; 0
    3bbe:	89 83       	std	Y+1, r24	; 0x01
    3bc0:	9a 83       	std	Y+2, r25	; 0x02
    3bc2:	ab 83       	std	Y+3, r26	; 0x03
    3bc4:	bc 83       	std	Y+4, r27	; 0x04
	Timer1_ConfigType timerS={0,7813,F_1024,CTC};
    3bc6:	ce 01       	movw	r24, r28
    3bc8:	05 96       	adiw	r24, 0x05	; 5
    3bca:	9e 87       	std	Y+14, r25	; 0x0e
    3bcc:	8d 87       	std	Y+13, r24	; 0x0d
    3bce:	ea e4       	ldi	r30, 0x4A	; 74
    3bd0:	f2 e0       	ldi	r31, 0x02	; 2
    3bd2:	f8 8b       	std	Y+16, r31	; 0x10
    3bd4:	ef 87       	std	Y+15, r30	; 0x0f
    3bd6:	f6 e0       	ldi	r31, 0x06	; 6
    3bd8:	f9 8b       	std	Y+17, r31	; 0x11
    3bda:	ef 85       	ldd	r30, Y+15	; 0x0f
    3bdc:	f8 89       	ldd	r31, Y+16	; 0x10
    3bde:	00 80       	ld	r0, Z
    3be0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3be2:	98 89       	ldd	r25, Y+16	; 0x10
    3be4:	01 96       	adiw	r24, 0x01	; 1
    3be6:	98 8b       	std	Y+16, r25	; 0x10
    3be8:	8f 87       	std	Y+15, r24	; 0x0f
    3bea:	ed 85       	ldd	r30, Y+13	; 0x0d
    3bec:	fe 85       	ldd	r31, Y+14	; 0x0e
    3bee:	00 82       	st	Z, r0
    3bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bf4:	01 96       	adiw	r24, 0x01	; 1
    3bf6:	9e 87       	std	Y+14, r25	; 0x0e
    3bf8:	8d 87       	std	Y+13, r24	; 0x0d
    3bfa:	99 89       	ldd	r25, Y+17	; 0x11
    3bfc:	91 50       	subi	r25, 0x01	; 1
    3bfe:	99 8b       	std	Y+17, r25	; 0x11
    3c00:	e9 89       	ldd	r30, Y+17	; 0x11
    3c02:	ee 23       	and	r30, r30
    3c04:	51 f7       	brne	.-44     	; 0x3bda <wait+0x4e>
	Timer1_init(&timerS);
    3c06:	ce 01       	movw	r24, r28
    3c08:	05 96       	adiw	r24, 0x05	; 5
    3c0a:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <Timer1_init>
	Timer1_setCallBack(timer_tick);
    3c0e:	8c ea       	ldi	r24, 0xAC	; 172
    3c10:	9d e1       	ldi	r25, 0x1D	; 29
    3c12:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <Timer1_setCallBack>
	while(g_tick<counter);
    3c16:	20 91 50 02 	lds	r18, 0x0250
    3c1a:	30 91 51 02 	lds	r19, 0x0251
    3c1e:	40 91 52 02 	lds	r20, 0x0252
    3c22:	50 91 53 02 	lds	r21, 0x0253
    3c26:	89 81       	ldd	r24, Y+1	; 0x01
    3c28:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2a:	ab 81       	ldd	r26, Y+3	; 0x03
    3c2c:	bc 81       	ldd	r27, Y+4	; 0x04
    3c2e:	28 17       	cp	r18, r24
    3c30:	39 07       	cpc	r19, r25
    3c32:	4a 07       	cpc	r20, r26
    3c34:	5b 07       	cpc	r21, r27
    3c36:	78 f3       	brcs	.-34     	; 0x3c16 <wait+0x8a>
	Timer1_deInit();
    3c38:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <Timer1_deInit>
}
    3c3c:	61 96       	adiw	r28, 0x11	; 17
    3c3e:	0f b6       	in	r0, 0x3f	; 63
    3c40:	f8 94       	cli
    3c42:	de bf       	out	0x3e, r29	; 62
    3c44:	0f be       	out	0x3f, r0	; 63
    3c46:	cd bf       	out	0x3d, r28	; 61
    3c48:	cf 91       	pop	r28
    3c4a:	df 91       	pop	r29
    3c4c:	08 95       	ret

00003c4e <main>:
/*******************************************************************************
 *                              MAIN Function                                  *
 *******************************************************************************/

int main()
{
    3c4e:	df 93       	push	r29
    3c50:	cf 93       	push	r28
    3c52:	cd b7       	in	r28, 0x3d	; 61
    3c54:	de b7       	in	r29, 0x3e	; 62
	start();
    3c56:	0e 94 7d 10 	call	0x20fa	; 0x20fa <start>
    3c5a:	80 e0       	ldi	r24, 0x00	; 0
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
}
    3c5e:	cf 91       	pop	r28
    3c60:	df 91       	pop	r29
    3c62:	08 95       	ret

00003c64 <__vector_9>:
#include "common_macros.h"

static volatile void(*g_callBackPtr)(void)=NULL_PTR;

ISR(TIMER1_OVF_vect)
{
    3c64:	1f 92       	push	r1
    3c66:	0f 92       	push	r0
    3c68:	0f b6       	in	r0, 0x3f	; 63
    3c6a:	0f 92       	push	r0
    3c6c:	11 24       	eor	r1, r1
    3c6e:	2f 93       	push	r18
    3c70:	3f 93       	push	r19
    3c72:	4f 93       	push	r20
    3c74:	5f 93       	push	r21
    3c76:	6f 93       	push	r22
    3c78:	7f 93       	push	r23
    3c7a:	8f 93       	push	r24
    3c7c:	9f 93       	push	r25
    3c7e:	af 93       	push	r26
    3c80:	bf 93       	push	r27
    3c82:	ef 93       	push	r30
    3c84:	ff 93       	push	r31
    3c86:	df 93       	push	r29
    3c88:	cf 93       	push	r28
    3c8a:	cd b7       	in	r28, 0x3d	; 61
    3c8c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3c8e:	80 91 54 02 	lds	r24, 0x0254
    3c92:	90 91 55 02 	lds	r25, 0x0255
    3c96:	00 97       	sbiw	r24, 0x00	; 0
    3c98:	29 f0       	breq	.+10     	; 0x3ca4 <__vector_9+0x40>
	{
		(g_callBackPtr)();
    3c9a:	e0 91 54 02 	lds	r30, 0x0254
    3c9e:	f0 91 55 02 	lds	r31, 0x0255
    3ca2:	09 95       	icall
	}
}
    3ca4:	cf 91       	pop	r28
    3ca6:	df 91       	pop	r29
    3ca8:	ff 91       	pop	r31
    3caa:	ef 91       	pop	r30
    3cac:	bf 91       	pop	r27
    3cae:	af 91       	pop	r26
    3cb0:	9f 91       	pop	r25
    3cb2:	8f 91       	pop	r24
    3cb4:	7f 91       	pop	r23
    3cb6:	6f 91       	pop	r22
    3cb8:	5f 91       	pop	r21
    3cba:	4f 91       	pop	r20
    3cbc:	3f 91       	pop	r19
    3cbe:	2f 91       	pop	r18
    3cc0:	0f 90       	pop	r0
    3cc2:	0f be       	out	0x3f, r0	; 63
    3cc4:	0f 90       	pop	r0
    3cc6:	1f 90       	pop	r1
    3cc8:	18 95       	reti

00003cca <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    3cca:	1f 92       	push	r1
    3ccc:	0f 92       	push	r0
    3cce:	0f b6       	in	r0, 0x3f	; 63
    3cd0:	0f 92       	push	r0
    3cd2:	11 24       	eor	r1, r1
    3cd4:	2f 93       	push	r18
    3cd6:	3f 93       	push	r19
    3cd8:	4f 93       	push	r20
    3cda:	5f 93       	push	r21
    3cdc:	6f 93       	push	r22
    3cde:	7f 93       	push	r23
    3ce0:	8f 93       	push	r24
    3ce2:	9f 93       	push	r25
    3ce4:	af 93       	push	r26
    3ce6:	bf 93       	push	r27
    3ce8:	ef 93       	push	r30
    3cea:	ff 93       	push	r31
    3cec:	df 93       	push	r29
    3cee:	cf 93       	push	r28
    3cf0:	cd b7       	in	r28, 0x3d	; 61
    3cf2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3cf4:	80 91 54 02 	lds	r24, 0x0254
    3cf8:	90 91 55 02 	lds	r25, 0x0255
    3cfc:	00 97       	sbiw	r24, 0x00	; 0
    3cfe:	29 f0       	breq	.+10     	; 0x3d0a <__vector_7+0x40>
	{
		(g_callBackPtr)();
    3d00:	e0 91 54 02 	lds	r30, 0x0254
    3d04:	f0 91 55 02 	lds	r31, 0x0255
    3d08:	09 95       	icall
	}
}
    3d0a:	cf 91       	pop	r28
    3d0c:	df 91       	pop	r29
    3d0e:	ff 91       	pop	r31
    3d10:	ef 91       	pop	r30
    3d12:	bf 91       	pop	r27
    3d14:	af 91       	pop	r26
    3d16:	9f 91       	pop	r25
    3d18:	8f 91       	pop	r24
    3d1a:	7f 91       	pop	r23
    3d1c:	6f 91       	pop	r22
    3d1e:	5f 91       	pop	r21
    3d20:	4f 91       	pop	r20
    3d22:	3f 91       	pop	r19
    3d24:	2f 91       	pop	r18
    3d26:	0f 90       	pop	r0
    3d28:	0f be       	out	0x3f, r0	; 63
    3d2a:	0f 90       	pop	r0
    3d2c:	1f 90       	pop	r1
    3d2e:	18 95       	reti

00003d30 <PWM_Timer0_Init>:

void PWM_Timer0_Init(unsigned char set_duty_cycle)
{
    3d30:	0f 93       	push	r16
    3d32:	1f 93       	push	r17
    3d34:	df 93       	push	r29
    3d36:	cf 93       	push	r28
    3d38:	0f 92       	push	r0
    3d3a:	cd b7       	in	r28, 0x3d	; 61
    3d3c:	de b7       	in	r29, 0x3e	; 62
    3d3e:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    3d40:	e2 e5       	ldi	r30, 0x52	; 82
    3d42:	f0 e0       	ldi	r31, 0x00	; 0
    3d44:	10 82       	st	Z, r1

	OCR0 = ((float)set_duty_cycle/100) * 255;
    3d46:	0c e5       	ldi	r16, 0x5C	; 92
    3d48:	10 e0       	ldi	r17, 0x00	; 0
    3d4a:	89 81       	ldd	r24, Y+1	; 0x01
    3d4c:	88 2f       	mov	r24, r24
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	a0 e0       	ldi	r26, 0x00	; 0
    3d52:	b0 e0       	ldi	r27, 0x00	; 0
    3d54:	bc 01       	movw	r22, r24
    3d56:	cd 01       	movw	r24, r26
    3d58:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	bc 01       	movw	r22, r24
    3d62:	cd 01       	movw	r24, r26
    3d64:	20 e0       	ldi	r18, 0x00	; 0
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	48 ec       	ldi	r20, 0xC8	; 200
    3d6a:	52 e4       	ldi	r21, 0x42	; 66
    3d6c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	bc 01       	movw	r22, r24
    3d76:	cd 01       	movw	r24, r26
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	4f e7       	ldi	r20, 0x7F	; 127
    3d7e:	53 e4       	ldi	r21, 0x43	; 67
    3d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	bc 01       	movw	r22, r24
    3d8a:	cd 01       	movw	r24, r26
    3d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d90:	dc 01       	movw	r26, r24
    3d92:	cb 01       	movw	r24, r22
    3d94:	f8 01       	movw	r30, r16
    3d96:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    3d98:	a7 e3       	ldi	r26, 0x37	; 55
    3d9a:	b0 e0       	ldi	r27, 0x00	; 0
    3d9c:	e7 e3       	ldi	r30, 0x37	; 55
    3d9e:	f0 e0       	ldi	r31, 0x00	; 0
    3da0:	80 81       	ld	r24, Z
    3da2:	88 60       	ori	r24, 0x08	; 8
    3da4:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    3da6:	e3 e5       	ldi	r30, 0x53	; 83
    3da8:	f0 e0       	ldi	r31, 0x00	; 0
    3daa:	8a e6       	ldi	r24, 0x6A	; 106
    3dac:	80 83       	st	Z, r24
}
    3dae:	0f 90       	pop	r0
    3db0:	cf 91       	pop	r28
    3db2:	df 91       	pop	r29
    3db4:	1f 91       	pop	r17
    3db6:	0f 91       	pop	r16
    3db8:	08 95       	ret

00003dba <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    3dba:	df 93       	push	r29
    3dbc:	cf 93       	push	r28
    3dbe:	00 d0       	rcall	.+0      	; 0x3dc0 <Timer1_init+0x6>
    3dc0:	cd b7       	in	r28, 0x3d	; 61
    3dc2:	de b7       	in	r29, 0x3e	; 62
    3dc4:	9a 83       	std	Y+2, r25	; 0x02
    3dc6:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A =0;
    3dc8:	ef e4       	ldi	r30, 0x4F	; 79
    3dca:	f0 e0       	ldi	r31, 0x00	; 0
    3dcc:	10 82       	st	Z, r1
    SET_BIT(TCCR1A,FOC1A);
    3dce:	af e4       	ldi	r26, 0x4F	; 79
    3dd0:	b0 e0       	ldi	r27, 0x00	; 0
    3dd2:	ef e4       	ldi	r30, 0x4F	; 79
    3dd4:	f0 e0       	ldi	r31, 0x00	; 0
    3dd6:	80 81       	ld	r24, Z
    3dd8:	88 60       	ori	r24, 0x08	; 8
    3dda:	8c 93       	st	X, r24
    SET_BIT(TCCR1A,FOC1B);
    3ddc:	af e4       	ldi	r26, 0x4F	; 79
    3dde:	b0 e0       	ldi	r27, 0x00	; 0
    3de0:	ef e4       	ldi	r30, 0x4F	; 79
    3de2:	f0 e0       	ldi	r31, 0x00	; 0
    3de4:	80 81       	ld	r24, Z
    3de6:	84 60       	ori	r24, 0x04	; 4
    3de8:	8c 93       	st	X, r24
    TCCR1B = Config_Ptr->prescaler;
    3dea:	ae e4       	ldi	r26, 0x4E	; 78
    3dec:	b0 e0       	ldi	r27, 0x00	; 0
    3dee:	e9 81       	ldd	r30, Y+1	; 0x01
    3df0:	fa 81       	ldd	r31, Y+2	; 0x02
    3df2:	84 81       	ldd	r24, Z+4	; 0x04
    3df4:	8c 93       	st	X, r24
    TCNT1 = Config_Ptr->initial_value;
    3df6:	ac e4       	ldi	r26, 0x4C	; 76
    3df8:	b0 e0       	ldi	r27, 0x00	; 0
    3dfa:	e9 81       	ldd	r30, Y+1	; 0x01
    3dfc:	fa 81       	ldd	r31, Y+2	; 0x02
    3dfe:	80 81       	ld	r24, Z
    3e00:	91 81       	ldd	r25, Z+1	; 0x01
    3e02:	11 96       	adiw	r26, 0x01	; 1
    3e04:	9c 93       	st	X, r25
    3e06:	8e 93       	st	-X, r24

    if (Config_Ptr->mode == Normal) {
    3e08:	e9 81       	ldd	r30, Y+1	; 0x01
    3e0a:	fa 81       	ldd	r31, Y+2	; 0x02
    3e0c:	85 81       	ldd	r24, Z+5	; 0x05
    3e0e:	88 23       	and	r24, r24
    3e10:	79 f4       	brne	.+30     	; 0x3e30 <Timer1_init+0x76>
        SET_BIT(TIMSK, TOIE1);
    3e12:	a9 e5       	ldi	r26, 0x59	; 89
    3e14:	b0 e0       	ldi	r27, 0x00	; 0
    3e16:	e9 e5       	ldi	r30, 0x59	; 89
    3e18:	f0 e0       	ldi	r31, 0x00	; 0
    3e1a:	80 81       	ld	r24, Z
    3e1c:	84 60       	ori	r24, 0x04	; 4
    3e1e:	8c 93       	st	X, r24
        SET_BIT(TIFR,TOV1);
    3e20:	a8 e5       	ldi	r26, 0x58	; 88
    3e22:	b0 e0       	ldi	r27, 0x00	; 0
    3e24:	e8 e5       	ldi	r30, 0x58	; 88
    3e26:	f0 e0       	ldi	r31, 0x00	; 0
    3e28:	80 81       	ld	r24, Z
    3e2a:	84 60       	ori	r24, 0x04	; 4
    3e2c:	8c 93       	st	X, r24
    3e2e:	23 c0       	rjmp	.+70     	; 0x3e76 <Timer1_init+0xbc>

    } else if (Config_Ptr->mode == CTC) {
    3e30:	e9 81       	ldd	r30, Y+1	; 0x01
    3e32:	fa 81       	ldd	r31, Y+2	; 0x02
    3e34:	85 81       	ldd	r24, Z+5	; 0x05
    3e36:	81 30       	cpi	r24, 0x01	; 1
    3e38:	f1 f4       	brne	.+60     	; 0x3e76 <Timer1_init+0xbc>
        SET_BIT(TCCR1B, WGM12);
    3e3a:	ae e4       	ldi	r26, 0x4E	; 78
    3e3c:	b0 e0       	ldi	r27, 0x00	; 0
    3e3e:	ee e4       	ldi	r30, 0x4E	; 78
    3e40:	f0 e0       	ldi	r31, 0x00	; 0
    3e42:	80 81       	ld	r24, Z
    3e44:	88 60       	ori	r24, 0x08	; 8
    3e46:	8c 93       	st	X, r24
        OCR1A = Config_Ptr->compare_value;
    3e48:	aa e4       	ldi	r26, 0x4A	; 74
    3e4a:	b0 e0       	ldi	r27, 0x00	; 0
    3e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    3e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    3e50:	82 81       	ldd	r24, Z+2	; 0x02
    3e52:	93 81       	ldd	r25, Z+3	; 0x03
    3e54:	11 96       	adiw	r26, 0x01	; 1
    3e56:	9c 93       	st	X, r25
    3e58:	8e 93       	st	-X, r24
        SET_BIT(TIMSK, OCIE1A);
    3e5a:	a9 e5       	ldi	r26, 0x59	; 89
    3e5c:	b0 e0       	ldi	r27, 0x00	; 0
    3e5e:	e9 e5       	ldi	r30, 0x59	; 89
    3e60:	f0 e0       	ldi	r31, 0x00	; 0
    3e62:	80 81       	ld	r24, Z
    3e64:	80 61       	ori	r24, 0x10	; 16
    3e66:	8c 93       	st	X, r24
        SET_BIT(TIFR,OCF1A);
    3e68:	a8 e5       	ldi	r26, 0x58	; 88
    3e6a:	b0 e0       	ldi	r27, 0x00	; 0
    3e6c:	e8 e5       	ldi	r30, 0x58	; 88
    3e6e:	f0 e0       	ldi	r31, 0x00	; 0
    3e70:	80 81       	ld	r24, Z
    3e72:	80 61       	ori	r24, 0x10	; 16
    3e74:	8c 93       	st	X, r24
    }
}
    3e76:	0f 90       	pop	r0
    3e78:	0f 90       	pop	r0
    3e7a:	cf 91       	pop	r28
    3e7c:	df 91       	pop	r29
    3e7e:	08 95       	ret

00003e80 <Timer1_deInit>:

void Timer1_deInit(void)
{
    3e80:	df 93       	push	r29
    3e82:	cf 93       	push	r28
    3e84:	cd b7       	in	r28, 0x3d	; 61
    3e86:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0xF8;
    3e88:	ee e4       	ldi	r30, 0x4E	; 78
    3e8a:	f0 e0       	ldi	r31, 0x00	; 0
    3e8c:	88 ef       	ldi	r24, 0xF8	; 248
    3e8e:	80 83       	st	Z, r24
	OCR1A = 0;
    3e90:	ea e4       	ldi	r30, 0x4A	; 74
    3e92:	f0 e0       	ldi	r31, 0x00	; 0
    3e94:	11 82       	std	Z+1, r1	; 0x01
    3e96:	10 82       	st	Z, r1
	TIMSK &= 0xE3;
    3e98:	a9 e5       	ldi	r26, 0x59	; 89
    3e9a:	b0 e0       	ldi	r27, 0x00	; 0
    3e9c:	e9 e5       	ldi	r30, 0x59	; 89
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	80 81       	ld	r24, Z
    3ea2:	83 7e       	andi	r24, 0xE3	; 227
    3ea4:	8c 93       	st	X, r24
	TCNT1=0;
    3ea6:	ec e4       	ldi	r30, 0x4C	; 76
    3ea8:	f0 e0       	ldi	r31, 0x00	; 0
    3eaa:	11 82       	std	Z+1, r1	; 0x01
    3eac:	10 82       	st	Z, r1
}
    3eae:	cf 91       	pop	r28
    3eb0:	df 91       	pop	r29
    3eb2:	08 95       	ret

00003eb4 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    3eb4:	df 93       	push	r29
    3eb6:	cf 93       	push	r28
    3eb8:	00 d0       	rcall	.+0      	; 0x3eba <Timer1_setCallBack+0x6>
    3eba:	cd b7       	in	r28, 0x3d	; 61
    3ebc:	de b7       	in	r29, 0x3e	; 62
    3ebe:	9a 83       	std	Y+2, r25	; 0x02
    3ec0:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    3ec2:	89 81       	ldd	r24, Y+1	; 0x01
    3ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec6:	90 93 55 02 	sts	0x0255, r25
    3eca:	80 93 54 02 	sts	0x0254, r24
}
    3ece:	0f 90       	pop	r0
    3ed0:	0f 90       	pop	r0
    3ed2:	cf 91       	pop	r28
    3ed4:	df 91       	pop	r29
    3ed6:	08 95       	ret

00003ed8 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3ed8:	df 93       	push	r29
    3eda:	cf 93       	push	r28
    3edc:	cd b7       	in	r28, 0x3d	; 61
    3ede:	de b7       	in	r29, 0x3e	; 62
    3ee0:	28 97       	sbiw	r28, 0x08	; 8
    3ee2:	0f b6       	in	r0, 0x3f	; 63
    3ee4:	f8 94       	cli
    3ee6:	de bf       	out	0x3e, r29	; 62
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	cd bf       	out	0x3d, r28	; 61
    3eec:	98 87       	std	Y+8, r25	; 0x08
    3eee:	8f 83       	std	Y+7, r24	; 0x07
	uint16 ubrr_value = 0;
    3ef0:	1e 82       	std	Y+6, r1	; 0x06
    3ef2:	1d 82       	std	Y+5, r1	; 0x05

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3ef4:	eb e2       	ldi	r30, 0x2B	; 43
    3ef6:	f0 e0       	ldi	r31, 0x00	; 0
    3ef8:	82 e0       	ldi	r24, 0x02	; 2
    3efa:	80 83       	st	Z, r24
	//set baud rate
	uint32 baud_rate=Config_Ptr->baud_rate;
    3efc:	ef 81       	ldd	r30, Y+7	; 0x07
    3efe:	f8 85       	ldd	r31, Y+8	; 0x08
    3f00:	83 81       	ldd	r24, Z+3	; 0x03
    3f02:	94 81       	ldd	r25, Z+4	; 0x04
    3f04:	a5 81       	ldd	r26, Z+5	; 0x05
    3f06:	b6 81       	ldd	r27, Z+6	; 0x06
    3f08:	89 83       	std	Y+1, r24	; 0x01
    3f0a:	9a 83       	std	Y+2, r25	; 0x02
    3f0c:	ab 83       	std	Y+3, r26	; 0x03
    3f0e:	bc 83       	std	Y+4, r27	; 0x04
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3f10:	ea e2       	ldi	r30, 0x2A	; 42
    3f12:	f0 e0       	ldi	r31, 0x00	; 0
    3f14:	88 e1       	ldi	r24, 0x18	; 24
    3f16:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3f18:	e0 e4       	ldi	r30, 0x40	; 64
    3f1a:	f0 e0       	ldi	r31, 0x00	; 0
    3f1c:	80 e8       	ldi	r24, 0x80	; 128
    3f1e:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0XF9) | ((Config_Ptr->bit_data) << 1);
    3f20:	a0 e4       	ldi	r26, 0x40	; 64
    3f22:	b0 e0       	ldi	r27, 0x00	; 0
    3f24:	e0 e4       	ldi	r30, 0x40	; 64
    3f26:	f0 e0       	ldi	r31, 0x00	; 0
    3f28:	80 81       	ld	r24, Z
    3f2a:	28 2f       	mov	r18, r24
    3f2c:	29 7f       	andi	r18, 0xF9	; 249
    3f2e:	ef 81       	ldd	r30, Y+7	; 0x07
    3f30:	f8 85       	ldd	r31, Y+8	; 0x08
    3f32:	80 81       	ld	r24, Z
    3f34:	88 2f       	mov	r24, r24
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	88 0f       	add	r24, r24
    3f3a:	99 1f       	adc	r25, r25
    3f3c:	82 2b       	or	r24, r18
    3f3e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XF7) | ((Config_Ptr->stop_bit) << 3);
    3f40:	a0 e4       	ldi	r26, 0x40	; 64
    3f42:	b0 e0       	ldi	r27, 0x00	; 0
    3f44:	e0 e4       	ldi	r30, 0x40	; 64
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	80 81       	ld	r24, Z
    3f4a:	28 2f       	mov	r18, r24
    3f4c:	27 7f       	andi	r18, 0xF7	; 247
    3f4e:	ef 81       	ldd	r30, Y+7	; 0x07
    3f50:	f8 85       	ldd	r31, Y+8	; 0x08
    3f52:	82 81       	ldd	r24, Z+2	; 0x02
    3f54:	88 2f       	mov	r24, r24
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	88 0f       	add	r24, r24
    3f5a:	99 1f       	adc	r25, r25
    3f5c:	88 0f       	add	r24, r24
    3f5e:	99 1f       	adc	r25, r25
    3f60:	88 0f       	add	r24, r24
    3f62:	99 1f       	adc	r25, r25
    3f64:	82 2b       	or	r24, r18
    3f66:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XCF) | ((Config_Ptr->parity) << 4);
    3f68:	a0 e4       	ldi	r26, 0x40	; 64
    3f6a:	b0 e0       	ldi	r27, 0x00	; 0
    3f6c:	e0 e4       	ldi	r30, 0x40	; 64
    3f6e:	f0 e0       	ldi	r31, 0x00	; 0
    3f70:	80 81       	ld	r24, Z
    3f72:	28 2f       	mov	r18, r24
    3f74:	2f 7c       	andi	r18, 0xCF	; 207
    3f76:	ef 81       	ldd	r30, Y+7	; 0x07
    3f78:	f8 85       	ldd	r31, Y+8	; 0x08
    3f7a:	81 81       	ldd	r24, Z+1	; 0x01
    3f7c:	88 2f       	mov	r24, r24
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	82 95       	swap	r24
    3f82:	92 95       	swap	r25
    3f84:	90 7f       	andi	r25, 0xF0	; 240
    3f86:	98 27       	eor	r25, r24
    3f88:	80 7f       	andi	r24, 0xF0	; 240
    3f8a:	98 27       	eor	r25, r24
    3f8c:	82 2b       	or	r24, r18
    3f8e:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((baud_rate) * 8UL))) - 1);
    3f90:	89 81       	ldd	r24, Y+1	; 0x01
    3f92:	9a 81       	ldd	r25, Y+2	; 0x02
    3f94:	ab 81       	ldd	r26, Y+3	; 0x03
    3f96:	bc 81       	ldd	r27, Y+4	; 0x04
    3f98:	88 0f       	add	r24, r24
    3f9a:	99 1f       	adc	r25, r25
    3f9c:	aa 1f       	adc	r26, r26
    3f9e:	bb 1f       	adc	r27, r27
    3fa0:	88 0f       	add	r24, r24
    3fa2:	99 1f       	adc	r25, r25
    3fa4:	aa 1f       	adc	r26, r26
    3fa6:	bb 1f       	adc	r27, r27
    3fa8:	88 0f       	add	r24, r24
    3faa:	99 1f       	adc	r25, r25
    3fac:	aa 1f       	adc	r26, r26
    3fae:	bb 1f       	adc	r27, r27
    3fb0:	9c 01       	movw	r18, r24
    3fb2:	ad 01       	movw	r20, r26
    3fb4:	80 e0       	ldi	r24, 0x00	; 0
    3fb6:	92 e1       	ldi	r25, 0x12	; 18
    3fb8:	aa e7       	ldi	r26, 0x7A	; 122
    3fba:	b0 e0       	ldi	r27, 0x00	; 0
    3fbc:	bc 01       	movw	r22, r24
    3fbe:	cd 01       	movw	r24, r26
    3fc0:	0e 94 8d 20 	call	0x411a	; 0x411a <__udivmodsi4>
    3fc4:	da 01       	movw	r26, r20
    3fc6:	c9 01       	movw	r24, r18
    3fc8:	01 97       	sbiw	r24, 0x01	; 1
    3fca:	9e 83       	std	Y+6, r25	; 0x06
    3fcc:	8d 83       	std	Y+5, r24	; 0x05

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3fce:	e0 e4       	ldi	r30, 0x40	; 64
    3fd0:	f0 e0       	ldi	r31, 0x00	; 0
    3fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd6:	89 2f       	mov	r24, r25
    3fd8:	99 27       	eor	r25, r25
    3fda:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3fdc:	e9 e2       	ldi	r30, 0x29	; 41
    3fde:	f0 e0       	ldi	r31, 0x00	; 0
    3fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe2:	80 83       	st	Z, r24
}
    3fe4:	28 96       	adiw	r28, 0x08	; 8
    3fe6:	0f b6       	in	r0, 0x3f	; 63
    3fe8:	f8 94       	cli
    3fea:	de bf       	out	0x3e, r29	; 62
    3fec:	0f be       	out	0x3f, r0	; 63
    3fee:	cd bf       	out	0x3d, r28	; 61
    3ff0:	cf 91       	pop	r28
    3ff2:	df 91       	pop	r29
    3ff4:	08 95       	ret

00003ff6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3ff6:	df 93       	push	r29
    3ff8:	cf 93       	push	r28
    3ffa:	0f 92       	push	r0
    3ffc:	cd b7       	in	r28, 0x3d	; 61
    3ffe:	de b7       	in	r29, 0x3e	; 62
    4000:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    4002:	eb e2       	ldi	r30, 0x2B	; 43
    4004:	f0 e0       	ldi	r31, 0x00	; 0
    4006:	80 81       	ld	r24, Z
    4008:	88 2f       	mov	r24, r24
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	80 72       	andi	r24, 0x20	; 32
    400e:	90 70       	andi	r25, 0x00	; 0
    4010:	00 97       	sbiw	r24, 0x00	; 0
    4012:	b9 f3       	breq	.-18     	; 0x4002 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    4014:	ec e2       	ldi	r30, 0x2C	; 44
    4016:	f0 e0       	ldi	r31, 0x00	; 0
    4018:	89 81       	ldd	r24, Y+1	; 0x01
    401a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    401c:	0f 90       	pop	r0
    401e:	cf 91       	pop	r28
    4020:	df 91       	pop	r29
    4022:	08 95       	ret

00004024 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    4024:	df 93       	push	r29
    4026:	cf 93       	push	r28
    4028:	cd b7       	in	r28, 0x3d	; 61
    402a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    402c:	eb e2       	ldi	r30, 0x2B	; 43
    402e:	f0 e0       	ldi	r31, 0x00	; 0
    4030:	80 81       	ld	r24, Z
    4032:	88 23       	and	r24, r24
    4034:	dc f7       	brge	.-10     	; 0x402c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    4036:	ec e2       	ldi	r30, 0x2C	; 44
    4038:	f0 e0       	ldi	r31, 0x00	; 0
    403a:	80 81       	ld	r24, Z
}
    403c:	cf 91       	pop	r28
    403e:	df 91       	pop	r29
    4040:	08 95       	ret

00004042 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    4042:	df 93       	push	r29
    4044:	cf 93       	push	r28
    4046:	00 d0       	rcall	.+0      	; 0x4048 <UART_sendString+0x6>
    4048:	0f 92       	push	r0
    404a:	cd b7       	in	r28, 0x3d	; 61
    404c:	de b7       	in	r29, 0x3e	; 62
    404e:	9b 83       	std	Y+3, r25	; 0x03
    4050:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4052:	19 82       	std	Y+1, r1	; 0x01
    4054:	0e c0       	rjmp	.+28     	; 0x4072 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    4056:	89 81       	ldd	r24, Y+1	; 0x01
    4058:	28 2f       	mov	r18, r24
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	8a 81       	ldd	r24, Y+2	; 0x02
    405e:	9b 81       	ldd	r25, Y+3	; 0x03
    4060:	fc 01       	movw	r30, r24
    4062:	e2 0f       	add	r30, r18
    4064:	f3 1f       	adc	r31, r19
    4066:	80 81       	ld	r24, Z
    4068:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_sendByte>
		i++;
    406c:	89 81       	ldd	r24, Y+1	; 0x01
    406e:	8f 5f       	subi	r24, 0xFF	; 255
    4070:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    4072:	89 81       	ldd	r24, Y+1	; 0x01
    4074:	28 2f       	mov	r18, r24
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	8a 81       	ldd	r24, Y+2	; 0x02
    407a:	9b 81       	ldd	r25, Y+3	; 0x03
    407c:	fc 01       	movw	r30, r24
    407e:	e2 0f       	add	r30, r18
    4080:	f3 1f       	adc	r31, r19
    4082:	80 81       	ld	r24, Z
    4084:	88 23       	and	r24, r24
    4086:	39 f7       	brne	.-50     	; 0x4056 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    4088:	0f 90       	pop	r0
    408a:	0f 90       	pop	r0
    408c:	0f 90       	pop	r0
    408e:	cf 91       	pop	r28
    4090:	df 91       	pop	r29
    4092:	08 95       	ret

00004094 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    4094:	0f 93       	push	r16
    4096:	1f 93       	push	r17
    4098:	df 93       	push	r29
    409a:	cf 93       	push	r28
    409c:	00 d0       	rcall	.+0      	; 0x409e <UART_receiveString+0xa>
    409e:	0f 92       	push	r0
    40a0:	cd b7       	in	r28, 0x3d	; 61
    40a2:	de b7       	in	r29, 0x3e	; 62
    40a4:	9b 83       	std	Y+3, r25	; 0x03
    40a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    40a8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    40aa:	89 81       	ldd	r24, Y+1	; 0x01
    40ac:	28 2f       	mov	r18, r24
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	8a 81       	ldd	r24, Y+2	; 0x02
    40b2:	9b 81       	ldd	r25, Y+3	; 0x03
    40b4:	8c 01       	movw	r16, r24
    40b6:	02 0f       	add	r16, r18
    40b8:	13 1f       	adc	r17, r19
    40ba:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    40be:	f8 01       	movw	r30, r16
    40c0:	80 83       	st	Z, r24
    40c2:	0f c0       	rjmp	.+30     	; 0x40e2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    40c4:	89 81       	ldd	r24, Y+1	; 0x01
    40c6:	8f 5f       	subi	r24, 0xFF	; 255
    40c8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    40ca:	89 81       	ldd	r24, Y+1	; 0x01
    40cc:	28 2f       	mov	r18, r24
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	8a 81       	ldd	r24, Y+2	; 0x02
    40d2:	9b 81       	ldd	r25, Y+3	; 0x03
    40d4:	8c 01       	movw	r16, r24
    40d6:	02 0f       	add	r16, r18
    40d8:	13 1f       	adc	r17, r19
    40da:	0e 94 12 20 	call	0x4024	; 0x4024 <UART_recieveByte>
    40de:	f8 01       	movw	r30, r16
    40e0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    40e2:	89 81       	ldd	r24, Y+1	; 0x01
    40e4:	28 2f       	mov	r18, r24
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	8a 81       	ldd	r24, Y+2	; 0x02
    40ea:	9b 81       	ldd	r25, Y+3	; 0x03
    40ec:	fc 01       	movw	r30, r24
    40ee:	e2 0f       	add	r30, r18
    40f0:	f3 1f       	adc	r31, r19
    40f2:	80 81       	ld	r24, Z
    40f4:	83 32       	cpi	r24, 0x23	; 35
    40f6:	31 f7       	brne	.-52     	; 0x40c4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    40f8:	89 81       	ldd	r24, Y+1	; 0x01
    40fa:	28 2f       	mov	r18, r24
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4100:	9b 81       	ldd	r25, Y+3	; 0x03
    4102:	fc 01       	movw	r30, r24
    4104:	e2 0f       	add	r30, r18
    4106:	f3 1f       	adc	r31, r19
    4108:	10 82       	st	Z, r1
}
    410a:	0f 90       	pop	r0
    410c:	0f 90       	pop	r0
    410e:	0f 90       	pop	r0
    4110:	cf 91       	pop	r28
    4112:	df 91       	pop	r29
    4114:	1f 91       	pop	r17
    4116:	0f 91       	pop	r16
    4118:	08 95       	ret

0000411a <__udivmodsi4>:
    411a:	a1 e2       	ldi	r26, 0x21	; 33
    411c:	1a 2e       	mov	r1, r26
    411e:	aa 1b       	sub	r26, r26
    4120:	bb 1b       	sub	r27, r27
    4122:	fd 01       	movw	r30, r26
    4124:	0d c0       	rjmp	.+26     	; 0x4140 <__udivmodsi4_ep>

00004126 <__udivmodsi4_loop>:
    4126:	aa 1f       	adc	r26, r26
    4128:	bb 1f       	adc	r27, r27
    412a:	ee 1f       	adc	r30, r30
    412c:	ff 1f       	adc	r31, r31
    412e:	a2 17       	cp	r26, r18
    4130:	b3 07       	cpc	r27, r19
    4132:	e4 07       	cpc	r30, r20
    4134:	f5 07       	cpc	r31, r21
    4136:	20 f0       	brcs	.+8      	; 0x4140 <__udivmodsi4_ep>
    4138:	a2 1b       	sub	r26, r18
    413a:	b3 0b       	sbc	r27, r19
    413c:	e4 0b       	sbc	r30, r20
    413e:	f5 0b       	sbc	r31, r21

00004140 <__udivmodsi4_ep>:
    4140:	66 1f       	adc	r22, r22
    4142:	77 1f       	adc	r23, r23
    4144:	88 1f       	adc	r24, r24
    4146:	99 1f       	adc	r25, r25
    4148:	1a 94       	dec	r1
    414a:	69 f7       	brne	.-38     	; 0x4126 <__udivmodsi4_loop>
    414c:	60 95       	com	r22
    414e:	70 95       	com	r23
    4150:	80 95       	com	r24
    4152:	90 95       	com	r25
    4154:	9b 01       	movw	r18, r22
    4156:	ac 01       	movw	r20, r24
    4158:	bd 01       	movw	r22, r26
    415a:	cf 01       	movw	r24, r30
    415c:	08 95       	ret

0000415e <__prologue_saves__>:
    415e:	2f 92       	push	r2
    4160:	3f 92       	push	r3
    4162:	4f 92       	push	r4
    4164:	5f 92       	push	r5
    4166:	6f 92       	push	r6
    4168:	7f 92       	push	r7
    416a:	8f 92       	push	r8
    416c:	9f 92       	push	r9
    416e:	af 92       	push	r10
    4170:	bf 92       	push	r11
    4172:	cf 92       	push	r12
    4174:	df 92       	push	r13
    4176:	ef 92       	push	r14
    4178:	ff 92       	push	r15
    417a:	0f 93       	push	r16
    417c:	1f 93       	push	r17
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
    4186:	ca 1b       	sub	r28, r26
    4188:	db 0b       	sbc	r29, r27
    418a:	0f b6       	in	r0, 0x3f	; 63
    418c:	f8 94       	cli
    418e:	de bf       	out	0x3e, r29	; 62
    4190:	0f be       	out	0x3f, r0	; 63
    4192:	cd bf       	out	0x3d, r28	; 61
    4194:	09 94       	ijmp

00004196 <__epilogue_restores__>:
    4196:	2a 88       	ldd	r2, Y+18	; 0x12
    4198:	39 88       	ldd	r3, Y+17	; 0x11
    419a:	48 88       	ldd	r4, Y+16	; 0x10
    419c:	5f 84       	ldd	r5, Y+15	; 0x0f
    419e:	6e 84       	ldd	r6, Y+14	; 0x0e
    41a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    41a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    41a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    41a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    41a8:	b9 84       	ldd	r11, Y+9	; 0x09
    41aa:	c8 84       	ldd	r12, Y+8	; 0x08
    41ac:	df 80       	ldd	r13, Y+7	; 0x07
    41ae:	ee 80       	ldd	r14, Y+6	; 0x06
    41b0:	fd 80       	ldd	r15, Y+5	; 0x05
    41b2:	0c 81       	ldd	r16, Y+4	; 0x04
    41b4:	1b 81       	ldd	r17, Y+3	; 0x03
    41b6:	aa 81       	ldd	r26, Y+2	; 0x02
    41b8:	b9 81       	ldd	r27, Y+1	; 0x01
    41ba:	ce 0f       	add	r28, r30
    41bc:	d1 1d       	adc	r29, r1
    41be:	0f b6       	in	r0, 0x3f	; 63
    41c0:	f8 94       	cli
    41c2:	de bf       	out	0x3e, r29	; 62
    41c4:	0f be       	out	0x3f, r0	; 63
    41c6:	cd bf       	out	0x3d, r28	; 61
    41c8:	ed 01       	movw	r28, r26
    41ca:	08 95       	ret

000041cc <itoa>:
    41cc:	fb 01       	movw	r30, r22
    41ce:	9f 01       	movw	r18, r30
    41d0:	e8 94       	clt
    41d2:	42 30       	cpi	r20, 0x02	; 2
    41d4:	c4 f0       	brlt	.+48     	; 0x4206 <itoa+0x3a>
    41d6:	45 32       	cpi	r20, 0x25	; 37
    41d8:	b4 f4       	brge	.+44     	; 0x4206 <itoa+0x3a>
    41da:	4a 30       	cpi	r20, 0x0A	; 10
    41dc:	29 f4       	brne	.+10     	; 0x41e8 <itoa+0x1c>
    41de:	97 fb       	bst	r25, 7
    41e0:	1e f4       	brtc	.+6      	; 0x41e8 <itoa+0x1c>
    41e2:	90 95       	com	r25
    41e4:	81 95       	neg	r24
    41e6:	9f 4f       	sbci	r25, 0xFF	; 255
    41e8:	64 2f       	mov	r22, r20
    41ea:	77 27       	eor	r23, r23
    41ec:	0e 94 17 21 	call	0x422e	; 0x422e <__udivmodhi4>
    41f0:	80 5d       	subi	r24, 0xD0	; 208
    41f2:	8a 33       	cpi	r24, 0x3A	; 58
    41f4:	0c f0       	brlt	.+2      	; 0x41f8 <itoa+0x2c>
    41f6:	89 5d       	subi	r24, 0xD9	; 217
    41f8:	81 93       	st	Z+, r24
    41fa:	cb 01       	movw	r24, r22
    41fc:	00 97       	sbiw	r24, 0x00	; 0
    41fe:	a1 f7       	brne	.-24     	; 0x41e8 <itoa+0x1c>
    4200:	16 f4       	brtc	.+4      	; 0x4206 <itoa+0x3a>
    4202:	5d e2       	ldi	r21, 0x2D	; 45
    4204:	51 93       	st	Z+, r21
    4206:	10 82       	st	Z, r1
    4208:	c9 01       	movw	r24, r18
    420a:	0c 94 07 21 	jmp	0x420e	; 0x420e <strrev>

0000420e <strrev>:
    420e:	dc 01       	movw	r26, r24
    4210:	fc 01       	movw	r30, r24
    4212:	67 2f       	mov	r22, r23
    4214:	71 91       	ld	r23, Z+
    4216:	77 23       	and	r23, r23
    4218:	e1 f7       	brne	.-8      	; 0x4212 <strrev+0x4>
    421a:	32 97       	sbiw	r30, 0x02	; 2
    421c:	04 c0       	rjmp	.+8      	; 0x4226 <strrev+0x18>
    421e:	7c 91       	ld	r23, X
    4220:	6d 93       	st	X+, r22
    4222:	70 83       	st	Z, r23
    4224:	62 91       	ld	r22, -Z
    4226:	ae 17       	cp	r26, r30
    4228:	bf 07       	cpc	r27, r31
    422a:	c8 f3       	brcs	.-14     	; 0x421e <strrev+0x10>
    422c:	08 95       	ret

0000422e <__udivmodhi4>:
    422e:	aa 1b       	sub	r26, r26
    4230:	bb 1b       	sub	r27, r27
    4232:	51 e1       	ldi	r21, 0x11	; 17
    4234:	07 c0       	rjmp	.+14     	; 0x4244 <__udivmodhi4_ep>

00004236 <__udivmodhi4_loop>:
    4236:	aa 1f       	adc	r26, r26
    4238:	bb 1f       	adc	r27, r27
    423a:	a6 17       	cp	r26, r22
    423c:	b7 07       	cpc	r27, r23
    423e:	10 f0       	brcs	.+4      	; 0x4244 <__udivmodhi4_ep>
    4240:	a6 1b       	sub	r26, r22
    4242:	b7 0b       	sbc	r27, r23

00004244 <__udivmodhi4_ep>:
    4244:	88 1f       	adc	r24, r24
    4246:	99 1f       	adc	r25, r25
    4248:	5a 95       	dec	r21
    424a:	a9 f7       	brne	.-22     	; 0x4236 <__udivmodhi4_loop>
    424c:	80 95       	com	r24
    424e:	90 95       	com	r25
    4250:	bc 01       	movw	r22, r24
    4252:	cd 01       	movw	r24, r26
    4254:	08 95       	ret

00004256 <_exit>:
    4256:	f8 94       	cli

00004258 <__stop_program>:
    4258:	ff cf       	rjmp	.-2      	; 0x4258 <__stop_program>
