
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00002dfc  00002e90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080017a  0080017a  00002faa  2**0
                  ALLOC
  3 .stab         00002a6c  00000000  00000000  00002fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001440  00000000  00000000  00005a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000071ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000095f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a97b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bb54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000bd14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c00a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c978  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 13 	call	0x273c	; 0x273c <main>
      8a:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Buzzer_init>:
#include "gpio.h"
 /*******************************************************************************
  *                           Function Definition                                  *
  *******************************************************************************/

void Buzzer_init(){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID, PIN_OUTPUT);
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);//to turn off buzzer
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <Buzzer_on>:

void Buzzer_on(void){
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>

}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <Buzzer_off>:

void Buzzer_off(void){
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <DcMotor_Init>:
#include "common_macros.h"
/*******************************************************************************
 *                      Functions implementation                                   *
 *******************************************************************************/

void DcMotor_Init(void){
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN_1_ID, PIN_OUTPUT);
     e88:	82 e0       	ldi	r24, 0x02	; 2
     e8a:	64 e0       	ldi	r22, 0x04	; 4
     e8c:	41 e0       	ldi	r20, 0x01	; 1
     e8e:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN_2_ID, PIN_OUTPUT);
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	65 e0       	ldi	r22, 0x05	; 5
     e96:	41 e0       	ldi	r20, 0x01	; 1
     e98:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1_ID, LOGIC_LOW);
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	64 e0       	ldi	r22, 0x04	; 4
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2_ID, LOGIC_LOW);
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	65 e0       	ldi	r22, 0x05	; 5
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
}
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state){
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	89 83       	std	Y+1, r24	; 0x01
	if (state == CLOCKWISE){
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	88 23       	and	r24, r24
     ec6:	59 f4       	brne	.+22     	; 0xede <DcMotor_Rotate+0x28>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1_ID, LOGIC_LOW);
     ec8:	82 e0       	ldi	r24, 0x02	; 2
     eca:	64 e0       	ldi	r22, 0x04	; 4
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2_ID, LOGIC_HIGH);
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	65 e0       	ldi	r22, 0x05	; 5
     ed6:	41 e0       	ldi	r20, 0x01	; 1
     ed8:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
     edc:	26 c0       	rjmp	.+76     	; 0xf2a <DcMotor_Rotate+0x74>
	}
	else if (state==ANTICLOCKWISE) {
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	59 f4       	brne	.+22     	; 0xefa <DcMotor_Rotate+0x44>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1_ID, LOGIC_HIGH);
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	64 e0       	ldi	r22, 0x04	; 4
     ee8:	41 e0       	ldi	r20, 0x01	; 1
     eea:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2_ID, LOGIC_LOW);
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	65 e0       	ldi	r22, 0x05	; 5
     ef2:	40 e0       	ldi	r20, 0x00	; 0
     ef4:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
     ef8:	18 c0       	rjmp	.+48     	; 0xf2a <DcMotor_Rotate+0x74>
	}
	else if(state==STOP){
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	82 30       	cpi	r24, 0x02	; 2
     efe:	59 f4       	brne	.+22     	; 0xf16 <DcMotor_Rotate+0x60>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1_ID, LOGIC_LOW);
     f00:	82 e0       	ldi	r24, 0x02	; 2
     f02:	64 e0       	ldi	r22, 0x04	; 4
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2_ID, LOGIC_LOW);
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	65 e0       	ldi	r22, 0x05	; 5
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
     f14:	0a c0       	rjmp	.+20     	; 0xf2a <DcMotor_Rotate+0x74>
	}
	else{
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1_ID, LOGIC_LOW);
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	64 e0       	ldi	r22, 0x04	; 4
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2_ID, LOGIC_LOW);
     f20:	82 e0       	ldi	r24, 0x02	; 2
     f22:	65 e0       	ldi	r22, 0x05	; 5
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
	}
}
     f2a:	0f 90       	pop	r0
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	00 d0       	rcall	.+0      	; 0xf38 <EEPROM_writeByte+0x6>
     f38:	00 d0       	rcall	.+0      	; 0xf3a <EEPROM_writeByte+0x8>
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     f44:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     f48:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TWI_getStatus>
     f4c:	88 30       	cpi	r24, 0x08	; 8
     f4e:	11 f0       	breq	.+4      	; 0xf54 <EEPROM_writeByte+0x22>
        return ERROR;
     f50:	1c 82       	std	Y+4, r1	; 0x04
     f52:	28 c0       	rjmp	.+80     	; 0xfa4 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	80 70       	andi	r24, 0x00	; 0
     f5a:	97 70       	andi	r25, 0x07	; 7
     f5c:	88 0f       	add	r24, r24
     f5e:	89 2f       	mov	r24, r25
     f60:	88 1f       	adc	r24, r24
     f62:	99 0b       	sbc	r25, r25
     f64:	91 95       	neg	r25
     f66:	80 6a       	ori	r24, 0xA0	; 160
     f68:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     f6c:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TWI_getStatus>
     f70:	88 31       	cpi	r24, 0x18	; 24
     f72:	11 f0       	breq	.+4      	; 0xf78 <EEPROM_writeByte+0x46>
        return ERROR; 
     f74:	1c 82       	std	Y+4, r1	; 0x04
     f76:	16 c0       	rjmp	.+44     	; 0xfa4 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f7e:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TWI_getStatus>
     f82:	88 32       	cpi	r24, 0x28	; 40
     f84:	11 f0       	breq	.+4      	; 0xf8a <EEPROM_writeByte+0x58>
        return ERROR;
     f86:	1c 82       	std	Y+4, r1	; 0x04
     f88:	0d c0       	rjmp	.+26     	; 0xfa4 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f90:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TWI_getStatus>
     f94:	88 32       	cpi	r24, 0x28	; 40
     f96:	11 f0       	breq	.+4      	; 0xf9c <EEPROM_writeByte+0x6a>
        return ERROR;
     f98:	1c 82       	std	Y+4, r1	; 0x04
     f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     f9c:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <TWI_stop>
	
    return SUCCESS;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	8c 83       	std	Y+4, r24	; 0x04
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
}
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	00 d0       	rcall	.+0      	; 0xfba <EEPROM_readByte+0x6>
     fba:	00 d0       	rcall	.+0      	; 0xfbc <EEPROM_readByte+0x8>
     fbc:	0f 92       	push	r0
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	9a 83       	std	Y+2, r25	; 0x02
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	7c 83       	std	Y+4, r23	; 0x04
     fc8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     fca:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     fce:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TWI_getStatus>
     fd2:	88 30       	cpi	r24, 0x08	; 8
     fd4:	11 f0       	breq	.+4      	; 0xfda <EEPROM_readByte+0x26>
        return ERROR;
     fd6:	1d 82       	std	Y+5, r1	; 0x05
     fd8:	44 c0       	rjmp	.+136    	; 0x1062 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	80 70       	andi	r24, 0x00	; 0
     fe0:	97 70       	andi	r25, 0x07	; 7
     fe2:	88 0f       	add	r24, r24
     fe4:	89 2f       	mov	r24, r25
     fe6:	88 1f       	adc	r24, r24
     fe8:	99 0b       	sbc	r25, r25
     fea:	91 95       	neg	r25
     fec:	80 6a       	ori	r24, 0xA0	; 160
     fee:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     ff2:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TWI_getStatus>
     ff6:	88 31       	cpi	r24, 0x18	; 24
     ff8:	11 f0       	breq	.+4      	; 0xffe <EEPROM_readByte+0x4a>
        return ERROR;
     ffa:	1d 82       	std	Y+5, r1	; 0x05
     ffc:	32 c0       	rjmp	.+100    	; 0x1062 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1004:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TWI_getStatus>
    1008:	88 32       	cpi	r24, 0x28	; 40
    100a:	11 f0       	breq	.+4      	; 0x1010 <EEPROM_readByte+0x5c>
        return ERROR;
    100c:	1d 82       	std	Y+5, r1	; 0x05
    100e:	29 c0       	rjmp	.+82     	; 0x1062 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1010:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1014:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TWI_getStatus>
    1018:	80 31       	cpi	r24, 0x10	; 16
    101a:	11 f0       	breq	.+4      	; 0x1020 <EEPROM_readByte+0x6c>
        return ERROR;
    101c:	1d 82       	std	Y+5, r1	; 0x05
    101e:	21 c0       	rjmp	.+66     	; 0x1062 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	80 70       	andi	r24, 0x00	; 0
    1026:	97 70       	andi	r25, 0x07	; 7
    1028:	88 0f       	add	r24, r24
    102a:	89 2f       	mov	r24, r25
    102c:	88 1f       	adc	r24, r24
    102e:	99 0b       	sbc	r25, r25
    1030:	91 95       	neg	r25
    1032:	81 6a       	ori	r24, 0xA1	; 161
    1034:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1038:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TWI_getStatus>
    103c:	80 34       	cpi	r24, 0x40	; 64
    103e:	11 f0       	breq	.+4      	; 0x1044 <EEPROM_readByte+0x90>
        return ERROR;
    1040:	1d 82       	std	Y+5, r1	; 0x05
    1042:	0f c0       	rjmp	.+30     	; 0x1062 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1044:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <TWI_readByteWithNACK>
    1048:	eb 81       	ldd	r30, Y+3	; 0x03
    104a:	fc 81       	ldd	r31, Y+4	; 0x04
    104c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    104e:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TWI_getStatus>
    1052:	88 35       	cpi	r24, 0x58	; 88
    1054:	11 f0       	breq	.+4      	; 0x105a <EEPROM_readByte+0xa6>
        return ERROR;
    1056:	1d 82       	std	Y+5, r1	; 0x05
    1058:	04 c0       	rjmp	.+8      	; 0x1062 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    105a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <TWI_stop>

    return SUCCESS;
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	8d 83       	std	Y+5, r24	; 0x05
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <GPIO_setupPinDirection+0x6>
    107a:	00 d0       	rcall	.+0      	; 0x107c <GPIO_setupPinDirection+0x8>
    107c:	0f 92       	push	r0
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	6a 83       	std	Y+2, r22	; 0x02
    1086:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	88 30       	cpi	r24, 0x08	; 8
    108c:	08 f0       	brcs	.+2      	; 0x1090 <GPIO_setupPinDirection+0x1c>
    108e:	d5 c0       	rjmp	.+426    	; 0x123a <GPIO_setupPinDirection+0x1c6>
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	84 30       	cpi	r24, 0x04	; 4
    1094:	08 f0       	brcs	.+2      	; 0x1098 <GPIO_setupPinDirection+0x24>
    1096:	d1 c0       	rjmp	.+418    	; 0x123a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	3d 83       	std	Y+5, r19	; 0x05
    10a0:	2c 83       	std	Y+4, r18	; 0x04
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	91 05       	cpc	r25, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <GPIO_setupPinDirection+0x3a>
    10ac:	43 c0       	rjmp	.+134    	; 0x1134 <GPIO_setupPinDirection+0xc0>
    10ae:	2c 81       	ldd	r18, Y+4	; 0x04
    10b0:	3d 81       	ldd	r19, Y+5	; 0x05
    10b2:	22 30       	cpi	r18, 0x02	; 2
    10b4:	31 05       	cpc	r19, r1
    10b6:	2c f4       	brge	.+10     	; 0x10c2 <GPIO_setupPinDirection+0x4e>
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	9d 81       	ldd	r25, Y+5	; 0x05
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	71 f0       	breq	.+28     	; 0x10dc <GPIO_setupPinDirection+0x68>
    10c0:	bc c0       	rjmp	.+376    	; 0x123a <GPIO_setupPinDirection+0x1c6>
    10c2:	2c 81       	ldd	r18, Y+4	; 0x04
    10c4:	3d 81       	ldd	r19, Y+5	; 0x05
    10c6:	22 30       	cpi	r18, 0x02	; 2
    10c8:	31 05       	cpc	r19, r1
    10ca:	09 f4       	brne	.+2      	; 0x10ce <GPIO_setupPinDirection+0x5a>
    10cc:	5f c0       	rjmp	.+190    	; 0x118c <GPIO_setupPinDirection+0x118>
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	9d 81       	ldd	r25, Y+5	; 0x05
    10d2:	83 30       	cpi	r24, 0x03	; 3
    10d4:	91 05       	cpc	r25, r1
    10d6:	09 f4       	brne	.+2      	; 0x10da <GPIO_setupPinDirection+0x66>
    10d8:	85 c0       	rjmp	.+266    	; 0x11e4 <GPIO_setupPinDirection+0x170>
    10da:	af c0       	rjmp	.+350    	; 0x123a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	a1 f4       	brne	.+40     	; 0x110a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    10e2:	aa e3       	ldi	r26, 0x3A	; 58
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	ea e3       	ldi	r30, 0x3A	; 58
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <GPIO_setupPinDirection+0x8c>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <GPIO_setupPinDirection+0x88>
    1104:	84 2b       	or	r24, r20
    1106:	8c 93       	st	X, r24
    1108:	98 c0       	rjmp	.+304    	; 0x123a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    110a:	aa e3       	ldi	r26, 0x3A	; 58
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	ea e3       	ldi	r30, 0x3A	; 58
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <GPIO_setupPinDirection+0xb4>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <GPIO_setupPinDirection+0xb0>
    112c:	80 95       	com	r24
    112e:	84 23       	and	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	83 c0       	rjmp	.+262    	; 0x123a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	a1 f4       	brne	.+40     	; 0x1162 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    113a:	a7 e3       	ldi	r26, 0x37	; 55
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e7 e3       	ldi	r30, 0x37	; 55
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <GPIO_setupPinDirection+0xe4>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <GPIO_setupPinDirection+0xe0>
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	6c c0       	rjmp	.+216    	; 0x123a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1162:	a7 e3       	ldi	r26, 0x37	; 55
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e7 e3       	ldi	r30, 0x37	; 55
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <GPIO_setupPinDirection+0x10c>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <GPIO_setupPinDirection+0x108>
    1184:	80 95       	com	r24
    1186:	84 23       	and	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	57 c0       	rjmp	.+174    	; 0x123a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	a1 f4       	brne	.+40     	; 0x11ba <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1192:	a4 e3       	ldi	r26, 0x34	; 52
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e4 e3       	ldi	r30, 0x34	; 52
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <GPIO_setupPinDirection+0x13c>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <GPIO_setupPinDirection+0x138>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	40 c0       	rjmp	.+128    	; 0x123a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    11ba:	a4 e3       	ldi	r26, 0x34	; 52
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e4 e3       	ldi	r30, 0x34	; 52
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <GPIO_setupPinDirection+0x164>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <GPIO_setupPinDirection+0x160>
    11dc:	80 95       	com	r24
    11de:	84 23       	and	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	2b c0       	rjmp	.+86     	; 0x123a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	a1 f4       	brne	.+40     	; 0x1212 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    11ea:	a1 e3       	ldi	r26, 0x31	; 49
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e1 e3       	ldi	r30, 0x31	; 49
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 2e       	mov	r0, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <GPIO_setupPinDirection+0x194>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <GPIO_setupPinDirection+0x190>
    120c:	84 2b       	or	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	14 c0       	rjmp	.+40     	; 0x123a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1212:	a1 e3       	ldi	r26, 0x31	; 49
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e1 e3       	ldi	r30, 0x31	; 49
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <GPIO_setupPinDirection+0x1bc>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <GPIO_setupPinDirection+0x1b8>
    1234:	80 95       	com	r24
    1236:	84 23       	and	r24, r20
    1238:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	00 d0       	rcall	.+0      	; 0x1250 <GPIO_writePin+0x6>
    1250:	00 d0       	rcall	.+0      	; 0x1252 <GPIO_writePin+0x8>
    1252:	0f 92       	push	r0
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	6a 83       	std	Y+2, r22	; 0x02
    125c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	88 30       	cpi	r24, 0x08	; 8
    1262:	08 f0       	brcs	.+2      	; 0x1266 <GPIO_writePin+0x1c>
    1264:	d5 c0       	rjmp	.+426    	; 0x1410 <GPIO_writePin+0x1c6>
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	84 30       	cpi	r24, 0x04	; 4
    126a:	08 f0       	brcs	.+2      	; 0x126e <GPIO_writePin+0x24>
    126c:	d1 c0       	rjmp	.+418    	; 0x1410 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3d 83       	std	Y+5, r19	; 0x05
    1276:	2c 83       	std	Y+4, r18	; 0x04
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	9d 81       	ldd	r25, Y+5	; 0x05
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	91 05       	cpc	r25, r1
    1280:	09 f4       	brne	.+2      	; 0x1284 <GPIO_writePin+0x3a>
    1282:	43 c0       	rjmp	.+134    	; 0x130a <GPIO_writePin+0xc0>
    1284:	2c 81       	ldd	r18, Y+4	; 0x04
    1286:	3d 81       	ldd	r19, Y+5	; 0x05
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	31 05       	cpc	r19, r1
    128c:	2c f4       	brge	.+10     	; 0x1298 <GPIO_writePin+0x4e>
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	9d 81       	ldd	r25, Y+5	; 0x05
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	71 f0       	breq	.+28     	; 0x12b2 <GPIO_writePin+0x68>
    1296:	bc c0       	rjmp	.+376    	; 0x1410 <GPIO_writePin+0x1c6>
    1298:	2c 81       	ldd	r18, Y+4	; 0x04
    129a:	3d 81       	ldd	r19, Y+5	; 0x05
    129c:	22 30       	cpi	r18, 0x02	; 2
    129e:	31 05       	cpc	r19, r1
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <GPIO_writePin+0x5a>
    12a2:	5f c0       	rjmp	.+190    	; 0x1362 <GPIO_writePin+0x118>
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	9d 81       	ldd	r25, Y+5	; 0x05
    12a8:	83 30       	cpi	r24, 0x03	; 3
    12aa:	91 05       	cpc	r25, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <GPIO_writePin+0x66>
    12ae:	85 c0       	rjmp	.+266    	; 0x13ba <GPIO_writePin+0x170>
    12b0:	af c0       	rjmp	.+350    	; 0x1410 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	a1 f4       	brne	.+40     	; 0x12e0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    12b8:	ab e3       	ldi	r26, 0x3B	; 59
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	eb e3       	ldi	r30, 0x3B	; 59
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <GPIO_writePin+0x8c>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <GPIO_writePin+0x88>
    12da:	84 2b       	or	r24, r20
    12dc:	8c 93       	st	X, r24
    12de:	98 c0       	rjmp	.+304    	; 0x1410 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    12e0:	ab e3       	ldi	r26, 0x3B	; 59
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	eb e3       	ldi	r30, 0x3B	; 59
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <GPIO_writePin+0xb4>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <GPIO_writePin+0xb0>
    1302:	80 95       	com	r24
    1304:	84 23       	and	r24, r20
    1306:	8c 93       	st	X, r24
    1308:	83 c0       	rjmp	.+262    	; 0x1410 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	a1 f4       	brne	.+40     	; 0x1338 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1310:	a8 e3       	ldi	r26, 0x38	; 56
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <GPIO_writePin+0xe4>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <GPIO_writePin+0xe0>
    1332:	84 2b       	or	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	6c c0       	rjmp	.+216    	; 0x1410 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1338:	a8 e3       	ldi	r26, 0x38	; 56
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e8 e3       	ldi	r30, 0x38	; 56
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <GPIO_writePin+0x10c>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <GPIO_writePin+0x108>
    135a:	80 95       	com	r24
    135c:	84 23       	and	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	57 c0       	rjmp	.+174    	; 0x1410 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	a1 f4       	brne	.+40     	; 0x1390 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1368:	a5 e3       	ldi	r26, 0x35	; 53
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e5 e3       	ldi	r30, 0x35	; 53
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <GPIO_writePin+0x13c>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <GPIO_writePin+0x138>
    138a:	84 2b       	or	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	40 c0       	rjmp	.+128    	; 0x1410 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1390:	a5 e3       	ldi	r26, 0x35	; 53
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e5 e3       	ldi	r30, 0x35	; 53
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <GPIO_writePin+0x164>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <GPIO_writePin+0x160>
    13b2:	80 95       	com	r24
    13b4:	84 23       	and	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	2b c0       	rjmp	.+86     	; 0x1410 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	a1 f4       	brne	.+40     	; 0x13e8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    13c0:	a2 e3       	ldi	r26, 0x32	; 50
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e2 e3       	ldi	r30, 0x32	; 50
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <GPIO_writePin+0x194>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <GPIO_writePin+0x190>
    13e2:	84 2b       	or	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	14 c0       	rjmp	.+40     	; 0x1410 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    13e8:	a2 e3       	ldi	r26, 0x32	; 50
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e2 e3       	ldi	r30, 0x32	; 50
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <GPIO_writePin+0x1bc>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <GPIO_writePin+0x1b8>
    140a:	80 95       	com	r24
    140c:	84 23       	and	r24, r20
    140e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <GPIO_readPin+0x6>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <GPIO_readPin+0x8>
    1428:	0f 92       	push	r0
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	8a 83       	std	Y+2, r24	; 0x02
    1430:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1432:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	88 30       	cpi	r24, 0x08	; 8
    1438:	08 f0       	brcs	.+2      	; 0x143c <GPIO_readPin+0x1c>
    143a:	84 c0       	rjmp	.+264    	; 0x1544 <GPIO_readPin+0x124>
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	08 f0       	brcs	.+2      	; 0x1444 <GPIO_readPin+0x24>
    1442:	80 c0       	rjmp	.+256    	; 0x1544 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	3d 83       	std	Y+5, r19	; 0x05
    144c:	2c 83       	std	Y+4, r18	; 0x04
    144e:	4c 81       	ldd	r20, Y+4	; 0x04
    1450:	5d 81       	ldd	r21, Y+5	; 0x05
    1452:	41 30       	cpi	r20, 0x01	; 1
    1454:	51 05       	cpc	r21, r1
    1456:	79 f1       	breq	.+94     	; 0x14b6 <GPIO_readPin+0x96>
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	9d 81       	ldd	r25, Y+5	; 0x05
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	91 05       	cpc	r25, r1
    1460:	34 f4       	brge	.+12     	; 0x146e <GPIO_readPin+0x4e>
    1462:	2c 81       	ldd	r18, Y+4	; 0x04
    1464:	3d 81       	ldd	r19, Y+5	; 0x05
    1466:	21 15       	cp	r18, r1
    1468:	31 05       	cpc	r19, r1
    146a:	69 f0       	breq	.+26     	; 0x1486 <GPIO_readPin+0x66>
    146c:	6b c0       	rjmp	.+214    	; 0x1544 <GPIO_readPin+0x124>
    146e:	4c 81       	ldd	r20, Y+4	; 0x04
    1470:	5d 81       	ldd	r21, Y+5	; 0x05
    1472:	42 30       	cpi	r20, 0x02	; 2
    1474:	51 05       	cpc	r21, r1
    1476:	b9 f1       	breq	.+110    	; 0x14e6 <GPIO_readPin+0xc6>
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	9d 81       	ldd	r25, Y+5	; 0x05
    147c:	83 30       	cpi	r24, 0x03	; 3
    147e:	91 05       	cpc	r25, r1
    1480:	09 f4       	brne	.+2      	; 0x1484 <GPIO_readPin+0x64>
    1482:	49 c0       	rjmp	.+146    	; 0x1516 <GPIO_readPin+0xf6>
    1484:	5f c0       	rjmp	.+190    	; 0x1544 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1486:	e9 e3       	ldi	r30, 0x39	; 57
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	88 2f       	mov	r24, r24
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	a9 01       	movw	r20, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <GPIO_readPin+0x7e>
    149a:	55 95       	asr	r21
    149c:	47 95       	ror	r20
    149e:	8a 95       	dec	r24
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <GPIO_readPin+0x7a>
    14a2:	ca 01       	movw	r24, r20
    14a4:	81 70       	andi	r24, 0x01	; 1
    14a6:	90 70       	andi	r25, 0x00	; 0
    14a8:	88 23       	and	r24, r24
    14aa:	19 f0       	breq	.+6      	; 0x14b2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	49 c0       	rjmp	.+146    	; 0x1544 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14b2:	19 82       	std	Y+1, r1	; 0x01
    14b4:	47 c0       	rjmp	.+142    	; 0x1544 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    14b6:	e6 e3       	ldi	r30, 0x36	; 54
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a9 01       	movw	r20, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <GPIO_readPin+0xae>
    14ca:	55 95       	asr	r21
    14cc:	47 95       	ror	r20
    14ce:	8a 95       	dec	r24
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <GPIO_readPin+0xaa>
    14d2:	ca 01       	movw	r24, r20
    14d4:	81 70       	andi	r24, 0x01	; 1
    14d6:	90 70       	andi	r25, 0x00	; 0
    14d8:	88 23       	and	r24, r24
    14da:	19 f0       	breq	.+6      	; 0x14e2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	31 c0       	rjmp	.+98     	; 0x1544 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14e2:	19 82       	std	Y+1, r1	; 0x01
    14e4:	2f c0       	rjmp	.+94     	; 0x1544 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    14e6:	e3 e3       	ldi	r30, 0x33	; 51
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	a9 01       	movw	r20, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <GPIO_readPin+0xde>
    14fa:	55 95       	asr	r21
    14fc:	47 95       	ror	r20
    14fe:	8a 95       	dec	r24
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <GPIO_readPin+0xda>
    1502:	ca 01       	movw	r24, r20
    1504:	81 70       	andi	r24, 0x01	; 1
    1506:	90 70       	andi	r25, 0x00	; 0
    1508:	88 23       	and	r24, r24
    150a:	19 f0       	breq	.+6      	; 0x1512 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	19 c0       	rjmp	.+50     	; 0x1544 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1512:	19 82       	std	Y+1, r1	; 0x01
    1514:	17 c0       	rjmp	.+46     	; 0x1544 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1516:	e0 e3       	ldi	r30, 0x30	; 48
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	88 2f       	mov	r24, r24
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a9 01       	movw	r20, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <GPIO_readPin+0x10e>
    152a:	55 95       	asr	r21
    152c:	47 95       	ror	r20
    152e:	8a 95       	dec	r24
    1530:	e2 f7       	brpl	.-8      	; 0x152a <GPIO_readPin+0x10a>
    1532:	ca 01       	movw	r24, r20
    1534:	81 70       	andi	r24, 0x01	; 1
    1536:	90 70       	andi	r25, 0x00	; 0
    1538:	88 23       	and	r24, r24
    153a:	19 f0       	breq	.+6      	; 0x1542 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1542:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1544:	89 81       	ldd	r24, Y+1	; 0x01
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <GPIO_setupPortDirection+0x6>
    155c:	00 d0       	rcall	.+0      	; 0x155e <GPIO_setupPortDirection+0x8>
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	84 30       	cpi	r24, 0x04	; 4
    156a:	90 f5       	brcc	.+100    	; 0x15d0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3c 83       	std	Y+4, r19	; 0x04
    1574:	2b 83       	std	Y+3, r18	; 0x03
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	91 05       	cpc	r25, r1
    157e:	d1 f0       	breq	.+52     	; 0x15b4 <GPIO_setupPortDirection+0x5e>
    1580:	2b 81       	ldd	r18, Y+3	; 0x03
    1582:	3c 81       	ldd	r19, Y+4	; 0x04
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	2c f4       	brge	.+10     	; 0x1594 <GPIO_setupPortDirection+0x3e>
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	61 f0       	breq	.+24     	; 0x15aa <GPIO_setupPortDirection+0x54>
    1592:	1e c0       	rjmp	.+60     	; 0x15d0 <GPIO_setupPortDirection+0x7a>
    1594:	2b 81       	ldd	r18, Y+3	; 0x03
    1596:	3c 81       	ldd	r19, Y+4	; 0x04
    1598:	22 30       	cpi	r18, 0x02	; 2
    159a:	31 05       	cpc	r19, r1
    159c:	81 f0       	breq	.+32     	; 0x15be <GPIO_setupPortDirection+0x68>
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	91 05       	cpc	r25, r1
    15a6:	81 f0       	breq	.+32     	; 0x15c8 <GPIO_setupPortDirection+0x72>
    15a8:	13 c0       	rjmp	.+38     	; 0x15d0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    15aa:	ea e3       	ldi	r30, 0x3A	; 58
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	80 83       	st	Z, r24
    15b2:	0e c0       	rjmp	.+28     	; 0x15d0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    15b4:	e7 e3       	ldi	r30, 0x37	; 55
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	80 83       	st	Z, r24
    15bc:	09 c0       	rjmp	.+18     	; 0x15d0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    15be:	e4 e3       	ldi	r30, 0x34	; 52
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	80 83       	st	Z, r24
    15c6:	04 c0       	rjmp	.+8      	; 0x15d0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    15c8:	e1 e3       	ldi	r30, 0x31	; 49
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	80 83       	st	Z, r24
			break;
		}
	}
}
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <GPIO_writePort+0x6>
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <GPIO_writePort+0x8>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	84 30       	cpi	r24, 0x04	; 4
    15f2:	90 f5       	brcc	.+100    	; 0x1658 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	3c 83       	std	Y+4, r19	; 0x04
    15fc:	2b 83       	std	Y+3, r18	; 0x03
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	91 05       	cpc	r25, r1
    1606:	d1 f0       	breq	.+52     	; 0x163c <GPIO_writePort+0x5e>
    1608:	2b 81       	ldd	r18, Y+3	; 0x03
    160a:	3c 81       	ldd	r19, Y+4	; 0x04
    160c:	22 30       	cpi	r18, 0x02	; 2
    160e:	31 05       	cpc	r19, r1
    1610:	2c f4       	brge	.+10     	; 0x161c <GPIO_writePort+0x3e>
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	9c 81       	ldd	r25, Y+4	; 0x04
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	61 f0       	breq	.+24     	; 0x1632 <GPIO_writePort+0x54>
    161a:	1e c0       	rjmp	.+60     	; 0x1658 <GPIO_writePort+0x7a>
    161c:	2b 81       	ldd	r18, Y+3	; 0x03
    161e:	3c 81       	ldd	r19, Y+4	; 0x04
    1620:	22 30       	cpi	r18, 0x02	; 2
    1622:	31 05       	cpc	r19, r1
    1624:	81 f0       	breq	.+32     	; 0x1646 <GPIO_writePort+0x68>
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	91 05       	cpc	r25, r1
    162e:	81 f0       	breq	.+32     	; 0x1650 <GPIO_writePort+0x72>
    1630:	13 c0       	rjmp	.+38     	; 0x1658 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1632:	eb e3       	ldi	r30, 0x3B	; 59
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	80 83       	st	Z, r24
    163a:	0e c0       	rjmp	.+28     	; 0x1658 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    163c:	e8 e3       	ldi	r30, 0x38	; 56
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	80 83       	st	Z, r24
    1644:	09 c0       	rjmp	.+18     	; 0x1658 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1646:	e5 e3       	ldi	r30, 0x35	; 53
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	80 83       	st	Z, r24
    164e:	04 c0       	rjmp	.+8      	; 0x1658 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1650:	e2 e3       	ldi	r30, 0x32	; 50
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	80 83       	st	Z, r24
			break;
		}
	}
}
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	00 d0       	rcall	.+0      	; 0x166c <GPIO_readPort+0x6>
    166c:	00 d0       	rcall	.+0      	; 0x166e <GPIO_readPort+0x8>
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1674:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	84 30       	cpi	r24, 0x04	; 4
    167a:	90 f5       	brcc	.+100    	; 0x16e0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	3c 83       	std	Y+4, r19	; 0x04
    1684:	2b 83       	std	Y+3, r18	; 0x03
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	91 05       	cpc	r25, r1
    168e:	d1 f0       	breq	.+52     	; 0x16c4 <GPIO_readPort+0x5e>
    1690:	2b 81       	ldd	r18, Y+3	; 0x03
    1692:	3c 81       	ldd	r19, Y+4	; 0x04
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	2c f4       	brge	.+10     	; 0x16a4 <GPIO_readPort+0x3e>
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	61 f0       	breq	.+24     	; 0x16ba <GPIO_readPort+0x54>
    16a2:	1e c0       	rjmp	.+60     	; 0x16e0 <GPIO_readPort+0x7a>
    16a4:	2b 81       	ldd	r18, Y+3	; 0x03
    16a6:	3c 81       	ldd	r19, Y+4	; 0x04
    16a8:	22 30       	cpi	r18, 0x02	; 2
    16aa:	31 05       	cpc	r19, r1
    16ac:	81 f0       	breq	.+32     	; 0x16ce <GPIO_readPort+0x68>
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	83 30       	cpi	r24, 0x03	; 3
    16b4:	91 05       	cpc	r25, r1
    16b6:	81 f0       	breq	.+32     	; 0x16d8 <GPIO_readPort+0x72>
    16b8:	13 c0       	rjmp	.+38     	; 0x16e0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    16ba:	e9 e3       	ldi	r30, 0x39	; 57
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	0e c0       	rjmp	.+28     	; 0x16e0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    16c4:	e6 e3       	ldi	r30, 0x36	; 54
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	89 83       	std	Y+1, r24	; 0x01
    16cc:	09 c0       	rjmp	.+18     	; 0x16e0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    16ce:	e3 e3       	ldi	r30, 0x33	; 51
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    16d8:	e0 e3       	ldi	r30, 0x30	; 48
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <start>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
/*
 *description the function that will be included in the main of the Control_ECU
 */
void start(void){
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	c0 58       	subi	r28, 0x80	; 128
    16fe:	d0 40       	sbci	r29, 0x00	; 0
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
	//Enable I-bit
	SREG|=(1<<7);
    170a:	af e5       	ldi	r26, 0x5F	; 95
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	ef e5       	ldi	r30, 0x5F	; 95
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	80 68       	ori	r24, 0x80	; 128
    1716:	8c 93       	st	X, r24
	uint8 password[5] , confirmPassword[5] , passwordVerified , command;
	//Initialize buzzer
	Buzzer_init();
    1718:	0e 94 17 07 	call	0xe2e	; 0xe2e <Buzzer_init>
	//Initialize DC Motor
	DcMotor_Init();
    171c:	0e 94 40 07 	call	0xe80	; 0xe80 <DcMotor_Init>
	//Initialize UART
	UART_init(&Config);
    1720:	88 e6       	ldi	r24, 0x68	; 104
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	0e 94 82 15 	call	0x2b04	; 0x2b04 <UART_init>
	//Initialize I2C
	TWI_init(&twi_config);
    1728:	8f e6       	ldi	r24, 0x6F	; 111
    172a:	91 e0       	ldi	r25, 0x01	; 1
    172c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <TWI_init>
    1730:	d1 c0       	rjmp	.+418    	; 0x18d4 <start+0x1e4>

	while(passwordVerified == 0)
	{
		receivePassword(password);
    1732:	ce 01       	movw	r24, r28
    1734:	8d 58       	subi	r24, 0x8D	; 141
    1736:	9f 4f       	sbci	r25, 0xFF	; 255
    1738:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <receivePassword>

		receivePassword(confirmPassword);
    173c:	ce 01       	movw	r24, r28
    173e:	88 58       	subi	r24, 0x88	; 136
    1740:	9f 4f       	sbci	r25, 0xFF	; 255
    1742:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <receivePassword>

		passwordVerified = verifyPassword(password, confirmPassword);
    1746:	ce 01       	movw	r24, r28
    1748:	8d 58       	subi	r24, 0x8D	; 141
    174a:	9f 4f       	sbci	r25, 0xFF	; 255
    174c:	9e 01       	movw	r18, r28
    174e:	28 58       	subi	r18, 0x88	; 136
    1750:	3f 4f       	sbci	r19, 0xFF	; 255
    1752:	b9 01       	movw	r22, r18
    1754:	0e 94 71 11 	call	0x22e2	; 0x22e2 <verifyPassword>
    1758:	fe 01       	movw	r30, r28
    175a:	ee 58       	subi	r30, 0x8E	; 142
    175c:	ff 4f       	sbci	r31, 0xFF	; 255
    175e:	80 83       	st	Z, r24
		UART_sendByte(passwordVerified);
    1760:	fe 01       	movw	r30, r28
    1762:	ee 58       	subi	r30, 0x8E	; 142
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 81       	ld	r24, Z
    1768:	0e 94 11 16 	call	0x2c22	; 0x2c22 <UART_sendByte>
    176c:	fe 01       	movw	r30, r28
    176e:	e3 59       	subi	r30, 0x93	; 147
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a2 e0       	ldi	r26, 0x02	; 2
    1778:	b3 e4       	ldi	r27, 0x43	; 67
    177a:	80 83       	st	Z, r24
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	a2 83       	std	Z+2, r26	; 0x02
    1780:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1782:	8e 01       	movw	r16, r28
    1784:	07 59       	subi	r16, 0x97	; 151
    1786:	1f 4f       	sbci	r17, 0xFF	; 255
    1788:	fe 01       	movw	r30, r28
    178a:	e3 59       	subi	r30, 0x93	; 147
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	60 81       	ld	r22, Z
    1790:	71 81       	ldd	r23, Z+1	; 0x01
    1792:	82 81       	ldd	r24, Z+2	; 0x02
    1794:	93 81       	ldd	r25, Z+3	; 0x03
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	4a ef       	ldi	r20, 0xFA	; 250
    179c:	54 e4       	ldi	r21, 0x44	; 68
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	f8 01       	movw	r30, r16
    17a8:	80 83       	st	Z, r24
    17aa:	91 83       	std	Z+1, r25	; 0x01
    17ac:	a2 83       	std	Z+2, r26	; 0x02
    17ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17b0:	fe 01       	movw	r30, r28
    17b2:	e7 59       	subi	r30, 0x97	; 151
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	82 81       	ldd	r24, Z+2	; 0x02
    17bc:	93 81       	ldd	r25, Z+3	; 0x03
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 e8       	ldi	r20, 0x80	; 128
    17c4:	5f e3       	ldi	r21, 0x3F	; 63
    17c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ca:	88 23       	and	r24, r24
    17cc:	44 f4       	brge	.+16     	; 0x17de <start+0xee>
		__ticks = 1;
    17ce:	fe 01       	movw	r30, r28
    17d0:	e9 59       	subi	r30, 0x99	; 153
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	91 83       	std	Z+1, r25	; 0x01
    17da:	80 83       	st	Z, r24
    17dc:	64 c0       	rjmp	.+200    	; 0x18a6 <start+0x1b6>
	else if (__tmp > 65535)
    17de:	fe 01       	movw	r30, r28
    17e0:	e7 59       	subi	r30, 0x97	; 151
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	60 81       	ld	r22, Z
    17e6:	71 81       	ldd	r23, Z+1	; 0x01
    17e8:	82 81       	ldd	r24, Z+2	; 0x02
    17ea:	93 81       	ldd	r25, Z+3	; 0x03
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	3f ef       	ldi	r19, 0xFF	; 255
    17f0:	4f e7       	ldi	r20, 0x7F	; 127
    17f2:	57 e4       	ldi	r21, 0x47	; 71
    17f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17f8:	18 16       	cp	r1, r24
    17fa:	0c f0       	brlt	.+2      	; 0x17fe <start+0x10e>
    17fc:	43 c0       	rjmp	.+134    	; 0x1884 <start+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fe:	fe 01       	movw	r30, r28
    1800:	e3 59       	subi	r30, 0x93	; 147
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	60 81       	ld	r22, Z
    1806:	71 81       	ldd	r23, Z+1	; 0x01
    1808:	82 81       	ldd	r24, Z+2	; 0x02
    180a:	93 81       	ldd	r25, Z+3	; 0x03
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e2       	ldi	r20, 0x20	; 32
    1812:	51 e4       	ldi	r21, 0x41	; 65
    1814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	8e 01       	movw	r16, r28
    181e:	09 59       	subi	r16, 0x99	; 153
    1820:	1f 4f       	sbci	r17, 0xFF	; 255
    1822:	bc 01       	movw	r22, r24
    1824:	cd 01       	movw	r24, r26
    1826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	f8 01       	movw	r30, r16
    1830:	91 83       	std	Z+1, r25	; 0x01
    1832:	80 83       	st	Z, r24
    1834:	1f c0       	rjmp	.+62     	; 0x1874 <start+0x184>
    1836:	fe 01       	movw	r30, r28
    1838:	eb 59       	subi	r30, 0x9B	; 155
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	88 ec       	ldi	r24, 0xC8	; 200
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1844:	fe 01       	movw	r30, r28
    1846:	eb 59       	subi	r30, 0x9B	; 155
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	80 81       	ld	r24, Z
    184c:	91 81       	ldd	r25, Z+1	; 0x01
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <start+0x15e>
    1852:	fe 01       	movw	r30, r28
    1854:	eb 59       	subi	r30, 0x9B	; 155
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	91 83       	std	Z+1, r25	; 0x01
    185a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185c:	de 01       	movw	r26, r28
    185e:	a9 59       	subi	r26, 0x99	; 153
    1860:	bf 4f       	sbci	r27, 0xFF	; 255
    1862:	fe 01       	movw	r30, r28
    1864:	e9 59       	subi	r30, 0x99	; 153
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	11 96       	adiw	r26, 0x01	; 1
    1870:	9c 93       	st	X, r25
    1872:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1874:	fe 01       	movw	r30, r28
    1876:	e9 59       	subi	r30, 0x99	; 153
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	80 81       	ld	r24, Z
    187c:	91 81       	ldd	r25, Z+1	; 0x01
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	d1 f6       	brne	.-76     	; 0x1836 <start+0x146>
    1882:	28 c0       	rjmp	.+80     	; 0x18d4 <start+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1884:	8e 01       	movw	r16, r28
    1886:	09 59       	subi	r16, 0x99	; 153
    1888:	1f 4f       	sbci	r17, 0xFF	; 255
    188a:	fe 01       	movw	r30, r28
    188c:	e7 59       	subi	r30, 0x97	; 151
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	60 81       	ld	r22, Z
    1892:	71 81       	ldd	r23, Z+1	; 0x01
    1894:	82 81       	ldd	r24, Z+2	; 0x02
    1896:	93 81       	ldd	r25, Z+3	; 0x03
    1898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	f8 01       	movw	r30, r16
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	80 83       	st	Z, r24
    18a6:	de 01       	movw	r26, r28
    18a8:	ad 59       	subi	r26, 0x9D	; 157
    18aa:	bf 4f       	sbci	r27, 0xFF	; 255
    18ac:	fe 01       	movw	r30, r28
    18ae:	e9 59       	subi	r30, 0x99	; 153
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	80 81       	ld	r24, Z
    18b4:	91 81       	ldd	r25, Z+1	; 0x01
    18b6:	11 96       	adiw	r26, 0x01	; 1
    18b8:	9c 93       	st	X, r25
    18ba:	8e 93       	st	-X, r24
    18bc:	fe 01       	movw	r30, r28
    18be:	ed 59       	subi	r30, 0x9D	; 157
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	80 81       	ld	r24, Z
    18c4:	91 81       	ldd	r25, Z+1	; 0x01
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <start+0x1d6>
    18ca:	fe 01       	movw	r30, r28
    18cc:	ed 59       	subi	r30, 0x9D	; 157
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	91 83       	std	Z+1, r25	; 0x01
    18d2:	80 83       	st	Z, r24
	//Initialize UART
	UART_init(&Config);
	//Initialize I2C
	TWI_init(&twi_config);

	while(passwordVerified == 0)
    18d4:	fe 01       	movw	r30, r28
    18d6:	ee 58       	subi	r30, 0x8E	; 142
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 81       	ld	r24, Z
    18dc:	88 23       	and	r24, r24
    18de:	09 f4       	brne	.+2      	; 0x18e2 <start+0x1f2>
    18e0:	28 cf       	rjmp	.-432    	; 0x1732 <start+0x42>

		_delay_ms(UART_DELAY);
	}


	storePasswordeeprom(password);
    18e2:	ce 01       	movw	r24, r28
    18e4:	8d 58       	subi	r24, 0x8D	; 141
    18e6:	9f 4f       	sbci	r25, 0xFF	; 255
    18e8:	0e 94 df 11 	call	0x23be	; 0x23be <storePasswordeeprom>


	while(1)
	{
		uint8 passwordEEPROM[4];
		readPasswordeeprom(passwordEEPROM);
    18ec:	ce 01       	movw	r24, r28
    18ee:	83 58       	subi	r24, 0x83	; 131
    18f0:	9f 4f       	sbci	r25, 0xFF	; 255
    18f2:	0e 94 82 12 	call	0x2504	; 0x2504 <readPasswordeeprom>
		command = UART_recieveByte();
    18f6:	0e 94 28 16 	call	0x2c50	; 0x2c50 <UART_recieveByte>
    18fa:	fe 01       	movw	r30, r28
    18fc:	ef 58       	subi	r30, 0x8F	; 143
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 83       	st	Z, r24
    1902:	fe 01       	movw	r30, r28
    1904:	e1 5a       	subi	r30, 0xA1	; 161
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a2 e0       	ldi	r26, 0x02	; 2
    190e:	b3 e4       	ldi	r27, 0x43	; 67
    1910:	80 83       	st	Z, r24
    1912:	91 83       	std	Z+1, r25	; 0x01
    1914:	a2 83       	std	Z+2, r26	; 0x02
    1916:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1918:	8e 01       	movw	r16, r28
    191a:	05 5a       	subi	r16, 0xA5	; 165
    191c:	1f 4f       	sbci	r17, 0xFF	; 255
    191e:	fe 01       	movw	r30, r28
    1920:	e1 5a       	subi	r30, 0xA1	; 161
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	60 81       	ld	r22, Z
    1926:	71 81       	ldd	r23, Z+1	; 0x01
    1928:	82 81       	ldd	r24, Z+2	; 0x02
    192a:	93 81       	ldd	r25, Z+3	; 0x03
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	4a ef       	ldi	r20, 0xFA	; 250
    1932:	54 e4       	ldi	r21, 0x44	; 68
    1934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	f8 01       	movw	r30, r16
    193e:	80 83       	st	Z, r24
    1940:	91 83       	std	Z+1, r25	; 0x01
    1942:	a2 83       	std	Z+2, r26	; 0x02
    1944:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1946:	fe 01       	movw	r30, r28
    1948:	e5 5a       	subi	r30, 0xA5	; 165
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	60 81       	ld	r22, Z
    194e:	71 81       	ldd	r23, Z+1	; 0x01
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	93 81       	ldd	r25, Z+3	; 0x03
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e8       	ldi	r20, 0x80	; 128
    195a:	5f e3       	ldi	r21, 0x3F	; 63
    195c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1960:	88 23       	and	r24, r24
    1962:	44 f4       	brge	.+16     	; 0x1974 <start+0x284>
		__ticks = 1;
    1964:	fe 01       	movw	r30, r28
    1966:	e7 5a       	subi	r30, 0xA7	; 167
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	91 83       	std	Z+1, r25	; 0x01
    1970:	80 83       	st	Z, r24
    1972:	64 c0       	rjmp	.+200    	; 0x1a3c <start+0x34c>
	else if (__tmp > 65535)
    1974:	fe 01       	movw	r30, r28
    1976:	e5 5a       	subi	r30, 0xA5	; 165
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	60 81       	ld	r22, Z
    197c:	71 81       	ldd	r23, Z+1	; 0x01
    197e:	82 81       	ldd	r24, Z+2	; 0x02
    1980:	93 81       	ldd	r25, Z+3	; 0x03
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	3f ef       	ldi	r19, 0xFF	; 255
    1986:	4f e7       	ldi	r20, 0x7F	; 127
    1988:	57 e4       	ldi	r21, 0x47	; 71
    198a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    198e:	18 16       	cp	r1, r24
    1990:	0c f0       	brlt	.+2      	; 0x1994 <start+0x2a4>
    1992:	43 c0       	rjmp	.+134    	; 0x1a1a <start+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1994:	fe 01       	movw	r30, r28
    1996:	e1 5a       	subi	r30, 0xA1	; 161
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	60 81       	ld	r22, Z
    199c:	71 81       	ldd	r23, Z+1	; 0x01
    199e:	82 81       	ldd	r24, Z+2	; 0x02
    19a0:	93 81       	ldd	r25, Z+3	; 0x03
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e2       	ldi	r20, 0x20	; 32
    19a8:	51 e4       	ldi	r21, 0x41	; 65
    19aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	8e 01       	movw	r16, r28
    19b4:	07 5a       	subi	r16, 0xA7	; 167
    19b6:	1f 4f       	sbci	r17, 0xFF	; 255
    19b8:	bc 01       	movw	r22, r24
    19ba:	cd 01       	movw	r24, r26
    19bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	f8 01       	movw	r30, r16
    19c6:	91 83       	std	Z+1, r25	; 0x01
    19c8:	80 83       	st	Z, r24
    19ca:	1f c0       	rjmp	.+62     	; 0x1a0a <start+0x31a>
    19cc:	fe 01       	movw	r30, r28
    19ce:	e9 5a       	subi	r30, 0xA9	; 169
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	88 ec       	ldi	r24, 0xC8	; 200
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	80 83       	st	Z, r24
    19da:	fe 01       	movw	r30, r28
    19dc:	e9 5a       	subi	r30, 0xA9	; 169
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	80 81       	ld	r24, Z
    19e2:	91 81       	ldd	r25, Z+1	; 0x01
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <start+0x2f4>
    19e8:	fe 01       	movw	r30, r28
    19ea:	e9 5a       	subi	r30, 0xA9	; 169
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f2:	de 01       	movw	r26, r28
    19f4:	a7 5a       	subi	r26, 0xA7	; 167
    19f6:	bf 4f       	sbci	r27, 0xFF	; 255
    19f8:	fe 01       	movw	r30, r28
    19fa:	e7 5a       	subi	r30, 0xA7	; 167
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	11 96       	adiw	r26, 0x01	; 1
    1a06:	9c 93       	st	X, r25
    1a08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e7 5a       	subi	r30, 0xA7	; 167
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	91 81       	ldd	r25, Z+1	; 0x01
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	d1 f6       	brne	.-76     	; 0x19cc <start+0x2dc>
    1a18:	28 c0       	rjmp	.+80     	; 0x1a6a <start+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1a:	8e 01       	movw	r16, r28
    1a1c:	07 5a       	subi	r16, 0xA7	; 167
    1a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a20:	fe 01       	movw	r30, r28
    1a22:	e5 5a       	subi	r30, 0xA5	; 165
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	60 81       	ld	r22, Z
    1a28:	71 81       	ldd	r23, Z+1	; 0x01
    1a2a:	82 81       	ldd	r24, Z+2	; 0x02
    1a2c:	93 81       	ldd	r25, Z+3	; 0x03
    1a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	f8 01       	movw	r30, r16
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	80 83       	st	Z, r24
    1a3c:	de 01       	movw	r26, r28
    1a3e:	ab 5a       	subi	r26, 0xAB	; 171
    1a40:	bf 4f       	sbci	r27, 0xFF	; 255
    1a42:	fe 01       	movw	r30, r28
    1a44:	e7 5a       	subi	r30, 0xA7	; 167
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	80 81       	ld	r24, Z
    1a4a:	91 81       	ldd	r25, Z+1	; 0x01
    1a4c:	11 96       	adiw	r26, 0x01	; 1
    1a4e:	9c 93       	st	X, r25
    1a50:	8e 93       	st	-X, r24
    1a52:	fe 01       	movw	r30, r28
    1a54:	eb 5a       	subi	r30, 0xAB	; 171
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <start+0x36c>
    1a60:	fe 01       	movw	r30, r28
    1a62:	eb 5a       	subi	r30, 0xAB	; 171
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);

		if(command == '+')
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	ef 58       	subi	r30, 0x8F	; 143
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	80 81       	ld	r24, Z
    1a72:	8b 32       	cpi	r24, 0x2B	; 43
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <start+0x388>
    1a76:	da c1       	rjmp	.+948    	; 0x1e2c <start+0x73c>
		{
			receivePassword(password);
    1a78:	ce 01       	movw	r24, r28
    1a7a:	8d 58       	subi	r24, 0x8D	; 141
    1a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7e:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <receivePassword>

			if(verifyPassword(password, passwordEEPROM))
    1a82:	ce 01       	movw	r24, r28
    1a84:	8d 58       	subi	r24, 0x8D	; 141
    1a86:	9f 4f       	sbci	r25, 0xFF	; 255
    1a88:	9e 01       	movw	r18, r28
    1a8a:	23 58       	subi	r18, 0x83	; 131
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	b9 01       	movw	r22, r18
    1a90:	0e 94 71 11 	call	0x22e2	; 0x22e2 <verifyPassword>
    1a94:	88 23       	and	r24, r24
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <start+0x3aa>
    1a98:	bd c0       	rjmp	.+378    	; 0x1c14 <start+0x524>
			{
				falsePasswords = 0;
    1a9a:	10 92 81 01 	sts	0x0181, r1
    1a9e:	10 92 80 01 	sts	0x0180, r1
				UART_sendByte(1);
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	0e 94 11 16 	call	0x2c22	; 0x2c22 <UART_sendByte>
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	ef 5a       	subi	r30, 0xAF	; 175
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a2 e0       	ldi	r26, 0x02	; 2
    1ab4:	b3 e4       	ldi	r27, 0x43	; 67
    1ab6:	80 83       	st	Z, r24
    1ab8:	91 83       	std	Z+1, r25	; 0x01
    1aba:	a2 83       	std	Z+2, r26	; 0x02
    1abc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abe:	8e 01       	movw	r16, r28
    1ac0:	03 5b       	subi	r16, 0xB3	; 179
    1ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	ef 5a       	subi	r30, 0xAF	; 175
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	60 81       	ld	r22, Z
    1acc:	71 81       	ldd	r23, Z+1	; 0x01
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	93 81       	ldd	r25, Z+3	; 0x03
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4a ef       	ldi	r20, 0xFA	; 250
    1ad8:	54 e4       	ldi	r21, 0x44	; 68
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	80 83       	st	Z, r24
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	a2 83       	std	Z+2, r26	; 0x02
    1aea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aec:	fe 01       	movw	r30, r28
    1aee:	e3 5b       	subi	r30, 0xB3	; 179
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	60 81       	ld	r22, Z
    1af4:	71 81       	ldd	r23, Z+1	; 0x01
    1af6:	82 81       	ldd	r24, Z+2	; 0x02
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e8       	ldi	r20, 0x80	; 128
    1b00:	5f e3       	ldi	r21, 0x3F	; 63
    1b02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b06:	88 23       	and	r24, r24
    1b08:	44 f4       	brge	.+16     	; 0x1b1a <start+0x42a>
		__ticks = 1;
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	e5 5b       	subi	r30, 0xB5	; 181
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	80 83       	st	Z, r24
    1b18:	64 c0       	rjmp	.+200    	; 0x1be2 <start+0x4f2>
	else if (__tmp > 65535)
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	e3 5b       	subi	r30, 0xB3	; 179
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	60 81       	ld	r22, Z
    1b22:	71 81       	ldd	r23, Z+1	; 0x01
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	93 81       	ldd	r25, Z+3	; 0x03
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	3f ef       	ldi	r19, 0xFF	; 255
    1b2c:	4f e7       	ldi	r20, 0x7F	; 127
    1b2e:	57 e4       	ldi	r21, 0x47	; 71
    1b30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b34:	18 16       	cp	r1, r24
    1b36:	0c f0       	brlt	.+2      	; 0x1b3a <start+0x44a>
    1b38:	43 c0       	rjmp	.+134    	; 0x1bc0 <start+0x4d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	ef 5a       	subi	r30, 0xAF	; 175
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	60 81       	ld	r22, Z
    1b42:	71 81       	ldd	r23, Z+1	; 0x01
    1b44:	82 81       	ldd	r24, Z+2	; 0x02
    1b46:	93 81       	ldd	r25, Z+3	; 0x03
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e2       	ldi	r20, 0x20	; 32
    1b4e:	51 e4       	ldi	r21, 0x41	; 65
    1b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	8e 01       	movw	r16, r28
    1b5a:	05 5b       	subi	r16, 0xB5	; 181
    1b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5e:	bc 01       	movw	r22, r24
    1b60:	cd 01       	movw	r24, r26
    1b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	f8 01       	movw	r30, r16
    1b6c:	91 83       	std	Z+1, r25	; 0x01
    1b6e:	80 83       	st	Z, r24
    1b70:	1f c0       	rjmp	.+62     	; 0x1bb0 <start+0x4c0>
    1b72:	fe 01       	movw	r30, r28
    1b74:	e7 5b       	subi	r30, 0xB7	; 183
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	88 ec       	ldi	r24, 0xC8	; 200
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	80 83       	st	Z, r24
    1b80:	fe 01       	movw	r30, r28
    1b82:	e7 5b       	subi	r30, 0xB7	; 183
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	80 81       	ld	r24, Z
    1b88:	91 81       	ldd	r25, Z+1	; 0x01
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <start+0x49a>
    1b8e:	fe 01       	movw	r30, r28
    1b90:	e7 5b       	subi	r30, 0xB7	; 183
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	91 83       	std	Z+1, r25	; 0x01
    1b96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b98:	de 01       	movw	r26, r28
    1b9a:	a5 5b       	subi	r26, 0xB5	; 181
    1b9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	e5 5b       	subi	r30, 0xB5	; 181
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	80 81       	ld	r24, Z
    1ba6:	91 81       	ldd	r25, Z+1	; 0x01
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	11 96       	adiw	r26, 0x01	; 1
    1bac:	9c 93       	st	X, r25
    1bae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e5 5b       	subi	r30, 0xB5	; 181
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	80 81       	ld	r24, Z
    1bb8:	91 81       	ldd	r25, Z+1	; 0x01
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	d1 f6       	brne	.-76     	; 0x1b72 <start+0x482>
    1bbe:	27 c0       	rjmp	.+78     	; 0x1c0e <start+0x51e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc0:	8e 01       	movw	r16, r28
    1bc2:	05 5b       	subi	r16, 0xB5	; 181
    1bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e3 5b       	subi	r30, 0xB3	; 179
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	60 81       	ld	r22, Z
    1bce:	71 81       	ldd	r23, Z+1	; 0x01
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	f8 01       	movw	r30, r16
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	80 83       	st	Z, r24
    1be2:	de 01       	movw	r26, r28
    1be4:	a9 5b       	subi	r26, 0xB9	; 185
    1be6:	bf 4f       	sbci	r27, 0xFF	; 255
    1be8:	fe 01       	movw	r30, r28
    1bea:	e5 5b       	subi	r30, 0xB5	; 181
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	80 81       	ld	r24, Z
    1bf0:	91 81       	ldd	r25, Z+1	; 0x01
    1bf2:	8d 93       	st	X+, r24
    1bf4:	9c 93       	st	X, r25
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e9 5b       	subi	r30, 0xB9	; 185
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	80 81       	ld	r24, Z
    1bfe:	91 81       	ldd	r25, Z+1	; 0x01
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <start+0x510>
    1c04:	fe 01       	movw	r30, r28
    1c06:	e9 5b       	subi	r30, 0xB9	; 185
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	80 83       	st	Z, r24
				_delay_ms(UART_DELAY);
				openDoor();
    1c0e:	0e 94 a6 11 	call	0x234c	; 0x234c <openDoor>
    1c12:	6c ce       	rjmp	.-808    	; 0x18ec <start+0x1fc>
			}

			else
			{
				UART_sendByte(0);
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	0e 94 11 16 	call	0x2c22	; 0x2c22 <UART_sendByte>
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	ed 5b       	subi	r30, 0xBD	; 189
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a2 e0       	ldi	r26, 0x02	; 2
    1c26:	b3 e4       	ldi	r27, 0x43	; 67
    1c28:	80 83       	st	Z, r24
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	a2 83       	std	Z+2, r26	; 0x02
    1c2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c30:	8e 01       	movw	r16, r28
    1c32:	01 5c       	subi	r16, 0xC1	; 193
    1c34:	1f 4f       	sbci	r17, 0xFF	; 255
    1c36:	fe 01       	movw	r30, r28
    1c38:	ed 5b       	subi	r30, 0xBD	; 189
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	60 81       	ld	r22, Z
    1c3e:	71 81       	ldd	r23, Z+1	; 0x01
    1c40:	82 81       	ldd	r24, Z+2	; 0x02
    1c42:	93 81       	ldd	r25, Z+3	; 0x03
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	4a ef       	ldi	r20, 0xFA	; 250
    1c4a:	54 e4       	ldi	r21, 0x44	; 68
    1c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	f8 01       	movw	r30, r16
    1c56:	80 83       	st	Z, r24
    1c58:	91 83       	std	Z+1, r25	; 0x01
    1c5a:	a2 83       	std	Z+2, r26	; 0x02
    1c5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c5e:	fe 01       	movw	r30, r28
    1c60:	ff 96       	adiw	r30, 0x3f	; 63
    1c62:	60 81       	ld	r22, Z
    1c64:	71 81       	ldd	r23, Z+1	; 0x01
    1c66:	82 81       	ldd	r24, Z+2	; 0x02
    1c68:	93 81       	ldd	r25, Z+3	; 0x03
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e8       	ldi	r20, 0x80	; 128
    1c70:	5f e3       	ldi	r21, 0x3F	; 63
    1c72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c76:	88 23       	and	r24, r24
    1c78:	2c f4       	brge	.+10     	; 0x1c84 <start+0x594>
		__ticks = 1;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	9e af       	std	Y+62, r25	; 0x3e
    1c80:	8d af       	std	Y+61, r24	; 0x3d
    1c82:	46 c0       	rjmp	.+140    	; 0x1d10 <start+0x620>
	else if (__tmp > 65535)
    1c84:	fe 01       	movw	r30, r28
    1c86:	ff 96       	adiw	r30, 0x3f	; 63
    1c88:	60 81       	ld	r22, Z
    1c8a:	71 81       	ldd	r23, Z+1	; 0x01
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	93 81       	ldd	r25, Z+3	; 0x03
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	3f ef       	ldi	r19, 0xFF	; 255
    1c94:	4f e7       	ldi	r20, 0x7F	; 127
    1c96:	57 e4       	ldi	r21, 0x47	; 71
    1c98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c9c:	18 16       	cp	r1, r24
    1c9e:	64 f5       	brge	.+88     	; 0x1cf8 <start+0x608>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	ed 5b       	subi	r30, 0xBD	; 189
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	60 81       	ld	r22, Z
    1ca8:	71 81       	ldd	r23, Z+1	; 0x01
    1caa:	82 81       	ldd	r24, Z+2	; 0x02
    1cac:	93 81       	ldd	r25, Z+3	; 0x03
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e2       	ldi	r20, 0x20	; 32
    1cb4:	51 e4       	ldi	r21, 0x41	; 65
    1cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	9e af       	std	Y+62, r25	; 0x3e
    1ccc:	8d af       	std	Y+61, r24	; 0x3d
    1cce:	0f c0       	rjmp	.+30     	; 0x1cee <start+0x5fe>
    1cd0:	88 ec       	ldi	r24, 0xC8	; 200
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	9c af       	std	Y+60, r25	; 0x3c
    1cd6:	8b af       	std	Y+59, r24	; 0x3b
    1cd8:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cda:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	f1 f7       	brne	.-4      	; 0x1cdc <start+0x5ec>
    1ce0:	9c af       	std	Y+60, r25	; 0x3c
    1ce2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ce6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	9e af       	std	Y+62, r25	; 0x3e
    1cec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cee:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cf0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	69 f7       	brne	.-38     	; 0x1cd0 <start+0x5e0>
    1cf6:	16 c0       	rjmp	.+44     	; 0x1d24 <start+0x634>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	ff 96       	adiw	r30, 0x3f	; 63
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	93 81       	ldd	r25, Z+3	; 0x03
    1d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9e af       	std	Y+62, r25	; 0x3e
    1d0e:	8d af       	std	Y+61, r24	; 0x3d
    1d10:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d12:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d14:	9a af       	std	Y+58, r25	; 0x3a
    1d16:	89 af       	std	Y+57, r24	; 0x39
    1d18:	89 ad       	ldd	r24, Y+57	; 0x39
    1d1a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <start+0x62c>
    1d20:	9a af       	std	Y+58, r25	; 0x3a
    1d22:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(UART_DELAY);
				falsePasswords++;
    1d24:	80 91 80 01 	lds	r24, 0x0180
    1d28:	90 91 81 01 	lds	r25, 0x0181
    1d2c:	01 96       	adiw	r24, 0x01	; 1
    1d2e:	90 93 81 01 	sts	0x0181, r25
    1d32:	80 93 80 01 	sts	0x0180, r24
				UART_sendByte(falsePasswords);
    1d36:	80 91 80 01 	lds	r24, 0x0180
    1d3a:	90 91 81 01 	lds	r25, 0x0181
    1d3e:	0e 94 11 16 	call	0x2c22	; 0x2c22 <UART_sendByte>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a2 e0       	ldi	r26, 0x02	; 2
    1d48:	b3 e4       	ldi	r27, 0x43	; 67
    1d4a:	8d ab       	std	Y+53, r24	; 0x35
    1d4c:	9e ab       	std	Y+54, r25	; 0x36
    1d4e:	af ab       	std	Y+55, r26	; 0x37
    1d50:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d52:	6d a9       	ldd	r22, Y+53	; 0x35
    1d54:	7e a9       	ldd	r23, Y+54	; 0x36
    1d56:	8f a9       	ldd	r24, Y+55	; 0x37
    1d58:	98 ad       	ldd	r25, Y+56	; 0x38
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a ef       	ldi	r20, 0xFA	; 250
    1d60:	54 e4       	ldi	r21, 0x44	; 68
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	89 ab       	std	Y+49, r24	; 0x31
    1d6c:	9a ab       	std	Y+50, r25	; 0x32
    1d6e:	ab ab       	std	Y+51, r26	; 0x33
    1d70:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d72:	69 a9       	ldd	r22, Y+49	; 0x31
    1d74:	7a a9       	ldd	r23, Y+50	; 0x32
    1d76:	8b a9       	ldd	r24, Y+51	; 0x33
    1d78:	9c a9       	ldd	r25, Y+52	; 0x34
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	2c f4       	brge	.+10     	; 0x1d94 <start+0x6a4>
		__ticks = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	98 ab       	std	Y+48, r25	; 0x30
    1d90:	8f a7       	std	Y+47, r24	; 0x2f
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <start+0x722>
	else if (__tmp > 65535)
    1d94:	69 a9       	ldd	r22, Y+49	; 0x31
    1d96:	7a a9       	ldd	r23, Y+50	; 0x32
    1d98:	8b a9       	ldd	r24, Y+51	; 0x33
    1d9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1da8:	18 16       	cp	r1, r24
    1daa:	4c f5       	brge	.+82     	; 0x1dfe <start+0x70e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dac:	6d a9       	ldd	r22, Y+53	; 0x35
    1dae:	7e a9       	ldd	r23, Y+54	; 0x36
    1db0:	8f a9       	ldd	r24, Y+55	; 0x37
    1db2:	98 ad       	ldd	r25, Y+56	; 0x38
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	98 ab       	std	Y+48, r25	; 0x30
    1dd2:	8f a7       	std	Y+47, r24	; 0x2f
    1dd4:	0f c0       	rjmp	.+30     	; 0x1df4 <start+0x704>
    1dd6:	88 ec       	ldi	r24, 0xC8	; 200
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9e a7       	std	Y+46, r25	; 0x2e
    1ddc:	8d a7       	std	Y+45, r24	; 0x2d
    1dde:	8d a5       	ldd	r24, Y+45	; 0x2d
    1de0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <start+0x6f2>
    1de6:	9e a7       	std	Y+46, r25	; 0x2e
    1de8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dec:	98 a9       	ldd	r25, Y+48	; 0x30
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	98 ab       	std	Y+48, r25	; 0x30
    1df2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df6:	98 a9       	ldd	r25, Y+48	; 0x30
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	69 f7       	brne	.-38     	; 0x1dd6 <start+0x6e6>
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <start+0x736>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfe:	69 a9       	ldd	r22, Y+49	; 0x31
    1e00:	7a a9       	ldd	r23, Y+50	; 0x32
    1e02:	8b a9       	ldd	r24, Y+51	; 0x33
    1e04:	9c a9       	ldd	r25, Y+52	; 0x34
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	98 ab       	std	Y+48, r25	; 0x30
    1e10:	8f a7       	std	Y+47, r24	; 0x2f
    1e12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e14:	98 a9       	ldd	r25, Y+48	; 0x30
    1e16:	9c a7       	std	Y+44, r25	; 0x2c
    1e18:	8b a7       	std	Y+43, r24	; 0x2b
    1e1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <start+0x72e>
    1e22:	9c a7       	std	Y+44, r25	; 0x2c
    1e24:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(UART_DELAY);
				falsePassword();
    1e26:	0e 94 c5 11 	call	0x238a	; 0x238a <falsePassword>
    1e2a:	60 cd       	rjmp	.-1344   	; 0x18ec <start+0x1fc>

			}
		}

		else if(command == '-')
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	ef 58       	subi	r30, 0x8F	; 143
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	80 81       	ld	r24, Z
    1e34:	8d 32       	cpi	r24, 0x2D	; 45
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <start+0x74a>
    1e38:	59 cd       	rjmp	.-1358   	; 0x18ec <start+0x1fc>
		{
			receivePassword(password);
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	8d 58       	subi	r24, 0x8D	; 141
    1e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e40:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <receivePassword>


			passwordVerified = verifyPassword(password, passwordEEPROM);
    1e44:	ce 01       	movw	r24, r28
    1e46:	8d 58       	subi	r24, 0x8D	; 141
    1e48:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4a:	9e 01       	movw	r18, r28
    1e4c:	23 58       	subi	r18, 0x83	; 131
    1e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e50:	b9 01       	movw	r22, r18
    1e52:	0e 94 71 11 	call	0x22e2	; 0x22e2 <verifyPassword>
    1e56:	fe 01       	movw	r30, r28
    1e58:	ee 58       	subi	r30, 0x8E	; 142
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	80 83       	st	Z, r24
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	a2 e0       	ldi	r26, 0x02	; 2
    1e64:	b3 e4       	ldi	r27, 0x43	; 67
    1e66:	8f a3       	std	Y+39, r24	; 0x27
    1e68:	98 a7       	std	Y+40, r25	; 0x28
    1e6a:	a9 a7       	std	Y+41, r26	; 0x29
    1e6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6e:	6f a1       	ldd	r22, Y+39	; 0x27
    1e70:	78 a5       	ldd	r23, Y+40	; 0x28
    1e72:	89 a5       	ldd	r24, Y+41	; 0x29
    1e74:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	4a ef       	ldi	r20, 0xFA	; 250
    1e7c:	54 e4       	ldi	r21, 0x44	; 68
    1e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	8b a3       	std	Y+35, r24	; 0x23
    1e88:	9c a3       	std	Y+36, r25	; 0x24
    1e8a:	ad a3       	std	Y+37, r26	; 0x25
    1e8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e90:	7c a1       	ldd	r23, Y+36	; 0x24
    1e92:	8d a1       	ldd	r24, Y+37	; 0x25
    1e94:	9e a1       	ldd	r25, Y+38	; 0x26
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e8       	ldi	r20, 0x80	; 128
    1e9c:	5f e3       	ldi	r21, 0x3F	; 63
    1e9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ea2:	88 23       	and	r24, r24
    1ea4:	2c f4       	brge	.+10     	; 0x1eb0 <start+0x7c0>
		__ticks = 1;
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	9a a3       	std	Y+34, r25	; 0x22
    1eac:	89 a3       	std	Y+33, r24	; 0x21
    1eae:	3f c0       	rjmp	.+126    	; 0x1f2e <start+0x83e>
	else if (__tmp > 65535)
    1eb0:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb2:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb4:	8d a1       	ldd	r24, Y+37	; 0x25
    1eb6:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	3f ef       	ldi	r19, 0xFF	; 255
    1ebc:	4f e7       	ldi	r20, 0x7F	; 127
    1ebe:	57 e4       	ldi	r21, 0x47	; 71
    1ec0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ec4:	18 16       	cp	r1, r24
    1ec6:	4c f5       	brge	.+82     	; 0x1f1a <start+0x82a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec8:	6f a1       	ldd	r22, Y+39	; 0x27
    1eca:	78 a5       	ldd	r23, Y+40	; 0x28
    1ecc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ece:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e2       	ldi	r20, 0x20	; 32
    1ed6:	51 e4       	ldi	r21, 0x41	; 65
    1ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	bc 01       	movw	r22, r24
    1ee2:	cd 01       	movw	r24, r26
    1ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	9a a3       	std	Y+34, r25	; 0x22
    1eee:	89 a3       	std	Y+33, r24	; 0x21
    1ef0:	0f c0       	rjmp	.+30     	; 0x1f10 <start+0x820>
    1ef2:	88 ec       	ldi	r24, 0xC8	; 200
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	98 a3       	std	Y+32, r25	; 0x20
    1ef8:	8f 8f       	std	Y+31, r24	; 0x1f
    1efa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1efc:	98 a1       	ldd	r25, Y+32	; 0x20
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <start+0x80e>
    1f02:	98 a3       	std	Y+32, r25	; 0x20
    1f04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f06:	89 a1       	ldd	r24, Y+33	; 0x21
    1f08:	9a a1       	ldd	r25, Y+34	; 0x22
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	9a a3       	std	Y+34, r25	; 0x22
    1f0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f10:	89 a1       	ldd	r24, Y+33	; 0x21
    1f12:	9a a1       	ldd	r25, Y+34	; 0x22
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	69 f7       	brne	.-38     	; 0x1ef2 <start+0x802>
    1f18:	14 c0       	rjmp	.+40     	; 0x1f42 <start+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f20:	9e a1       	ldd	r25, Y+38	; 0x26
    1f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	9a a3       	std	Y+34, r25	; 0x22
    1f2c:	89 a3       	std	Y+33, r24	; 0x21
    1f2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f30:	9a a1       	ldd	r25, Y+34	; 0x22
    1f32:	9e 8f       	std	Y+30, r25	; 0x1e
    1f34:	8d 8f       	std	Y+29, r24	; 0x1d
    1f36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <start+0x84a>
    1f3e:	9e 8f       	std	Y+30, r25	; 0x1e
    1f40:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(UART_DELAY);
			UART_sendByte(passwordVerified);
    1f42:	fe 01       	movw	r30, r28
    1f44:	ee 58       	subi	r30, 0x8E	; 142
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	80 81       	ld	r24, Z
    1f4a:	0e 94 11 16 	call	0x2c22	; 0x2c22 <UART_sendByte>

			if(passwordVerified)
    1f4e:	fe 01       	movw	r30, r28
    1f50:	ee 58       	subi	r30, 0x8E	; 142
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 81       	ld	r24, Z
    1f56:	88 23       	and	r24, r24
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <start+0x86c>
    1f5a:	a0 c0       	rjmp	.+320    	; 0x209c <start+0x9ac>
			{
				falsePasswords = 0;
    1f5c:	10 92 81 01 	sts	0x0181, r1
    1f60:	10 92 80 01 	sts	0x0180, r1
				receivePassword(password);
    1f64:	ce 01       	movw	r24, r28
    1f66:	8d 58       	subi	r24, 0x8D	; 141
    1f68:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6a:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <receivePassword>


				receivePassword(confirmPassword);
    1f6e:	ce 01       	movw	r24, r28
    1f70:	88 58       	subi	r24, 0x88	; 136
    1f72:	9f 4f       	sbci	r25, 0xFF	; 255
    1f74:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <receivePassword>

				passwordVerified = verifyPassword(password, confirmPassword);
    1f78:	ce 01       	movw	r24, r28
    1f7a:	8d 58       	subi	r24, 0x8D	; 141
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	9e 01       	movw	r18, r28
    1f80:	28 58       	subi	r18, 0x88	; 136
    1f82:	3f 4f       	sbci	r19, 0xFF	; 255
    1f84:	b9 01       	movw	r22, r18
    1f86:	0e 94 71 11 	call	0x22e2	; 0x22e2 <verifyPassword>
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	ee 58       	subi	r30, 0x8E	; 142
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	80 83       	st	Z, r24
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	a2 e0       	ldi	r26, 0x02	; 2
    1f98:	b3 e4       	ldi	r27, 0x43	; 67
    1f9a:	89 8f       	std	Y+25, r24	; 0x19
    1f9c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f9e:	ab 8f       	std	Y+27, r26	; 0x1b
    1fa0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	4a ef       	ldi	r20, 0xFA	; 250
    1fb0:	54 e4       	ldi	r21, 0x44	; 68
    1fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	8d 8b       	std	Y+21, r24	; 0x15
    1fbc:	9e 8b       	std	Y+22, r25	; 0x16
    1fbe:	af 8b       	std	Y+23, r26	; 0x17
    1fc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e8       	ldi	r20, 0x80	; 128
    1fd0:	5f e3       	ldi	r21, 0x3F	; 63
    1fd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fd6:	88 23       	and	r24, r24
    1fd8:	2c f4       	brge	.+10     	; 0x1fe4 <start+0x8f4>
		__ticks = 1;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	9c 8b       	std	Y+20, r25	; 0x14
    1fe0:	8b 8b       	std	Y+19, r24	; 0x13
    1fe2:	3f c0       	rjmp	.+126    	; 0x2062 <start+0x972>
	else if (__tmp > 65535)
    1fe4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fea:	98 8d       	ldd	r25, Y+24	; 0x18
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	3f ef       	ldi	r19, 0xFF	; 255
    1ff0:	4f e7       	ldi	r20, 0x7F	; 127
    1ff2:	57 e4       	ldi	r21, 0x47	; 71
    1ff4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ff8:	18 16       	cp	r1, r24
    1ffa:	4c f5       	brge	.+82     	; 0x204e <start+0x95e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ffe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2000:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2002:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e2       	ldi	r20, 0x20	; 32
    200a:	51 e4       	ldi	r21, 0x41	; 65
    200c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	bc 01       	movw	r22, r24
    2016:	cd 01       	movw	r24, r26
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	9c 8b       	std	Y+20, r25	; 0x14
    2022:	8b 8b       	std	Y+19, r24	; 0x13
    2024:	0f c0       	rjmp	.+30     	; 0x2044 <start+0x954>
    2026:	88 ec       	ldi	r24, 0xC8	; 200
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	9a 8b       	std	Y+18, r25	; 0x12
    202c:	89 8b       	std	Y+17, r24	; 0x11
    202e:	89 89       	ldd	r24, Y+17	; 0x11
    2030:	9a 89       	ldd	r25, Y+18	; 0x12
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	f1 f7       	brne	.-4      	; 0x2032 <start+0x942>
    2036:	9a 8b       	std	Y+18, r25	; 0x12
    2038:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203a:	8b 89       	ldd	r24, Y+19	; 0x13
    203c:	9c 89       	ldd	r25, Y+20	; 0x14
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	9c 8b       	std	Y+20, r25	; 0x14
    2042:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2044:	8b 89       	ldd	r24, Y+19	; 0x13
    2046:	9c 89       	ldd	r25, Y+20	; 0x14
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	69 f7       	brne	.-38     	; 0x2026 <start+0x936>
    204c:	14 c0       	rjmp	.+40     	; 0x2076 <start+0x986>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204e:	6d 89       	ldd	r22, Y+21	; 0x15
    2050:	7e 89       	ldd	r23, Y+22	; 0x16
    2052:	8f 89       	ldd	r24, Y+23	; 0x17
    2054:	98 8d       	ldd	r25, Y+24	; 0x18
    2056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	9c 8b       	std	Y+20, r25	; 0x14
    2060:	8b 8b       	std	Y+19, r24	; 0x13
    2062:	8b 89       	ldd	r24, Y+19	; 0x13
    2064:	9c 89       	ldd	r25, Y+20	; 0x14
    2066:	98 8b       	std	Y+16, r25	; 0x10
    2068:	8f 87       	std	Y+15, r24	; 0x0f
    206a:	8f 85       	ldd	r24, Y+15	; 0x0f
    206c:	98 89       	ldd	r25, Y+16	; 0x10
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <start+0x97e>
    2072:	98 8b       	std	Y+16, r25	; 0x10
    2074:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(UART_DELAY);
				UART_sendByte(passwordVerified);
    2076:	fe 01       	movw	r30, r28
    2078:	ee 58       	subi	r30, 0x8E	; 142
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	80 81       	ld	r24, Z
    207e:	0e 94 11 16 	call	0x2c22	; 0x2c22 <UART_sendByte>

				if(passwordVerified)
    2082:	fe 01       	movw	r30, r28
    2084:	ee 58       	subi	r30, 0x8E	; 142
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	80 81       	ld	r24, Z
    208a:	88 23       	and	r24, r24
    208c:	09 f4       	brne	.+2      	; 0x2090 <start+0x9a0>
    208e:	2e cc       	rjmp	.-1956   	; 0x18ec <start+0x1fc>
				{
					storePasswordeeprom(password);
    2090:	ce 01       	movw	r24, r28
    2092:	8d 58       	subi	r24, 0x8D	; 141
    2094:	9f 4f       	sbci	r25, 0xFF	; 255
    2096:	0e 94 df 11 	call	0x23be	; 0x23be <storePasswordeeprom>
    209a:	28 cc       	rjmp	.-1968   	; 0x18ec <start+0x1fc>

			}

			else
			{
				falsePasswords++;
    209c:	80 91 80 01 	lds	r24, 0x0180
    20a0:	90 91 81 01 	lds	r25, 0x0181
    20a4:	01 96       	adiw	r24, 0x01	; 1
    20a6:	90 93 81 01 	sts	0x0181, r25
    20aa:	80 93 80 01 	sts	0x0180, r24
				UART_sendByte(falsePasswords);
    20ae:	80 91 80 01 	lds	r24, 0x0180
    20b2:	90 91 81 01 	lds	r25, 0x0181
    20b6:	0e 94 11 16 	call	0x2c22	; 0x2c22 <UART_sendByte>
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	a2 e0       	ldi	r26, 0x02	; 2
    20c0:	b3 e4       	ldi	r27, 0x43	; 67
    20c2:	8b 87       	std	Y+11, r24	; 0x0b
    20c4:	9c 87       	std	Y+12, r25	; 0x0c
    20c6:	ad 87       	std	Y+13, r26	; 0x0d
    20c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    20cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	4a ef       	ldi	r20, 0xFA	; 250
    20d8:	54 e4       	ldi	r21, 0x44	; 68
    20da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	8f 83       	std	Y+7, r24	; 0x07
    20e4:	98 87       	std	Y+8, r25	; 0x08
    20e6:	a9 87       	std	Y+9, r26	; 0x09
    20e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ea:	6f 81       	ldd	r22, Y+7	; 0x07
    20ec:	78 85       	ldd	r23, Y+8	; 0x08
    20ee:	89 85       	ldd	r24, Y+9	; 0x09
    20f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e8       	ldi	r20, 0x80	; 128
    20f8:	5f e3       	ldi	r21, 0x3F	; 63
    20fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20fe:	88 23       	and	r24, r24
    2100:	2c f4       	brge	.+10     	; 0x210c <start+0xa1c>
		__ticks = 1;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
    210a:	3f c0       	rjmp	.+126    	; 0x218a <start+0xa9a>
	else if (__tmp > 65535)
    210c:	6f 81       	ldd	r22, Y+7	; 0x07
    210e:	78 85       	ldd	r23, Y+8	; 0x08
    2110:	89 85       	ldd	r24, Y+9	; 0x09
    2112:	9a 85       	ldd	r25, Y+10	; 0x0a
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	3f ef       	ldi	r19, 0xFF	; 255
    2118:	4f e7       	ldi	r20, 0x7F	; 127
    211a:	57 e4       	ldi	r21, 0x47	; 71
    211c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2120:	18 16       	cp	r1, r24
    2122:	4c f5       	brge	.+82     	; 0x2176 <start+0xa86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2124:	6b 85       	ldd	r22, Y+11	; 0x0b
    2126:	7c 85       	ldd	r23, Y+12	; 0x0c
    2128:	8d 85       	ldd	r24, Y+13	; 0x0d
    212a:	9e 85       	ldd	r25, Y+14	; 0x0e
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e2       	ldi	r20, 0x20	; 32
    2132:	51 e4       	ldi	r21, 0x41	; 65
    2134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9e 83       	std	Y+6, r25	; 0x06
    214a:	8d 83       	std	Y+5, r24	; 0x05
    214c:	0f c0       	rjmp	.+30     	; 0x216c <start+0xa7c>
    214e:	88 ec       	ldi	r24, 0xC8	; 200
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9c 83       	std	Y+4, r25	; 0x04
    2154:	8b 83       	std	Y+3, r24	; 0x03
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <start+0xa6a>
    215e:	9c 83       	std	Y+4, r25	; 0x04
    2160:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2162:	8d 81       	ldd	r24, Y+5	; 0x05
    2164:	9e 81       	ldd	r25, Y+6	; 0x06
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	9e 83       	std	Y+6, r25	; 0x06
    216a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216c:	8d 81       	ldd	r24, Y+5	; 0x05
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	69 f7       	brne	.-38     	; 0x214e <start+0xa5e>
    2174:	14 c0       	rjmp	.+40     	; 0x219e <start+0xaae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2176:	6f 81       	ldd	r22, Y+7	; 0x07
    2178:	78 85       	ldd	r23, Y+8	; 0x08
    217a:	89 85       	ldd	r24, Y+9	; 0x09
    217c:	9a 85       	ldd	r25, Y+10	; 0x0a
    217e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9e 83       	std	Y+6, r25	; 0x06
    2188:	8d 83       	std	Y+5, r24	; 0x05
    218a:	8d 81       	ldd	r24, Y+5	; 0x05
    218c:	9e 81       	ldd	r25, Y+6	; 0x06
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	9a 81       	ldd	r25, Y+2	; 0x02
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <start+0xaa6>
    219a:	9a 83       	std	Y+2, r25	; 0x02
    219c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(UART_DELAY);
				falsePassword();
    219e:	0e 94 c5 11 	call	0x238a	; 0x238a <falsePassword>
    21a2:	a4 cb       	rjmp	.-2232   	; 0x18ec <start+0x1fc>

000021a4 <receivePassword>:
	}
}


void receivePassword (uint8 password[])
{
    21a4:	0f 93       	push	r16
    21a6:	1f 93       	push	r17
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	61 97       	sbiw	r28, 0x11	; 17
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	99 8b       	std	Y+17, r25	; 0x11
    21be:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    21c0:	1f 86       	std	Y+15, r1	; 0x0f
    21c2:	0f c0       	rjmp	.+30     	; 0x21e2 <receivePassword+0x3e>
	{
		password [i] = UART_recieveByte();
    21c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c6:	28 2f       	mov	r18, r24
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	88 89       	ldd	r24, Y+16	; 0x10
    21cc:	99 89       	ldd	r25, Y+17	; 0x11
    21ce:	8c 01       	movw	r16, r24
    21d0:	02 0f       	add	r16, r18
    21d2:	13 1f       	adc	r17, r19
    21d4:	0e 94 28 16 	call	0x2c50	; 0x2c50 <UART_recieveByte>
    21d8:	f8 01       	movw	r30, r16
    21da:	80 83       	st	Z, r24

void receivePassword (uint8 password[])
{
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    21dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21de:	8f 5f       	subi	r24, 0xFF	; 255
    21e0:	8f 87       	std	Y+15, r24	; 0x0f
    21e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e4:	85 30       	cpi	r24, 0x05	; 5
    21e6:	70 f3       	brcs	.-36     	; 0x21c4 <receivePassword+0x20>
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	a2 e0       	ldi	r26, 0x02	; 2
    21ee:	b3 e4       	ldi	r27, 0x43	; 67
    21f0:	8b 87       	std	Y+11, r24	; 0x0b
    21f2:	9c 87       	std	Y+12, r25	; 0x0c
    21f4:	ad 87       	std	Y+13, r26	; 0x0d
    21f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4a ef       	ldi	r20, 0xFA	; 250
    2206:	54 e4       	ldi	r21, 0x44	; 68
    2208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8f 83       	std	Y+7, r24	; 0x07
    2212:	98 87       	std	Y+8, r25	; 0x08
    2214:	a9 87       	std	Y+9, r26	; 0x09
    2216:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2218:	6f 81       	ldd	r22, Y+7	; 0x07
    221a:	78 85       	ldd	r23, Y+8	; 0x08
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e8       	ldi	r20, 0x80	; 128
    2226:	5f e3       	ldi	r21, 0x3F	; 63
    2228:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    222c:	88 23       	and	r24, r24
    222e:	2c f4       	brge	.+10     	; 0x223a <receivePassword+0x96>
		__ticks = 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	3f c0       	rjmp	.+126    	; 0x22b8 <receivePassword+0x114>
	else if (__tmp > 65535)
    223a:	6f 81       	ldd	r22, Y+7	; 0x07
    223c:	78 85       	ldd	r23, Y+8	; 0x08
    223e:	89 85       	ldd	r24, Y+9	; 0x09
    2240:	9a 85       	ldd	r25, Y+10	; 0x0a
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	3f ef       	ldi	r19, 0xFF	; 255
    2246:	4f e7       	ldi	r20, 0x7F	; 127
    2248:	57 e4       	ldi	r21, 0x47	; 71
    224a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    224e:	18 16       	cp	r1, r24
    2250:	4c f5       	brge	.+82     	; 0x22a4 <receivePassword+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2252:	6b 85       	ldd	r22, Y+11	; 0x0b
    2254:	7c 85       	ldd	r23, Y+12	; 0x0c
    2256:	8d 85       	ldd	r24, Y+13	; 0x0d
    2258:	9e 85       	ldd	r25, Y+14	; 0x0e
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e2       	ldi	r20, 0x20	; 32
    2260:	51 e4       	ldi	r21, 0x41	; 65
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	bc 01       	movw	r22, r24
    226c:	cd 01       	movw	r24, r26
    226e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	9e 83       	std	Y+6, r25	; 0x06
    2278:	8d 83       	std	Y+5, r24	; 0x05
    227a:	0f c0       	rjmp	.+30     	; 0x229a <receivePassword+0xf6>
    227c:	88 ec       	ldi	r24, 0xC8	; 200
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9c 83       	std	Y+4, r25	; 0x04
    2282:	8b 83       	std	Y+3, r24	; 0x03
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <receivePassword+0xe4>
    228c:	9c 83       	std	Y+4, r25	; 0x04
    228e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	9e 81       	ldd	r25, Y+6	; 0x06
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	9e 83       	std	Y+6, r25	; 0x06
    2298:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229a:	8d 81       	ldd	r24, Y+5	; 0x05
    229c:	9e 81       	ldd	r25, Y+6	; 0x06
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	69 f7       	brne	.-38     	; 0x227c <receivePassword+0xd8>
    22a2:	14 c0       	rjmp	.+40     	; 0x22cc <receivePassword+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a4:	6f 81       	ldd	r22, Y+7	; 0x07
    22a6:	78 85       	ldd	r23, Y+8	; 0x08
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9e 83       	std	Y+6, r25	; 0x06
    22b6:	8d 83       	std	Y+5, r24	; 0x05
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	9a 83       	std	Y+2, r25	; 0x02
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <receivePassword+0x120>
    22c8:	9a 83       	std	Y+2, r25	; 0x02
    22ca:	89 83       	std	Y+1, r24	; 0x01
	{
		password [i] = UART_recieveByte();
	}
	_delay_ms (UART_DELAY);
}
    22cc:	61 96       	adiw	r28, 0x11	; 17
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	1f 91       	pop	r17
    22de:	0f 91       	pop	r16
    22e0:	08 95       	ret

000022e2 <verifyPassword>:

uint8 verifyPassword (uint8 password[] , uint8 confirmPassword[])
{
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <verifyPassword+0x6>
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <verifyPassword+0x8>
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <verifyPassword+0xa>
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	9b 83       	std	Y+3, r25	; 0x03
    22f2:	8a 83       	std	Y+2, r24	; 0x02
    22f4:	7d 83       	std	Y+5, r23	; 0x05
    22f6:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    22f8:	19 82       	std	Y+1, r1	; 0x01
    22fa:	19 c0       	rjmp	.+50     	; 0x232e <verifyPassword+0x4c>
	{
		if (password[i] != confirmPassword[i])
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	9b 81       	ldd	r25, Y+3	; 0x03
    2306:	fc 01       	movw	r30, r24
    2308:	e2 0f       	add	r30, r18
    230a:	f3 1f       	adc	r31, r19
    230c:	40 81       	ld	r20, Z
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	8c 81       	ldd	r24, Y+4	; 0x04
    2316:	9d 81       	ldd	r25, Y+5	; 0x05
    2318:	fc 01       	movw	r30, r24
    231a:	e2 0f       	add	r30, r18
    231c:	f3 1f       	adc	r31, r19
    231e:	80 81       	ld	r24, Z
    2320:	48 17       	cp	r20, r24
    2322:	11 f0       	breq	.+4      	; 0x2328 <verifyPassword+0x46>
		{
			return 0;
    2324:	1e 82       	std	Y+6, r1	; 0x06
    2326:	08 c0       	rjmp	.+16     	; 0x2338 <verifyPassword+0x56>

uint8 verifyPassword (uint8 password[] , uint8 confirmPassword[])
{
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	8f 5f       	subi	r24, 0xFF	; 255
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	85 30       	cpi	r24, 0x05	; 5
    2332:	20 f3       	brcs	.-56     	; 0x22fc <verifyPassword+0x1a>
		if (password[i] != confirmPassword[i])
		{
			return 0;
		}
	}
	return 1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	8e 83       	std	Y+6, r24	; 0x06
    2338:	8e 81       	ldd	r24, Y+6	; 0x06
}
    233a:	26 96       	adiw	r28, 0x06	; 6
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	cd bf       	out	0x3d, r28	; 61
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <openDoor>:

void openDoor (void)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62

	DcMotor_Rotate(CLOCKWISE);
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DcMotor_Rotate>
	wait(15);//wait 15 sec
    235a:	8f e0       	ldi	r24, 0x0F	; 15
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	0e 94 3d 13 	call	0x267a	; 0x267a <wait>

	DcMotor_Rotate(STOP);
    2362:	82 e0       	ldi	r24, 0x02	; 2
    2364:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DcMotor_Rotate>
	wait(3);//wait 3 sec
    2368:	83 e0       	ldi	r24, 0x03	; 3
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	0e 94 3d 13 	call	0x267a	; 0x267a <wait>


	DcMotor_Rotate(ANTICLOCKWISE);
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DcMotor_Rotate>
	wait(15);//wait 15 sec
    2376:	8f e0       	ldi	r24, 0x0F	; 15
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	0e 94 3d 13 	call	0x267a	; 0x267a <wait>

	DcMotor_Rotate(STOP);
    237e:	82 e0       	ldi	r24, 0x02	; 2
    2380:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DcMotor_Rotate>
}
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <falsePassword>:

void falsePassword (void)
{
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
	if (falsePasswords >= 3)
    2392:	80 91 80 01 	lds	r24, 0x0180
    2396:	90 91 81 01 	lds	r25, 0x0181
    239a:	83 30       	cpi	r24, 0x03	; 3
    239c:	91 05       	cpc	r25, r1
    239e:	64 f0       	brlt	.+24     	; 0x23b8 <falsePassword+0x2e>
	{
		falsePasswords = 0;
    23a0:	10 92 81 01 	sts	0x0181, r1
    23a4:	10 92 80 01 	sts	0x0180, r1
		Buzzer_on();
    23a8:	0e 94 28 07 	call	0xe50	; 0xe50 <Buzzer_on>
		wait(60);//wait for 1 minute
    23ac:	8c e3       	ldi	r24, 0x3C	; 60
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	0e 94 3d 13 	call	0x267a	; 0x267a <wait>
		Buzzer_off();
    23b4:	0e 94 34 07 	call	0xe68	; 0xe68 <Buzzer_off>
	}
}
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <storePasswordeeprom>:

void storePasswordeeprom (uint8 password[])
{
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	61 97       	sbiw	r28, 0x11	; 17
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	f8 94       	cli
    23cc:	de bf       	out	0x3e, r29	; 62
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	cd bf       	out	0x3d, r28	; 61
    23d2:	99 8b       	std	Y+17, r25	; 0x11
    23d4:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    23d6:	1f 86       	std	Y+15, r1	; 0x0f
    23d8:	88 c0       	rjmp	.+272    	; 0x24ea <storePasswordeeprom+0x12c>
	{
	EEPROM_writeByte ((0X0090 + i) , (password[i]));
    23da:	8f 85       	ldd	r24, Y+15	; 0x0f
    23dc:	88 2f       	mov	r24, r24
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	80 57       	subi	r24, 0x70	; 112
    23e2:	9f 4f       	sbci	r25, 0xFF	; 255
    23e4:	ac 01       	movw	r20, r24
    23e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e8:	28 2f       	mov	r18, r24
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	88 89       	ldd	r24, Y+16	; 0x10
    23ee:	99 89       	ldd	r25, Y+17	; 0x11
    23f0:	fc 01       	movw	r30, r24
    23f2:	e2 0f       	add	r30, r18
    23f4:	f3 1f       	adc	r31, r19
    23f6:	20 81       	ld	r18, Z
    23f8:	ca 01       	movw	r24, r20
    23fa:	62 2f       	mov	r22, r18
    23fc:	0e 94 99 07 	call	0xf32	; 0xf32 <EEPROM_writeByte>
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	a2 e0       	ldi	r26, 0x02	; 2
    2406:	b3 e4       	ldi	r27, 0x43	; 67
    2408:	8b 87       	std	Y+11, r24	; 0x0b
    240a:	9c 87       	std	Y+12, r25	; 0x0c
    240c:	ad 87       	std	Y+13, r26	; 0x0d
    240e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2410:	6b 85       	ldd	r22, Y+11	; 0x0b
    2412:	7c 85       	ldd	r23, Y+12	; 0x0c
    2414:	8d 85       	ldd	r24, Y+13	; 0x0d
    2416:	9e 85       	ldd	r25, Y+14	; 0x0e
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	4a ef       	ldi	r20, 0xFA	; 250
    241e:	54 e4       	ldi	r21, 0x44	; 68
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	8f 83       	std	Y+7, r24	; 0x07
    242a:	98 87       	std	Y+8, r25	; 0x08
    242c:	a9 87       	std	Y+9, r26	; 0x09
    242e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2430:	6f 81       	ldd	r22, Y+7	; 0x07
    2432:	78 85       	ldd	r23, Y+8	; 0x08
    2434:	89 85       	ldd	r24, Y+9	; 0x09
    2436:	9a 85       	ldd	r25, Y+10	; 0x0a
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e8       	ldi	r20, 0x80	; 128
    243e:	5f e3       	ldi	r21, 0x3F	; 63
    2440:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2444:	88 23       	and	r24, r24
    2446:	2c f4       	brge	.+10     	; 0x2452 <storePasswordeeprom+0x94>
		__ticks = 1;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	9e 83       	std	Y+6, r25	; 0x06
    244e:	8d 83       	std	Y+5, r24	; 0x05
    2450:	3f c0       	rjmp	.+126    	; 0x24d0 <storePasswordeeprom+0x112>
	else if (__tmp > 65535)
    2452:	6f 81       	ldd	r22, Y+7	; 0x07
    2454:	78 85       	ldd	r23, Y+8	; 0x08
    2456:	89 85       	ldd	r24, Y+9	; 0x09
    2458:	9a 85       	ldd	r25, Y+10	; 0x0a
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	3f ef       	ldi	r19, 0xFF	; 255
    245e:	4f e7       	ldi	r20, 0x7F	; 127
    2460:	57 e4       	ldi	r21, 0x47	; 71
    2462:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2466:	18 16       	cp	r1, r24
    2468:	4c f5       	brge	.+82     	; 0x24bc <storePasswordeeprom+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246a:	6b 85       	ldd	r22, Y+11	; 0x0b
    246c:	7c 85       	ldd	r23, Y+12	; 0x0c
    246e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2470:	9e 85       	ldd	r25, Y+14	; 0x0e
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e2       	ldi	r20, 0x20	; 32
    2478:	51 e4       	ldi	r21, 0x41	; 65
    247a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9e 83       	std	Y+6, r25	; 0x06
    2490:	8d 83       	std	Y+5, r24	; 0x05
    2492:	0f c0       	rjmp	.+30     	; 0x24b2 <storePasswordeeprom+0xf4>
    2494:	88 ec       	ldi	r24, 0xC8	; 200
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	9c 83       	std	Y+4, r25	; 0x04
    249a:	8b 83       	std	Y+3, r24	; 0x03
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	9c 81       	ldd	r25, Y+4	; 0x04
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <storePasswordeeprom+0xe2>
    24a4:	9c 83       	std	Y+4, r25	; 0x04
    24a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a8:	8d 81       	ldd	r24, Y+5	; 0x05
    24aa:	9e 81       	ldd	r25, Y+6	; 0x06
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b2:	8d 81       	ldd	r24, Y+5	; 0x05
    24b4:	9e 81       	ldd	r25, Y+6	; 0x06
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	69 f7       	brne	.-38     	; 0x2494 <storePasswordeeprom+0xd6>
    24ba:	14 c0       	rjmp	.+40     	; 0x24e4 <storePasswordeeprom+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24bc:	6f 81       	ldd	r22, Y+7	; 0x07
    24be:	78 85       	ldd	r23, Y+8	; 0x08
    24c0:	89 85       	ldd	r24, Y+9	; 0x09
    24c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	9e 81       	ldd	r25, Y+6	; 0x06
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	9a 81       	ldd	r25, Y+2	; 0x02
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <storePasswordeeprom+0x11e>
    24e0:	9a 83       	std	Y+2, r25	; 0x02
    24e2:	89 83       	std	Y+1, r24	; 0x01
}

void storePasswordeeprom (uint8 password[])
{
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    24e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e6:	8f 5f       	subi	r24, 0xFF	; 255
    24e8:	8f 87       	std	Y+15, r24	; 0x0f
    24ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ec:	85 30       	cpi	r24, 0x05	; 5
    24ee:	08 f4       	brcc	.+2      	; 0x24f2 <storePasswordeeprom+0x134>
    24f0:	74 cf       	rjmp	.-280    	; 0x23da <storePasswordeeprom+0x1c>
	{
	EEPROM_writeByte ((0X0090 + i) , (password[i]));
	_delay_ms(UART_DELAY);
	}
}
    24f2:	61 96       	adiw	r28, 0x11	; 17
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	cd bf       	out	0x3d, r28	; 61
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	08 95       	ret

00002504 <readPasswordeeprom>:

void readPasswordeeprom (uint8 password [])
{
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	61 97       	sbiw	r28, 0x11	; 17
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	cd bf       	out	0x3d, r28	; 61
    2518:	99 8b       	std	Y+17, r25	; 0x11
    251a:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    251c:	1f 86       	std	Y+15, r1	; 0x0f
    251e:	86 c0       	rjmp	.+268    	; 0x262c <readPasswordeeprom+0x128>
	{
		EEPROM_readByte ((0x0090 + i) , (password + i));
    2520:	8f 85       	ldd	r24, Y+15	; 0x0f
    2522:	88 2f       	mov	r24, r24
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	80 57       	subi	r24, 0x70	; 112
    2528:	9f 4f       	sbci	r25, 0xFF	; 255
    252a:	ac 01       	movw	r20, r24
    252c:	8f 85       	ldd	r24, Y+15	; 0x0f
    252e:	28 2f       	mov	r18, r24
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	88 89       	ldd	r24, Y+16	; 0x10
    2534:	99 89       	ldd	r25, Y+17	; 0x11
    2536:	28 0f       	add	r18, r24
    2538:	39 1f       	adc	r19, r25
    253a:	ca 01       	movw	r24, r20
    253c:	b9 01       	movw	r22, r18
    253e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <EEPROM_readByte>
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	a8 ec       	ldi	r26, 0xC8	; 200
    2548:	b2 e4       	ldi	r27, 0x42	; 66
    254a:	8b 87       	std	Y+11, r24	; 0x0b
    254c:	9c 87       	std	Y+12, r25	; 0x0c
    254e:	ad 87       	std	Y+13, r26	; 0x0d
    2550:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2552:	6b 85       	ldd	r22, Y+11	; 0x0b
    2554:	7c 85       	ldd	r23, Y+12	; 0x0c
    2556:	8d 85       	ldd	r24, Y+13	; 0x0d
    2558:	9e 85       	ldd	r25, Y+14	; 0x0e
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	4a ef       	ldi	r20, 0xFA	; 250
    2560:	54 e4       	ldi	r21, 0x44	; 68
    2562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	8f 83       	std	Y+7, r24	; 0x07
    256c:	98 87       	std	Y+8, r25	; 0x08
    256e:	a9 87       	std	Y+9, r26	; 0x09
    2570:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2572:	6f 81       	ldd	r22, Y+7	; 0x07
    2574:	78 85       	ldd	r23, Y+8	; 0x08
    2576:	89 85       	ldd	r24, Y+9	; 0x09
    2578:	9a 85       	ldd	r25, Y+10	; 0x0a
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e8       	ldi	r20, 0x80	; 128
    2580:	5f e3       	ldi	r21, 0x3F	; 63
    2582:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2586:	88 23       	and	r24, r24
    2588:	2c f4       	brge	.+10     	; 0x2594 <readPasswordeeprom+0x90>
		__ticks = 1;
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	9e 83       	std	Y+6, r25	; 0x06
    2590:	8d 83       	std	Y+5, r24	; 0x05
    2592:	3f c0       	rjmp	.+126    	; 0x2612 <readPasswordeeprom+0x10e>
	else if (__tmp > 65535)
    2594:	6f 81       	ldd	r22, Y+7	; 0x07
    2596:	78 85       	ldd	r23, Y+8	; 0x08
    2598:	89 85       	ldd	r24, Y+9	; 0x09
    259a:	9a 85       	ldd	r25, Y+10	; 0x0a
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	3f ef       	ldi	r19, 0xFF	; 255
    25a0:	4f e7       	ldi	r20, 0x7F	; 127
    25a2:	57 e4       	ldi	r21, 0x47	; 71
    25a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25a8:	18 16       	cp	r1, r24
    25aa:	4c f5       	brge	.+82     	; 0x25fe <readPasswordeeprom+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e2       	ldi	r20, 0x20	; 32
    25ba:	51 e4       	ldi	r21, 0x41	; 65
    25bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	bc 01       	movw	r22, r24
    25c6:	cd 01       	movw	r24, r26
    25c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	9e 83       	std	Y+6, r25	; 0x06
    25d2:	8d 83       	std	Y+5, r24	; 0x05
    25d4:	0f c0       	rjmp	.+30     	; 0x25f4 <readPasswordeeprom+0xf0>
    25d6:	88 ec       	ldi	r24, 0xC8	; 200
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	9c 83       	std	Y+4, r25	; 0x04
    25dc:	8b 83       	std	Y+3, r24	; 0x03
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	9c 81       	ldd	r25, Y+4	; 0x04
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <readPasswordeeprom+0xde>
    25e6:	9c 83       	std	Y+4, r25	; 0x04
    25e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ea:	8d 81       	ldd	r24, Y+5	; 0x05
    25ec:	9e 81       	ldd	r25, Y+6	; 0x06
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	9e 83       	std	Y+6, r25	; 0x06
    25f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f4:	8d 81       	ldd	r24, Y+5	; 0x05
    25f6:	9e 81       	ldd	r25, Y+6	; 0x06
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	69 f7       	brne	.-38     	; 0x25d6 <readPasswordeeprom+0xd2>
    25fc:	14 c0       	rjmp	.+40     	; 0x2626 <readPasswordeeprom+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2600:	78 85       	ldd	r23, Y+8	; 0x08
    2602:	89 85       	ldd	r24, Y+9	; 0x09
    2604:	9a 85       	ldd	r25, Y+10	; 0x0a
    2606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	9e 83       	std	Y+6, r25	; 0x06
    2610:	8d 83       	std	Y+5, r24	; 0x05
    2612:	8d 81       	ldd	r24, Y+5	; 0x05
    2614:	9e 81       	ldd	r25, Y+6	; 0x06
    2616:	9a 83       	std	Y+2, r25	; 0x02
    2618:	89 83       	std	Y+1, r24	; 0x01
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	9a 81       	ldd	r25, Y+2	; 0x02
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <readPasswordeeprom+0x11a>
    2622:	9a 83       	std	Y+2, r25	; 0x02
    2624:	89 83       	std	Y+1, r24	; 0x01
}

void readPasswordeeprom (uint8 password [])
{
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    2626:	8f 85       	ldd	r24, Y+15	; 0x0f
    2628:	8f 5f       	subi	r24, 0xFF	; 255
    262a:	8f 87       	std	Y+15, r24	; 0x0f
    262c:	8f 85       	ldd	r24, Y+15	; 0x0f
    262e:	85 30       	cpi	r24, 0x05	; 5
    2630:	08 f4       	brcc	.+2      	; 0x2634 <readPasswordeeprom+0x130>
    2632:	76 cf       	rjmp	.-276    	; 0x2520 <readPasswordeeprom+0x1c>
	{
		EEPROM_readByte ((0x0090 + i) , (password + i));
		_delay_ms(100);
	}
}
    2634:	61 96       	adiw	r28, 0x11	; 17
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <timer_tick>:


void timer_tick(void){
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    264e:	80 91 7a 01 	lds	r24, 0x017A
    2652:	90 91 7b 01 	lds	r25, 0x017B
    2656:	a0 91 7c 01 	lds	r26, 0x017C
    265a:	b0 91 7d 01 	lds	r27, 0x017D
    265e:	01 96       	adiw	r24, 0x01	; 1
    2660:	a1 1d       	adc	r26, r1
    2662:	b1 1d       	adc	r27, r1
    2664:	80 93 7a 01 	sts	0x017A, r24
    2668:	90 93 7b 01 	sts	0x017B, r25
    266c:	a0 93 7c 01 	sts	0x017C, r26
    2670:	b0 93 7d 01 	sts	0x017D, r27
}
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <wait>:

void wait(uint16 seconds){
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
    2682:	61 97       	sbiw	r28, 0x11	; 17
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	cd bf       	out	0x3d, r28	; 61
    268e:	9c 87       	std	Y+12, r25	; 0x0c
    2690:	8b 87       	std	Y+11, r24	; 0x0b
	g_tick=0;
    2692:	10 92 7a 01 	sts	0x017A, r1
    2696:	10 92 7b 01 	sts	0x017B, r1
    269a:	10 92 7c 01 	sts	0x017C, r1
    269e:	10 92 7d 01 	sts	0x017D, r1
	uint32 counter=seconds;/*the seconds required to be waited */
    26a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    26a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    26a6:	cc 01       	movw	r24, r24
    26a8:	a0 e0       	ldi	r26, 0x00	; 0
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	89 83       	std	Y+1, r24	; 0x01
    26ae:	9a 83       	std	Y+2, r25	; 0x02
    26b0:	ab 83       	std	Y+3, r26	; 0x03
    26b2:	bc 83       	std	Y+4, r27	; 0x04
	Timer1_ConfigType timerS={0,7813,F_1024,CTC};
    26b4:	ce 01       	movw	r24, r28
    26b6:	05 96       	adiw	r24, 0x05	; 5
    26b8:	9e 87       	std	Y+14, r25	; 0x0e
    26ba:	8d 87       	std	Y+13, r24	; 0x0d
    26bc:	e4 e7       	ldi	r30, 0x74	; 116
    26be:	f1 e0       	ldi	r31, 0x01	; 1
    26c0:	f8 8b       	std	Y+16, r31	; 0x10
    26c2:	ef 87       	std	Y+15, r30	; 0x0f
    26c4:	f6 e0       	ldi	r31, 0x06	; 6
    26c6:	f9 8b       	std	Y+17, r31	; 0x11
    26c8:	ef 85       	ldd	r30, Y+15	; 0x0f
    26ca:	f8 89       	ldd	r31, Y+16	; 0x10
    26cc:	00 80       	ld	r0, Z
    26ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d0:	98 89       	ldd	r25, Y+16	; 0x10
    26d2:	01 96       	adiw	r24, 0x01	; 1
    26d4:	98 8b       	std	Y+16, r25	; 0x10
    26d6:	8f 87       	std	Y+15, r24	; 0x0f
    26d8:	ed 85       	ldd	r30, Y+13	; 0x0d
    26da:	fe 85       	ldd	r31, Y+14	; 0x0e
    26dc:	00 82       	st	Z, r0
    26de:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	9e 87       	std	Y+14, r25	; 0x0e
    26e6:	8d 87       	std	Y+13, r24	; 0x0d
    26e8:	99 89       	ldd	r25, Y+17	; 0x11
    26ea:	91 50       	subi	r25, 0x01	; 1
    26ec:	99 8b       	std	Y+17, r25	; 0x11
    26ee:	e9 89       	ldd	r30, Y+17	; 0x11
    26f0:	ee 23       	and	r30, r30
    26f2:	51 f7       	brne	.-44     	; 0x26c8 <wait+0x4e>
	Timer1_init(&timerS);
    26f4:	ce 01       	movw	r24, r28
    26f6:	05 96       	adiw	r24, 0x05	; 5
    26f8:	0e 94 54 14 	call	0x28a8	; 0x28a8 <Timer1_init>
	Timer1_setCallBack(timer_tick);
    26fc:	83 e2       	ldi	r24, 0x23	; 35
    26fe:	93 e1       	ldi	r25, 0x13	; 19
    2700:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Timer1_setCallBack>
	while(g_tick<counter);
    2704:	20 91 7a 01 	lds	r18, 0x017A
    2708:	30 91 7b 01 	lds	r19, 0x017B
    270c:	40 91 7c 01 	lds	r20, 0x017C
    2710:	50 91 7d 01 	lds	r21, 0x017D
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	9a 81       	ldd	r25, Y+2	; 0x02
    2718:	ab 81       	ldd	r26, Y+3	; 0x03
    271a:	bc 81       	ldd	r27, Y+4	; 0x04
    271c:	28 17       	cp	r18, r24
    271e:	39 07       	cpc	r19, r25
    2720:	4a 07       	cpc	r20, r26
    2722:	5b 07       	cpc	r21, r27
    2724:	78 f3       	brcs	.-34     	; 0x2704 <wait+0x8a>
	Timer1_deInit();
    2726:	0e 94 b7 14 	call	0x296e	; 0x296e <Timer1_deInit>
}
    272a:	61 96       	adiw	r28, 0x11	; 17
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	de bf       	out	0x3e, r29	; 62
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	cd bf       	out	0x3d, r28	; 61
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <main>:

/*******************************************************************************
 *                              MAIN Function                                  *
 *******************************************************************************/
int main()
{
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
	start();
    2744:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <start>
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
}
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <__vector_9>:
#include "common_macros.h"

static volatile void(*g_callBackPtr)(void)=NULL_PTR;

ISR(TIMER1_OVF_vect)
{
    2752:	1f 92       	push	r1
    2754:	0f 92       	push	r0
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	0f 92       	push	r0
    275a:	11 24       	eor	r1, r1
    275c:	2f 93       	push	r18
    275e:	3f 93       	push	r19
    2760:	4f 93       	push	r20
    2762:	5f 93       	push	r21
    2764:	6f 93       	push	r22
    2766:	7f 93       	push	r23
    2768:	8f 93       	push	r24
    276a:	9f 93       	push	r25
    276c:	af 93       	push	r26
    276e:	bf 93       	push	r27
    2770:	ef 93       	push	r30
    2772:	ff 93       	push	r31
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    277c:	80 91 7e 01 	lds	r24, 0x017E
    2780:	90 91 7f 01 	lds	r25, 0x017F
    2784:	00 97       	sbiw	r24, 0x00	; 0
    2786:	29 f0       	breq	.+10     	; 0x2792 <__vector_9+0x40>
	{
		(g_callBackPtr)();
    2788:	e0 91 7e 01 	lds	r30, 0x017E
    278c:	f0 91 7f 01 	lds	r31, 0x017F
    2790:	09 95       	icall
	}
}
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	ff 91       	pop	r31
    2798:	ef 91       	pop	r30
    279a:	bf 91       	pop	r27
    279c:	af 91       	pop	r26
    279e:	9f 91       	pop	r25
    27a0:	8f 91       	pop	r24
    27a2:	7f 91       	pop	r23
    27a4:	6f 91       	pop	r22
    27a6:	5f 91       	pop	r21
    27a8:	4f 91       	pop	r20
    27aa:	3f 91       	pop	r19
    27ac:	2f 91       	pop	r18
    27ae:	0f 90       	pop	r0
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	0f 90       	pop	r0
    27b4:	1f 90       	pop	r1
    27b6:	18 95       	reti

000027b8 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    27b8:	1f 92       	push	r1
    27ba:	0f 92       	push	r0
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	0f 92       	push	r0
    27c0:	11 24       	eor	r1, r1
    27c2:	2f 93       	push	r18
    27c4:	3f 93       	push	r19
    27c6:	4f 93       	push	r20
    27c8:	5f 93       	push	r21
    27ca:	6f 93       	push	r22
    27cc:	7f 93       	push	r23
    27ce:	8f 93       	push	r24
    27d0:	9f 93       	push	r25
    27d2:	af 93       	push	r26
    27d4:	bf 93       	push	r27
    27d6:	ef 93       	push	r30
    27d8:	ff 93       	push	r31
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    27e2:	80 91 7e 01 	lds	r24, 0x017E
    27e6:	90 91 7f 01 	lds	r25, 0x017F
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	29 f0       	breq	.+10     	; 0x27f8 <__vector_7+0x40>
	{
		(g_callBackPtr)();
    27ee:	e0 91 7e 01 	lds	r30, 0x017E
    27f2:	f0 91 7f 01 	lds	r31, 0x017F
    27f6:	09 95       	icall
	}
}
    27f8:	cf 91       	pop	r28
    27fa:	df 91       	pop	r29
    27fc:	ff 91       	pop	r31
    27fe:	ef 91       	pop	r30
    2800:	bf 91       	pop	r27
    2802:	af 91       	pop	r26
    2804:	9f 91       	pop	r25
    2806:	8f 91       	pop	r24
    2808:	7f 91       	pop	r23
    280a:	6f 91       	pop	r22
    280c:	5f 91       	pop	r21
    280e:	4f 91       	pop	r20
    2810:	3f 91       	pop	r19
    2812:	2f 91       	pop	r18
    2814:	0f 90       	pop	r0
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	0f 90       	pop	r0
    281a:	1f 90       	pop	r1
    281c:	18 95       	reti

0000281e <PWM_Timer0_Init>:

void PWM_Timer0_Init(unsigned char set_duty_cycle)
{
    281e:	0f 93       	push	r16
    2820:	1f 93       	push	r17
    2822:	df 93       	push	r29
    2824:	cf 93       	push	r28
    2826:	0f 92       	push	r0
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
    282c:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    282e:	e2 e5       	ldi	r30, 0x52	; 82
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	10 82       	st	Z, r1

	OCR0 = ((float)set_duty_cycle/100) * 255;
    2834:	0c e5       	ldi	r16, 0x5C	; 92
    2836:	10 e0       	ldi	r17, 0x00	; 0
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	88 2f       	mov	r24, r24
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	a0 e0       	ldi	r26, 0x00	; 0
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	bc 01       	movw	r22, r24
    2850:	cd 01       	movw	r24, r26
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	48 ec       	ldi	r20, 0xC8	; 200
    2858:	52 e4       	ldi	r21, 0x42	; 66
    285a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	4f e7       	ldi	r20, 0x7F	; 127
    286c:	53 e4       	ldi	r21, 0x43	; 67
    286e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	f8 01       	movw	r30, r16
    2884:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    2886:	a7 e3       	ldi	r26, 0x37	; 55
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	e7 e3       	ldi	r30, 0x37	; 55
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	88 60       	ori	r24, 0x08	; 8
    2892:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2894:	e3 e5       	ldi	r30, 0x53	; 83
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	8a e6       	ldi	r24, 0x6A	; 106
    289a:	80 83       	st	Z, r24
}
    289c:	0f 90       	pop	r0
    289e:	cf 91       	pop	r28
    28a0:	df 91       	pop	r29
    28a2:	1f 91       	pop	r17
    28a4:	0f 91       	pop	r16
    28a6:	08 95       	ret

000028a8 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <Timer1_init+0x6>
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	9a 83       	std	Y+2, r25	; 0x02
    28b4:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A =0;
    28b6:	ef e4       	ldi	r30, 0x4F	; 79
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	10 82       	st	Z, r1
    SET_BIT(TCCR1A,FOC1A);
    28bc:	af e4       	ldi	r26, 0x4F	; 79
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	ef e4       	ldi	r30, 0x4F	; 79
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	88 60       	ori	r24, 0x08	; 8
    28c8:	8c 93       	st	X, r24
    SET_BIT(TCCR1A,FOC1B);
    28ca:	af e4       	ldi	r26, 0x4F	; 79
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	ef e4       	ldi	r30, 0x4F	; 79
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	84 60       	ori	r24, 0x04	; 4
    28d6:	8c 93       	st	X, r24
    TCCR1B = Config_Ptr->prescaler;
    28d8:	ae e4       	ldi	r26, 0x4E	; 78
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	e9 81       	ldd	r30, Y+1	; 0x01
    28de:	fa 81       	ldd	r31, Y+2	; 0x02
    28e0:	84 81       	ldd	r24, Z+4	; 0x04
    28e2:	8c 93       	st	X, r24
    TCNT1 = Config_Ptr->initial_value;
    28e4:	ac e4       	ldi	r26, 0x4C	; 76
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e9 81       	ldd	r30, Y+1	; 0x01
    28ea:	fa 81       	ldd	r31, Y+2	; 0x02
    28ec:	80 81       	ld	r24, Z
    28ee:	91 81       	ldd	r25, Z+1	; 0x01
    28f0:	11 96       	adiw	r26, 0x01	; 1
    28f2:	9c 93       	st	X, r25
    28f4:	8e 93       	st	-X, r24

    if (Config_Ptr->mode == Normal) {
    28f6:	e9 81       	ldd	r30, Y+1	; 0x01
    28f8:	fa 81       	ldd	r31, Y+2	; 0x02
    28fa:	85 81       	ldd	r24, Z+5	; 0x05
    28fc:	88 23       	and	r24, r24
    28fe:	79 f4       	brne	.+30     	; 0x291e <Timer1_init+0x76>
        SET_BIT(TIMSK, TOIE1);
    2900:	a9 e5       	ldi	r26, 0x59	; 89
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	e9 e5       	ldi	r30, 0x59	; 89
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	84 60       	ori	r24, 0x04	; 4
    290c:	8c 93       	st	X, r24
        SET_BIT(TIFR,TOV1);
    290e:	a8 e5       	ldi	r26, 0x58	; 88
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	e8 e5       	ldi	r30, 0x58	; 88
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	84 60       	ori	r24, 0x04	; 4
    291a:	8c 93       	st	X, r24
    291c:	23 c0       	rjmp	.+70     	; 0x2964 <Timer1_init+0xbc>

    } else if (Config_Ptr->mode == CTC) {
    291e:	e9 81       	ldd	r30, Y+1	; 0x01
    2920:	fa 81       	ldd	r31, Y+2	; 0x02
    2922:	85 81       	ldd	r24, Z+5	; 0x05
    2924:	81 30       	cpi	r24, 0x01	; 1
    2926:	f1 f4       	brne	.+60     	; 0x2964 <Timer1_init+0xbc>
        SET_BIT(TCCR1B, WGM12);
    2928:	ae e4       	ldi	r26, 0x4E	; 78
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	ee e4       	ldi	r30, 0x4E	; 78
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	88 60       	ori	r24, 0x08	; 8
    2934:	8c 93       	st	X, r24
        OCR1A = Config_Ptr->compare_value;
    2936:	aa e4       	ldi	r26, 0x4A	; 74
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e9 81       	ldd	r30, Y+1	; 0x01
    293c:	fa 81       	ldd	r31, Y+2	; 0x02
    293e:	82 81       	ldd	r24, Z+2	; 0x02
    2940:	93 81       	ldd	r25, Z+3	; 0x03
    2942:	11 96       	adiw	r26, 0x01	; 1
    2944:	9c 93       	st	X, r25
    2946:	8e 93       	st	-X, r24
        SET_BIT(TIMSK, OCIE1A);
    2948:	a9 e5       	ldi	r26, 0x59	; 89
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	e9 e5       	ldi	r30, 0x59	; 89
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	80 61       	ori	r24, 0x10	; 16
    2954:	8c 93       	st	X, r24
        SET_BIT(TIFR,OCF1A);
    2956:	a8 e5       	ldi	r26, 0x58	; 88
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	e8 e5       	ldi	r30, 0x58	; 88
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
    2960:	80 61       	ori	r24, 0x10	; 16
    2962:	8c 93       	st	X, r24
    }
}
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	08 95       	ret

0000296e <Timer1_deInit>:

void Timer1_deInit(void)
{
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0xF8;
    2976:	ee e4       	ldi	r30, 0x4E	; 78
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	88 ef       	ldi	r24, 0xF8	; 248
    297c:	80 83       	st	Z, r24
	OCR1A = 0;
    297e:	ea e4       	ldi	r30, 0x4A	; 74
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	11 82       	std	Z+1, r1	; 0x01
    2984:	10 82       	st	Z, r1
	TIMSK &= 0xE3;
    2986:	a9 e5       	ldi	r26, 0x59	; 89
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	e9 e5       	ldi	r30, 0x59	; 89
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	83 7e       	andi	r24, 0xE3	; 227
    2992:	8c 93       	st	X, r24
	TCNT1=0;
    2994:	ec e4       	ldi	r30, 0x4C	; 76
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	11 82       	std	Z+1, r1	; 0x01
    299a:	10 82       	st	Z, r1
}
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	00 d0       	rcall	.+0      	; 0x29a8 <Timer1_setCallBack+0x6>
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	9a 83       	std	Y+2, r25	; 0x02
    29ae:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	9a 81       	ldd	r25, Y+2	; 0x02
    29b4:	90 93 7f 01 	sts	0x017F, r25
    29b8:	80 93 7e 01 	sts	0x017E, r24
}
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	08 95       	ret

000029c6 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(TWI_ConfigType * Config_Ptr)
{
    29c6:	0f 93       	push	r16
    29c8:	1f 93       	push	r17
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <TWI_init+0xa>
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
    29d4:	9a 83       	std	Y+2, r25	; 0x02
    29d6:	89 83       	std	Y+1, r24	; 0x01

	TWBR=((F_CPU/Config_Ptr->bit_rate)-16)/(2);
    29d8:	00 e2       	ldi	r16, 0x20	; 32
    29da:	10 e0       	ldi	r17, 0x00	; 0
    29dc:	e9 81       	ldd	r30, Y+1	; 0x01
    29de:	fa 81       	ldd	r31, Y+2	; 0x02
    29e0:	21 81       	ldd	r18, Z+1	; 0x01
    29e2:	32 81       	ldd	r19, Z+2	; 0x02
    29e4:	43 81       	ldd	r20, Z+3	; 0x03
    29e6:	54 81       	ldd	r21, Z+4	; 0x04
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	92 e1       	ldi	r25, 0x12	; 18
    29ec:	aa e7       	ldi	r26, 0x7A	; 122
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	bc 01       	movw	r22, r24
    29f2:	cd 01       	movw	r24, r26
    29f4:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__udivmodsi4>
    29f8:	da 01       	movw	r26, r20
    29fa:	c9 01       	movw	r24, r18
    29fc:	40 97       	sbiw	r24, 0x10	; 16
    29fe:	a1 09       	sbc	r26, r1
    2a00:	b1 09       	sbc	r27, r1
    2a02:	b6 95       	lsr	r27
    2a04:	a7 95       	ror	r26
    2a06:	97 95       	ror	r25
    2a08:	87 95       	ror	r24
    2a0a:	f8 01       	movw	r30, r16
    2a0c:	80 83       	st	Z, r24
	TWSR = 0x00;
    2a0e:	e1 e2       	ldi	r30, 0x21	; 33
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR =  Config_Ptr->myAddress; // my address = 0x01 :)
    2a14:	a2 e2       	ldi	r26, 0x22	; 34
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a1c:	80 81       	ld	r24, Z
    2a1e:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2a20:	e6 e5       	ldi	r30, 0x56	; 86
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	84 e0       	ldi	r24, 0x04	; 4
    2a26:	80 83       	st	Z, r24
}
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	cf 91       	pop	r28
    2a2e:	df 91       	pop	r29
    2a30:	1f 91       	pop	r17
    2a32:	0f 91       	pop	r16
    2a34:	08 95       	ret

00002a36 <TWI_start>:

void TWI_start(void)
{
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2a3e:	e6 e5       	ldi	r30, 0x56	; 86
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	84 ea       	ldi	r24, 0xA4	; 164
    2a44:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2a46:	e6 e5       	ldi	r30, 0x56	; 86
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	88 23       	and	r24, r24
    2a4e:	dc f7       	brge	.-10     	; 0x2a46 <TWI_start+0x10>
}
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	08 95       	ret

00002a56 <TWI_stop>:

void TWI_stop(void)
{
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2a5e:	e6 e5       	ldi	r30, 0x56	; 86
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	84 e9       	ldi	r24, 0x94	; 148
    2a64:	80 83       	st	Z, r24
}
    2a66:	cf 91       	pop	r28
    2a68:	df 91       	pop	r29
    2a6a:	08 95       	ret

00002a6c <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2a6c:	df 93       	push	r29
    2a6e:	cf 93       	push	r28
    2a70:	0f 92       	push	r0
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
    2a76:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2a78:	e3 e2       	ldi	r30, 0x23	; 35
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2a80:	e6 e5       	ldi	r30, 0x56	; 86
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	84 e8       	ldi	r24, 0x84	; 132
    2a86:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2a88:	e6 e5       	ldi	r30, 0x56	; 86
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	88 23       	and	r24, r24
    2a90:	dc f7       	brge	.-10     	; 0x2a88 <TWI_writeByte+0x1c>
}
    2a92:	0f 90       	pop	r0
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	08 95       	ret

00002a9a <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2aa2:	e6 e5       	ldi	r30, 0x56	; 86
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	84 ec       	ldi	r24, 0xC4	; 196
    2aa8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2aaa:	e6 e5       	ldi	r30, 0x56	; 86
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	88 23       	and	r24, r24
    2ab2:	dc f7       	brge	.-10     	; 0x2aaa <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2ab4:	e3 e2       	ldi	r30, 0x23	; 35
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	80 81       	ld	r24, Z
}
    2aba:	cf 91       	pop	r28
    2abc:	df 91       	pop	r29
    2abe:	08 95       	ret

00002ac0 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2ac0:	df 93       	push	r29
    2ac2:	cf 93       	push	r28
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2ac8:	e6 e5       	ldi	r30, 0x56	; 86
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	84 e8       	ldi	r24, 0x84	; 132
    2ace:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2ad0:	e6 e5       	ldi	r30, 0x56	; 86
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	88 23       	and	r24, r24
    2ad8:	dc f7       	brge	.-10     	; 0x2ad0 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2ada:	e3 e2       	ldi	r30, 0x23	; 35
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
}
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	08 95       	ret

00002ae6 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2ae6:	df 93       	push	r29
    2ae8:	cf 93       	push	r28
    2aea:	0f 92       	push	r0
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2af0:	e1 e2       	ldi	r30, 0x21	; 33
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	88 7f       	andi	r24, 0xF8	; 248
    2af8:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2afc:	0f 90       	pop	r0
    2afe:	cf 91       	pop	r28
    2b00:	df 91       	pop	r29
    2b02:	08 95       	ret

00002b04 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	28 97       	sbiw	r28, 0x08	; 8
    2b0e:	0f b6       	in	r0, 0x3f	; 63
    2b10:	f8 94       	cli
    2b12:	de bf       	out	0x3e, r29	; 62
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	cd bf       	out	0x3d, r28	; 61
    2b18:	98 87       	std	Y+8, r25	; 0x08
    2b1a:	8f 83       	std	Y+7, r24	; 0x07
	uint16 ubrr_value = 0;
    2b1c:	1e 82       	std	Y+6, r1	; 0x06
    2b1e:	1d 82       	std	Y+5, r1	; 0x05

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2b20:	eb e2       	ldi	r30, 0x2B	; 43
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	82 e0       	ldi	r24, 0x02	; 2
    2b26:	80 83       	st	Z, r24
	//set baud rate
	uint32 baud_rate=Config_Ptr->baud_rate;
    2b28:	ef 81       	ldd	r30, Y+7	; 0x07
    2b2a:	f8 85       	ldd	r31, Y+8	; 0x08
    2b2c:	83 81       	ldd	r24, Z+3	; 0x03
    2b2e:	94 81       	ldd	r25, Z+4	; 0x04
    2b30:	a5 81       	ldd	r26, Z+5	; 0x05
    2b32:	b6 81       	ldd	r27, Z+6	; 0x06
    2b34:	89 83       	std	Y+1, r24	; 0x01
    2b36:	9a 83       	std	Y+2, r25	; 0x02
    2b38:	ab 83       	std	Y+3, r26	; 0x03
    2b3a:	bc 83       	std	Y+4, r27	; 0x04
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2b3c:	ea e2       	ldi	r30, 0x2A	; 42
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	88 e1       	ldi	r24, 0x18	; 24
    2b42:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2b44:	e0 e4       	ldi	r30, 0x40	; 64
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 e8       	ldi	r24, 0x80	; 128
    2b4a:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0XF9) | ((Config_Ptr->bit_data) << 1);
    2b4c:	a0 e4       	ldi	r26, 0x40	; 64
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	e0 e4       	ldi	r30, 0x40	; 64
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	28 2f       	mov	r18, r24
    2b58:	29 7f       	andi	r18, 0xF9	; 249
    2b5a:	ef 81       	ldd	r30, Y+7	; 0x07
    2b5c:	f8 85       	ldd	r31, Y+8	; 0x08
    2b5e:	80 81       	ld	r24, Z
    2b60:	88 2f       	mov	r24, r24
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	88 0f       	add	r24, r24
    2b66:	99 1f       	adc	r25, r25
    2b68:	82 2b       	or	r24, r18
    2b6a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XF7) | ((Config_Ptr->stop_bit) << 3);
    2b6c:	a0 e4       	ldi	r26, 0x40	; 64
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e0 e4       	ldi	r30, 0x40	; 64
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	28 2f       	mov	r18, r24
    2b78:	27 7f       	andi	r18, 0xF7	; 247
    2b7a:	ef 81       	ldd	r30, Y+7	; 0x07
    2b7c:	f8 85       	ldd	r31, Y+8	; 0x08
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	88 2f       	mov	r24, r24
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	88 0f       	add	r24, r24
    2b86:	99 1f       	adc	r25, r25
    2b88:	88 0f       	add	r24, r24
    2b8a:	99 1f       	adc	r25, r25
    2b8c:	88 0f       	add	r24, r24
    2b8e:	99 1f       	adc	r25, r25
    2b90:	82 2b       	or	r24, r18
    2b92:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XCF) | ((Config_Ptr->parity) << 4);
    2b94:	a0 e4       	ldi	r26, 0x40	; 64
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e0 e4       	ldi	r30, 0x40	; 64
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	28 2f       	mov	r18, r24
    2ba0:	2f 7c       	andi	r18, 0xCF	; 207
    2ba2:	ef 81       	ldd	r30, Y+7	; 0x07
    2ba4:	f8 85       	ldd	r31, Y+8	; 0x08
    2ba6:	81 81       	ldd	r24, Z+1	; 0x01
    2ba8:	88 2f       	mov	r24, r24
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	82 95       	swap	r24
    2bae:	92 95       	swap	r25
    2bb0:	90 7f       	andi	r25, 0xF0	; 240
    2bb2:	98 27       	eor	r25, r24
    2bb4:	80 7f       	andi	r24, 0xF0	; 240
    2bb6:	98 27       	eor	r25, r24
    2bb8:	82 2b       	or	r24, r18
    2bba:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((baud_rate) * 8UL))) - 1);
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01
    2bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc0:	ab 81       	ldd	r26, Y+3	; 0x03
    2bc2:	bc 81       	ldd	r27, Y+4	; 0x04
    2bc4:	88 0f       	add	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	aa 1f       	adc	r26, r26
    2bca:	bb 1f       	adc	r27, r27
    2bcc:	88 0f       	add	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	aa 1f       	adc	r26, r26
    2bd2:	bb 1f       	adc	r27, r27
    2bd4:	88 0f       	add	r24, r24
    2bd6:	99 1f       	adc	r25, r25
    2bd8:	aa 1f       	adc	r26, r26
    2bda:	bb 1f       	adc	r27, r27
    2bdc:	9c 01       	movw	r18, r24
    2bde:	ad 01       	movw	r20, r26
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	92 e1       	ldi	r25, 0x12	; 18
    2be4:	aa e7       	ldi	r26, 0x7A	; 122
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	bc 01       	movw	r22, r24
    2bea:	cd 01       	movw	r24, r26
    2bec:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__udivmodsi4>
    2bf0:	da 01       	movw	r26, r20
    2bf2:	c9 01       	movw	r24, r18
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	9e 83       	std	Y+6, r25	; 0x06
    2bf8:	8d 83       	std	Y+5, r24	; 0x05

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2bfa:	e0 e4       	ldi	r30, 0x40	; 64
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2c00:	9e 81       	ldd	r25, Y+6	; 0x06
    2c02:	89 2f       	mov	r24, r25
    2c04:	99 27       	eor	r25, r25
    2c06:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2c08:	e9 e2       	ldi	r30, 0x29	; 41
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0e:	80 83       	st	Z, r24
}
    2c10:	28 96       	adiw	r28, 0x08	; 8
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	de bf       	out	0x3e, r29	; 62
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	cd bf       	out	0x3d, r28	; 61
    2c1c:	cf 91       	pop	r28
    2c1e:	df 91       	pop	r29
    2c20:	08 95       	ret

00002c22 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2c22:	df 93       	push	r29
    2c24:	cf 93       	push	r28
    2c26:	0f 92       	push	r0
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2c2e:	eb e2       	ldi	r30, 0x2B	; 43
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 81       	ld	r24, Z
    2c34:	88 2f       	mov	r24, r24
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	80 72       	andi	r24, 0x20	; 32
    2c3a:	90 70       	andi	r25, 0x00	; 0
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	b9 f3       	breq	.-18     	; 0x2c2e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2c40:	ec e2       	ldi	r30, 0x2C	; 44
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2c48:	0f 90       	pop	r0
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2c58:	eb e2       	ldi	r30, 0x2B	; 43
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	88 23       	and	r24, r24
    2c60:	dc f7       	brge	.-10     	; 0x2c58 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2c62:	ec e2       	ldi	r30, 0x2C	; 44
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
}
    2c68:	cf 91       	pop	r28
    2c6a:	df 91       	pop	r29
    2c6c:	08 95       	ret

00002c6e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2c6e:	df 93       	push	r29
    2c70:	cf 93       	push	r28
    2c72:	00 d0       	rcall	.+0      	; 0x2c74 <UART_sendString+0x6>
    2c74:	0f 92       	push	r0
    2c76:	cd b7       	in	r28, 0x3d	; 61
    2c78:	de b7       	in	r29, 0x3e	; 62
    2c7a:	9b 83       	std	Y+3, r25	; 0x03
    2c7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c7e:	19 82       	std	Y+1, r1	; 0x01
    2c80:	0e c0       	rjmp	.+28     	; 0x2c9e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	28 2f       	mov	r18, r24
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	e2 0f       	add	r30, r18
    2c90:	f3 1f       	adc	r31, r19
    2c92:	80 81       	ld	r24, Z
    2c94:	0e 94 11 16 	call	0x2c22	; 0x2c22 <UART_sendByte>
		i++;
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	8f 5f       	subi	r24, 0xFF	; 255
    2c9c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	28 2f       	mov	r18, r24
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca8:	fc 01       	movw	r30, r24
    2caa:	e2 0f       	add	r30, r18
    2cac:	f3 1f       	adc	r31, r19
    2cae:	80 81       	ld	r24, Z
    2cb0:	88 23       	and	r24, r24
    2cb2:	39 f7       	brne	.-50     	; 0x2c82 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	cf 91       	pop	r28
    2cbc:	df 91       	pop	r29
    2cbe:	08 95       	ret

00002cc0 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2cc0:	0f 93       	push	r16
    2cc2:	1f 93       	push	r17
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	00 d0       	rcall	.+0      	; 0x2cca <UART_receiveString+0xa>
    2cca:	0f 92       	push	r0
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	9b 83       	std	Y+3, r25	; 0x03
    2cd2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2cd4:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cde:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce0:	8c 01       	movw	r16, r24
    2ce2:	02 0f       	add	r16, r18
    2ce4:	13 1f       	adc	r17, r19
    2ce6:	0e 94 28 16 	call	0x2c50	; 0x2c50 <UART_recieveByte>
    2cea:	f8 01       	movw	r30, r16
    2cec:	80 83       	st	Z, r24
    2cee:	0f c0       	rjmp	.+30     	; 0x2d0e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	8f 5f       	subi	r24, 0xFF	; 255
    2cf4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	28 2f       	mov	r18, r24
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2d00:	8c 01       	movw	r16, r24
    2d02:	02 0f       	add	r16, r18
    2d04:	13 1f       	adc	r17, r19
    2d06:	0e 94 28 16 	call	0x2c50	; 0x2c50 <UART_recieveByte>
    2d0a:	f8 01       	movw	r30, r16
    2d0c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	28 2f       	mov	r18, r24
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
    2d16:	9b 81       	ldd	r25, Y+3	; 0x03
    2d18:	fc 01       	movw	r30, r24
    2d1a:	e2 0f       	add	r30, r18
    2d1c:	f3 1f       	adc	r31, r19
    2d1e:	80 81       	ld	r24, Z
    2d20:	83 32       	cpi	r24, 0x23	; 35
    2d22:	31 f7       	brne	.-52     	; 0x2cf0 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	28 2f       	mov	r18, r24
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2e:	fc 01       	movw	r30, r24
    2d30:	e2 0f       	add	r30, r18
    2d32:	f3 1f       	adc	r31, r19
    2d34:	10 82       	st	Z, r1
}
    2d36:	0f 90       	pop	r0
    2d38:	0f 90       	pop	r0
    2d3a:	0f 90       	pop	r0
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	1f 91       	pop	r17
    2d42:	0f 91       	pop	r16
    2d44:	08 95       	ret

00002d46 <__udivmodsi4>:
    2d46:	a1 e2       	ldi	r26, 0x21	; 33
    2d48:	1a 2e       	mov	r1, r26
    2d4a:	aa 1b       	sub	r26, r26
    2d4c:	bb 1b       	sub	r27, r27
    2d4e:	fd 01       	movw	r30, r26
    2d50:	0d c0       	rjmp	.+26     	; 0x2d6c <__udivmodsi4_ep>

00002d52 <__udivmodsi4_loop>:
    2d52:	aa 1f       	adc	r26, r26
    2d54:	bb 1f       	adc	r27, r27
    2d56:	ee 1f       	adc	r30, r30
    2d58:	ff 1f       	adc	r31, r31
    2d5a:	a2 17       	cp	r26, r18
    2d5c:	b3 07       	cpc	r27, r19
    2d5e:	e4 07       	cpc	r30, r20
    2d60:	f5 07       	cpc	r31, r21
    2d62:	20 f0       	brcs	.+8      	; 0x2d6c <__udivmodsi4_ep>
    2d64:	a2 1b       	sub	r26, r18
    2d66:	b3 0b       	sbc	r27, r19
    2d68:	e4 0b       	sbc	r30, r20
    2d6a:	f5 0b       	sbc	r31, r21

00002d6c <__udivmodsi4_ep>:
    2d6c:	66 1f       	adc	r22, r22
    2d6e:	77 1f       	adc	r23, r23
    2d70:	88 1f       	adc	r24, r24
    2d72:	99 1f       	adc	r25, r25
    2d74:	1a 94       	dec	r1
    2d76:	69 f7       	brne	.-38     	; 0x2d52 <__udivmodsi4_loop>
    2d78:	60 95       	com	r22
    2d7a:	70 95       	com	r23
    2d7c:	80 95       	com	r24
    2d7e:	90 95       	com	r25
    2d80:	9b 01       	movw	r18, r22
    2d82:	ac 01       	movw	r20, r24
    2d84:	bd 01       	movw	r22, r26
    2d86:	cf 01       	movw	r24, r30
    2d88:	08 95       	ret

00002d8a <__prologue_saves__>:
    2d8a:	2f 92       	push	r2
    2d8c:	3f 92       	push	r3
    2d8e:	4f 92       	push	r4
    2d90:	5f 92       	push	r5
    2d92:	6f 92       	push	r6
    2d94:	7f 92       	push	r7
    2d96:	8f 92       	push	r8
    2d98:	9f 92       	push	r9
    2d9a:	af 92       	push	r10
    2d9c:	bf 92       	push	r11
    2d9e:	cf 92       	push	r12
    2da0:	df 92       	push	r13
    2da2:	ef 92       	push	r14
    2da4:	ff 92       	push	r15
    2da6:	0f 93       	push	r16
    2da8:	1f 93       	push	r17
    2daa:	cf 93       	push	r28
    2dac:	df 93       	push	r29
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
    2db2:	ca 1b       	sub	r28, r26
    2db4:	db 0b       	sbc	r29, r27
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	f8 94       	cli
    2dba:	de bf       	out	0x3e, r29	; 62
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	cd bf       	out	0x3d, r28	; 61
    2dc0:	09 94       	ijmp

00002dc2 <__epilogue_restores__>:
    2dc2:	2a 88       	ldd	r2, Y+18	; 0x12
    2dc4:	39 88       	ldd	r3, Y+17	; 0x11
    2dc6:	48 88       	ldd	r4, Y+16	; 0x10
    2dc8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dca:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dcc:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dce:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dd0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dd2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dd4:	b9 84       	ldd	r11, Y+9	; 0x09
    2dd6:	c8 84       	ldd	r12, Y+8	; 0x08
    2dd8:	df 80       	ldd	r13, Y+7	; 0x07
    2dda:	ee 80       	ldd	r14, Y+6	; 0x06
    2ddc:	fd 80       	ldd	r15, Y+5	; 0x05
    2dde:	0c 81       	ldd	r16, Y+4	; 0x04
    2de0:	1b 81       	ldd	r17, Y+3	; 0x03
    2de2:	aa 81       	ldd	r26, Y+2	; 0x02
    2de4:	b9 81       	ldd	r27, Y+1	; 0x01
    2de6:	ce 0f       	add	r28, r30
    2de8:	d1 1d       	adc	r29, r1
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	ed 01       	movw	r28, r26
    2df6:	08 95       	ret

00002df8 <_exit>:
    2df8:	f8 94       	cli

00002dfa <__stop_program>:
    2dfa:	ff cf       	rjmp	.-2      	; 0x2dfa <__stop_program>
